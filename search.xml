<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>解决 Github 图片不显示问题</title>
    <url>/posts/fb621aaa.html</url>
    <content><![CDATA[<p>修改 C:\Windows\System32\drivers\etc\hosts 文件</p>
<p>添加如下 ip 地址</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line">140.82.113.3      github.com</span><br><span class="line">140.82.114.20     gist.github.com</span><br><span class="line"></span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars0.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars8.githubusercontent.com</span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo &amp; NexT</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 NexT 翻页按钮图标问题</title>
    <url>/posts/eb5b45e3.html</url>
    <content><![CDATA[<p>见下图</p>
<a id="more"></a>

<img src="/posts/eb5b45e3/image-20200722154007256.png" class>
]]></content>
      <categories>
        <category>Hexo &amp; NexT</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>01_版本控制</title>
    <url>/posts/172a6c9c.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>版本控制（Revision control）是一种在开发的过程中用于管理对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>简单说就是用于管理多人协同开发项目的技术。</p>
<p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<a id="more"></a>

<h3 id="2-常见的版本控制工具"><a href="#2-常见的版本控制工具" class="headerlink" title="2. 常见的版本控制工具"></a>2. 常见的版本控制工具</h3><p>主流的版本控制器有如下这些：</p>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong>（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是 Git 与 SVN</p>
<h3 id="3-版本控制分类"><a href="#3-版本控制分类" class="headerlink" title="3. 版本控制分类"></a>3. 版本控制分类</h3><h4 id="3-1-本地版本控制"><a href="#3-1-本地版本控制" class="headerlink" title="3.1 本地版本控制"></a>3.1 本地版本控制</h4><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p>
<img src="/posts/172a6c9c/1.png" class>

<h4 id="3-2-集中版本控制-SVN"><a href="#3-2-集中版本控制-SVN" class="headerlink" title="3.2 集中版本控制 SVN"></a>3.2 集中版本控制 SVN</h4><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p>
<img src="/posts/172a6c9c/2.png" class>

<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<h4 id="3-3-分布式版本控制-Git"><a href="#3-3-分布式版本控制-Git" class="headerlink" title="3.3 分布式版本控制 Git"></a>3.3 分布式版本控制 Git</h4><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push 到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p>
<p>不会因为服务器损坏或者网络问题，造成不能工作的情况。</p>
<img src="/posts/172a6c9c/2.png" class>]]></content>
      <categories>
        <category>Git 学习笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Hexo 图片不显示问题</title>
    <url>/posts/a0ec3378.html</url>
    <content><![CDATA[<h3 id="1-安装图片插件"><a href="#1-安装图片插件" class="headerlink" title="1. 安装图片插件"></a>1. 安装图片插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h3 id="2-修改-config-xml-配置文件"><a href="#2-修改-config-xml-配置文件" class="headerlink" title="2. 修改 _config.xml 配置文件"></a>2. 修改 _config.xml 配置文件</h3><p>修改 post_asset_folder 值为 true</p>
<a id="more"></a>

<h3 id="3-新建一篇文章"><a href="#3-新建一篇文章" class="headerlink" title="3. 新建一篇文章"></a>3. 新建一篇文章</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new post title</span><br></pre></td></tr></table></figure>

<h3 id="4-在自动生成的资源文件夹下放入图片"><a href="#4-在自动生成的资源文件夹下放入图片" class="headerlink" title="4. 在自动生成的资源文件夹下放入图片"></a>4. 在自动生成的资源文件夹下放入图片</h3><h3 id="5-修改-md-文档"><a href="#5-修改-md-文档" class="headerlink" title="5. 修改 md 文档"></a>5. 修改 md 文档</h3><p>将图片的 markdown 格式修改为 </p>
<p><em>详细参照官方文档 <a href="https://hexo.bootcss.com/docs/asset-folders.html">https://hexo.bootcss.com/docs/asset-folders.html</a></em></p>
<h3 id="6-如果有必要-禁止网页缓存"><a href="#6-如果有必要-禁止网页缓存" class="headerlink" title="6. 如果有必要 禁止网页缓存"></a>6. 如果有必要 禁止网页缓存</h3>]]></content>
      <categories>
        <category>Hexo &amp; NexT</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 NexT 首页文章预览问题</title>
    <url>/posts/63dfd085.html</url>
    <content><![CDATA[<p>见下图</p>
<a id="more"></a>

<img src="/posts/63dfd085/pic.png" class>]]></content>
      <categories>
        <category>Hexo &amp; NexT</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>02_环境配置和基本理论</title>
    <url>/posts/4bba9942.html</url>
    <content><![CDATA[<h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h3><h4 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h4><ol>
<li><p>下载软件</p>
<blockquote>
<p>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>镜像：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p>
</blockquote>
</li>
<li><p>如果安装时没有设置文本编辑器，可以使用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --replace-all core.editor &quot;&#x27;D:\Installed\Microsoft VS Code\Code.exe&#x27;&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="1-2-常用的-Linux-命令"><a href="#1-2-常用的-Linux-命令" class="headerlink" title="1.2 常用的 Linux 命令"></a>1.2 常用的 Linux 命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>cd</code></td>
<td>改变目录</td>
</tr>
<tr>
<td><code>cd..</code></td>
<td>回退到上一个目录，直接<code>cd</code>进入默认目录</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td>显示当前所在的目录路径</td>
</tr>
<tr>
<td><code>ls</code>或<code>ll</code></td>
<td>列出当前目录中的所有文件</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>新建一个文件</td>
</tr>
<tr>
<td><code>rm</code></td>
<td>删除一个文件</td>
</tr>
<tr>
<td><code>mkdir</code></td>
<td>新建一个目录（文件夹）</td>
</tr>
<tr>
<td><code>rm -r</code></td>
<td>删除一个文件夹</td>
</tr>
<tr>
<td><code>mv</code></td>
<td>移动文件</td>
</tr>
<tr>
<td><code>reset</code></td>
<td>重新初始化终端/清屏</td>
</tr>
<tr>
<td><code>clear</code></td>
<td>清屏</td>
</tr>
<tr>
<td><code>history</code></td>
<td>查看命令历史</td>
</tr>
<tr>
<td><code>help</code></td>
<td>帮助</td>
</tr>
</tbody></table>
<a id="more"></a>

<h4 id="1-3-必要的配置"><a href="#1-3-必要的配置" class="headerlink" title="1.3 必要的配置"></a>1.3 必要的配置</h4><ul>
<li><p>查看配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看系统配置</span></span><br><span class="line">git config --system --list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前用户配置</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件目录</p>
<p><code>Git\etc\gitconfig</code>对应 –system 系统</p>
<p><code>C:\Users\Horsen\.gitconfig</code>对应 –global 当前用户</p>
</li>
<li><p>设置用户名和邮箱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;HorsenLiu&quot;  </span><br><span class="line">git config --global user.email &quot;horsenliu@qq.com&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-基本理论"><a href="#2-基本理论" class="headerlink" title="2. 基本理论"></a>2. 基本理论</h3><h4 id="1-1-工作区域"><a href="#1-1-工作区域" class="headerlink" title="1.1 工作区域"></a>1.1 工作区域</h4><p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区（Stage/Index）、资源库（Repository 或 Git Directory）。如果在加上远程的 git 仓库（Remote Directory）就可以分为四个工作区域。</p>
<p>文件在这四个区域之间的转换关系如下：</p>
<img src="/posts/4bba9942/image-20200831135257125.png" class>

<ul>
<li>Workspace：工作区，就是平时存放项目代码的地方</li>
<li>Index / Stage：暂存区，用于临时存放改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面提交的是所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是项目组中的一台电脑用于远程数据交换</li>
</ul>
<h4 id="1-2-工作流程"><a href="#1-2-工作流程" class="headerlink" title="1.2 工作流程"></a>1.2 工作流程</h4><ol>
<li>在工作目录中添加、修改文件</li>
<li>将需要进行版本管理的文件放入暂存区域</li>
<li>将暂存区域的文件提交到git仓库</li>
</ol>
<p>因此，Git 管理的文件有三种状态：已修改（modified），已暂存（staged），已提交（committed）</p>
<img src="/posts/4bba9942/image-20200831140042005.png" class>]]></content>
      <categories>
        <category>Git 学习笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>03_项目搭建和文件操作</title>
    <url>/posts/3bd90bb.html</url>
    <content><![CDATA[<blockquote>
<p>常用的 6 个命令</p>
</blockquote>
<img src="/posts/3bd90bb/image-20200831142834179.png" class>

<h3 id="1-创建工作目录"><a href="#1-创建工作目录" class="headerlink" title="1. 创建工作目录"></a>1. 创建工作目录</h3><ol>
<li><p>创建全新仓库，新建文件夹，右键 Git bash here</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p>克隆远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2. 文件操作"></a>2. 文件操作</h3><h4 id="2-1-文件-4-种状态"><a href="#2-1-文件-4-种状态" class="headerlink" title="2.1 文件 4 种状态"></a>2.1 文件 4 种状态</h4><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态， 不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。 </p>
<ul>
<li><p><strong>Untracked</strong>：未跟踪</p>
<p>此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制。通过<code>git add</code>状态变为<code>Staged</code></p>
</li>
<li><p><strong>Unmodify</strong>: 文件已经入库, 未修改</p>
<p>即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为<code>Modified</code>，如果使用<code>git rm</code>移出版本库，则成为<code>Untracked</code>文件</p>
</li>
<li><p><strong>Modified</strong>：文件已修改</p>
<p>仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过<code>git add</code>可进入暂存<code>Staged</code>状态，使用<code>git checkout</code>则丢弃修改过，返回到<code>Unmodify</code>状态，这个<code>git checkout</code>即从库中取出文件，覆盖当前修改</p>
</li>
<li><p><strong>Staged</strong>：暂存状态</p>
<p>执行<code>git commit</code>则将修改同步到库中，这时库中的文件和本地文件又变为一 致，文件为<code>Unmodify</code>状态。执行<code>git reset HEAD filename</code>取消暂存，文件状态为<code>Modified</code></p>
</li>
</ul>
<a id="more"></a>

<h4 id="2-2-查看文件状态"><a href="#2-2-查看文件状态" class="headerlink" title="2.2 查看文件状态"></a>2.2 查看文件状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交到本地</span></span><br><span class="line">git commit -m &quot;messages&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交到远程仓库</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h4 id="2-3-忽略文件"><a href="#2-3-忽略文件" class="headerlink" title="2.3 忽略文件"></a>2.3 忽略文件</h4><p>在主目录下建立 .gitignore 文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行和注释 </li>
<li>星号（*）代表任意多个字符，问号（?）代表一个字符，方括号 （[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件 （默认文件或目录都忽略）</li>
</ol>
<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*.txt                # 忽略所有.txt结尾的文件</span><br><span class="line">!lib.txt            # 但lib.txt除外</span><br><span class="line">/temp                # 仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/                # 忽略build/目录下的所有文件 </span><br><span class="line">doc/*.txt            # 忽略doc/notes.txt但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git 学习笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>04_实战运用</title>
    <url>/posts/8a33cd0b.html</url>
    <content><![CDATA[<blockquote>
<p>关于如何在 IDEA 中运用 VCS 进行版本控制，并且推送到远程仓库，详见另一个宝藏老师 longway777 的视频：</p>
<p><a href="https://www.bilibili.com/video/BV1eT4y1u7g7">https://www.bilibili.com/video/BV1eT4y1u7g7</a></p>
</blockquote>
<h3 id="关于分支的常用命令"><a href="#关于分支的常用命令" class="headerlink" title="关于分支的常用命令"></a>关于分支的常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支, 但依然停留在当前分支</span></span><br><span class="line">git branch [brach-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支, 并切换到该分支</span></span><br><span class="line">git checkout -b [brach-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支 </span></span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支 </span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支 </span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git 学习笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Linux 概述</title>
    <url>/posts/af52da66.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而<br>编写的。</p>
<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口）和<br>UNIX 的多用户、多任务，支持多线程和多 CPU 的操作系统。</p>
<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<a id="more"></a>

<h3 id="2-发行版"><a href="#2-发行版" class="headerlink" title="2. 发行版"></a>2. 发行版</h3><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>
<img src="/posts/af52da66/1.jpg" class>

<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p>
<img src="/posts/af52da66/2.jpg" class>

<h3 id="3-应用领域"><a href="#3-应用领域" class="headerlink" title="3. 应用领域"></a>3. 应用领域</h3><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 <strong>LAMP</strong>（Linux + Apache + MySQL + PHP）或 <strong>LNMP</strong>（Linux + Nginx+ MySQL + PHP）组合。</p>
<p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p>
<ul>
<li>巴西联邦政府由于支持 Linux 而世界闻名。</li>
<li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li>
<li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li>
<li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li>
<li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如<br>Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li>
<li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府<br>软件。</li>
<li>法国和德国同样开始逐步采用 Linux。</li>
</ul>
]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>02_环境搭建</title>
    <url>/posts/327e900e.html</url>
    <content><![CDATA[<h3 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h3><ul>
<li><p><a href="http://mirrors.aliyun.com/centos/%EF%BC%8C%E6%88%91%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF">http://mirrors.aliyun.com/centos/，我使用的是</a> CentOS 7</p>
</li>
<li><p>或者用狂神已经配置好的虚拟机</p>
<blockquote>
<p>系统版本：CentOS 7</p>
<p>链接：<a href="https://pan.baidu.com/s/1EPhK9nqK9AiBmuitscVy9Q">https://pan.baidu.com/s/1EPhK9nqK9AiBmuitscVy9Q</a></p>
<p>提取码：76x5</p>
</blockquote>
</li>
<li><p>或者像我一样，买一本《Linux 就该这么学》，跟着刘遄老师学 Linux。</p>
<blockquote>
<p>这里是该书的相关官方网站，网站中可以下载很多工具和本书的 PDF 版本</p>
<p><a href="https://www.linuxprobe.com/">https://www.linuxprobe.com/</a></p>
</blockquote>
<p>后来发现一个问题，该书中使用的发行版本是 RedHat 7，在安装 yum 的时候需要在官网注册，也就是说要付费。网上的解决方法是卸载原有的 yum 相关包，安装 CentOS 7 的 yum 相关包。与其舍近求远，不如直接采用前两种方案好了。</p>
</li>
</ul>
<h3 id="2-安装-VMWare"><a href="#2-安装-VMWare" class="headerlink" title="2. 安装 VMWare"></a>2. 安装 VMWare</h3><p>我习惯去老殁的网站<a href="http://www.mpyit.com找软件,我用的是/">www.mpyit.com找软件，我用的是</a> 15.5.6 已激活 中文精简 安装版</p>
<blockquote>
<p><a href="https://www.mpyit.com/vmwareproxx.html">https://www.mpyit.com/vmwareproxx.html</a></p>
</blockquote>
<h3 id="3-打开虚拟机"><a href="#3-打开虚拟机" class="headerlink" title="3. 打开虚拟机"></a>3. 打开虚拟机</h3><p>直接把狂神的压缩包解压，里面就是配置好的虚拟机，在 VMWare 中直接打开就可以用了。</p>
<h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h3><ol>
<li>默认用户 Linux 的用户密码是<code>123456</code></li>
<li>管理员用户的用户名是<code>root</code>，密码是<code>123456</code></li>
</ol>
]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>03_走进 Linux</title>
    <url>/posts/fd2352ad.html</url>
    <content><![CDATA[<h3 id="1-开机登录"><a href="#1-开机登录" class="headerlink" title="1. 开机登录"></a>1. 开机登录</h3><p>开机会启动许多程序，它们在 Windows 中叫做”服务”（service），在 Linux 中叫做”守护进程”（daemon）。</p>
<p>一般来说，用户的登录方式有三种：</p>
<ul>
<li>命令行登录</li>
<li>SSH 登录</li>
<li>图形界面登录</li>
</ul>
<p>最高权限账户为 root，可以操作一切。</p>
<h3 id="2-关机"><a href="#2-关机" class="headerlink" title="2. 关机"></a>2. 关机</h3><p>Linux 大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p>
<p>关机命令<code>shutdown</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sync <span class="comment"># 在关机前一般先执行该命令 将数据由内存同步到硬盘中 防止丢失</span></span><br><span class="line">shutdown <span class="comment"># 关机命令 可以 man shutdown 来看一下帮助文档</span></span><br><span class="line"></span><br><span class="line">shutdown –h 10 <span class="comment"># 这个命令告诉大家，计算机将在10分钟后关机</span></span><br><span class="line">shutdown –h now <span class="comment"># 立马关机</span></span><br><span class="line">shutdown –h 20:25 <span class="comment"># 系统会在今天20:25关机</span></span><br><span class="line">shutdown –h +10 <span class="comment"># 十分钟后关机</span></span><br><span class="line">shutdown –r now <span class="comment"># 系统立马重启</span></span><br><span class="line">shutdown –r +10 <span class="comment"># 系统十分钟后重启</span></span><br><span class="line">reboot <span class="comment"># 重启，等同于 shutdown –r now</span></span><br><span class="line">halt <span class="comment"># 关闭系统，等同于 shutdown –h now 和 poweroff</span></span><br></pre></td></tr></table></figure>

<p><em>不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中</em></p>
<a id="more"></a>

<h3 id="3-系统目录结构"><a href="#3-系统目录结构" class="headerlink" title="3. 系统目录结构"></a>3. 系统目录结构</h3><img src="/posts/fd2352ad/image-20201120084536427.png" class>

<img src="/posts/fd2352ad/1.jpg" class>

<table>
<thead>
<tr>
<th>目录</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>/bin</td>
<td>Binary 的缩写，这个目录存放着最经常使用的命令。</td>
</tr>
<tr>
<td>/boot</td>
<td>存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件（不要动）</td>
</tr>
<tr>
<td>/dev</td>
<td>Device 的缩写，存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的</td>
</tr>
<tr>
<td><strong>/etc</strong></td>
<td><strong>存放所有的系统管理所需要的配置文件和子目录</strong></td>
</tr>
<tr>
<td><strong>/home</strong></td>
<td><strong>用户的主目录。在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账户名来命名的</strong></td>
</tr>
<tr>
<td>/lib</td>
<td>存放系统最基本的动态连接共享库，其作用类似于Windows 里的 DLL 文件（不要动）</td>
</tr>
<tr>
<td>/lost+found</td>
<td>一般情况下是空的，当系统非法关机后，这里就存放了一些文件</td>
</tr>
<tr>
<td>/media</td>
<td>Linux 会自动识别一些设备，例如U盘、光驱等，识别后，Linux 会把识别的设备挂载到这个目录</td>
</tr>
<tr>
<td>/mnt</td>
<td>为了让用户临时挂载别的文件系统，可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容</td>
</tr>
<tr>
<td><strong>/opt</strong></td>
<td><strong>给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的</strong></td>
</tr>
<tr>
<td>/proc</td>
<td>是一个虚拟的目录，它是系统内存的映射，可以通过直接访问这个目录来获取系统信息（不用管）</td>
</tr>
<tr>
<td><strong>/root</strong></td>
<td><strong>为系统管理员，也称作超级权限者的用户主目录</strong></td>
</tr>
<tr>
<td>/sbin</td>
<td>s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序</td>
</tr>
<tr>
<td>/srv</td>
<td>存放一些服务启动之后需要提取的数据</td>
</tr>
<tr>
<td>/sys</td>
<td>这是 Linux 2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs</td>
</tr>
<tr>
<td><strong>/tmp</strong></td>
<td><strong>用来存放一些临时文件</strong></td>
</tr>
<tr>
<td><strong>/usr</strong></td>
<td><strong>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 Windows 中的 Programe Files</strong></td>
</tr>
<tr>
<td>/usr/bin</td>
<td>系统用户使用的应用程序</td>
</tr>
<tr>
<td>/usr/sbin</td>
<td>超级用户使用的比较高级的管理程序和系统守护程序</td>
</tr>
<tr>
<td>/usr/src</td>
<td>内核源代码默认的放置目录</td>
</tr>
<tr>
<td><strong>/var</strong></td>
<td><strong>存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件</strong></td>
</tr>
<tr>
<td>/run</td>
<td>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除</td>
</tr>
<tr>
<td><strong>/www</strong></td>
<td><strong>存放服务器网站相关的资源、环境，网站的项目</strong></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Linux</tag>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>04_文件属性</title>
    <url>/posts/522b5b26.html</url>
    <content><![CDATA[<h3 id="1-一切皆文件"><a href="#1-一切皆文件" class="headerlink" title="1. 一切皆文件"></a>1. 一切皆文件</h3><p>对于 Linux 系统来说，一切皆文件。</p>
<p>可以使用<code>ls -l</code>或<code>ll</code>命令来显示一个文件的属性以及文件所的用户和组</p>
<img src="/posts/522b5b26/image-20201120093657057.png" class>

<img src="/posts/522b5b26/1.jpg" class>

<a id="more"></a>

<ul>
<li><p>第 0 位确定文件类型</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>d</code></td>
<td>目录</td>
</tr>
<tr>
<td><code>-</code></td>
<td>文件</td>
</tr>
<tr>
<td><code>l</code></td>
<td>链接文档</td>
</tr>
<tr>
<td><code>b</code></td>
<td>装置文件里面的可供储存的接口设备 ( 可随机存取装置 )</td>
</tr>
<tr>
<td><code>c</code></td>
<td>装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )</td>
</tr>
</tbody></table>
</li>
<li><p>第 1-3 位确定属主（该文件的所有者）拥有该文件的权限。这三个权限的位置不会改变，如果没有权限，就会出现减号<code>-</code>。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>r</code></td>
<td>可读 read</td>
</tr>
<tr>
<td><code>w</code></td>
<td>可写 write</td>
</tr>
<tr>
<td><code>x</code></td>
<td>可执行 execute</td>
</tr>
</tbody></table>
</li>
<li><p>第 4-6 位确定属组（所有<br>者的同组用户）拥有该文件的权限</p>
</li>
<li><p>第 7-9 位确定其他用户拥有该文件的权限</p>
</li>
</ul>
<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。同时，在 Linux 系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>
<p>因此，Linux 系统按<strong>文件所有者</strong>、<strong>文件所有者同组用户</strong>和<strong>其他用户</strong>来规定了不同的文件访问权限。</p>
<h3 id="2-修改文件属性"><a href="#2-修改文件属性" class="headerlink" title="2. 修改文件属性"></a>2. 修改文件属性</h3><h4 id="2-1-chgrp：更改文件属组"><a href="#2-1-chgrp：更改文件属组" class="headerlink" title="2.1 chgrp：更改文件属组"></a>2.1 chgrp：更改文件属组</h4><p><code>chgrp [-R] 属组名 文件名</code></p>
<h4 id="2-2-chown：更改文件属主，也可以同时更改文件属组"><a href="#2-2-chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="2.2 chown：更改文件属主，也可以同时更改文件属组"></a>2.2 chown：更改文件属主，也可以同时更改文件属组</h4><p><code>chown [–R] 属主名 文件名</code><br><code>chown [-R] 属主名:属组名 文件名</code></p>
<h4 id="2-3-chmod：更改文件-9-个属性"><a href="#2-3-chmod：更改文件-9-个属性" class="headerlink" title="2.3 chmod：更改文件 9 个属性"></a>2.3 chmod：更改文件 9 个属性</h4><p><code>chmod [-R] xyz 文件或目录</code></p>
<p>Linux 文件属性有两种设置方法，一种是数字，一种是符号。基本权限有 9 个，分别是 owner/group/others 三种身份各有自己的 read/write/execute 权限。这 9 个权限是三个三个一组的，其中，可以使用数字来代表各个权限，各权限的分数如下：</p>
<p><code>r:4    w:2    x:1</code></p>
<p>每种身份（owner/group/others）各自的三个权限（r/w/x）分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">others&#x3D; --- &#x3D; 0+0+0 &#x3D; 0</span><br></pre></td></tr></table></figure>

<p>所以对应的命令就是<code>chmod 770 filename</code></p>
]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>05_硬链接和软链接</title>
    <url>/posts/fba68c79.html</url>
    <content><![CDATA[<p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p>
<table>
<thead>
<tr>
<th></th>
<th>硬链接</th>
<th>软链接</th>
</tr>
</thead>
<tbody><tr>
<td>特点</td>
<td>删除其中任何一个都不会影响另外一个的访问</td>
<td>如果 B 被删除了，A 仍然存在，但指向的是一个无效的链接</td>
</tr>
<tr>
<td>命令</td>
<td><code>ln 文件1 文件2</code></td>
<td><code>ln -s 文件1 文件2</code></td>
</tr>
</tbody></table>
<p>通过<code>ls -li</code>可以显示文件的 inode 节点信息</p>
<a id="more"></a>

<h3 id="1-硬链接"><a href="#1-硬链接" class="headerlink" title="1. 硬链接"></a>1. 硬链接</h3><p>硬链接指通过索引节点来进行链接。</p>
<p>在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。</p>
<p>在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B对文件系统来说是完全平等的。<strong>删除其中任何一个都不会影响另外一个的访问。</strong></p>
<p>硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的链接。只删除一个链接并不影响索引节点本身和其它的链接，只有当最后一个链接被删除后，文件的数据块及目录的链接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。</p>
<h3 id="2-软链接"><a href="#2-软链接" class="headerlink" title="2. 软链接"></a>2. 软链接</h3><p>另外一种链接称之为符号链接（Symbolic Link），也叫软链接。<strong>软链接文件有类似于 Windows 的快捷方式。</strong>它实际上是一个特殊的文件。在符号链接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>
]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>06_Vim 编辑器</title>
    <url>/posts/9e45af71.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>
<p>Vim 则可以说是程序开发者的一项很好用的工具。所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>
<p>连 Vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 Vim 是一个程序开发工具而不是文字处理软件。</p>
<a id="more"></a>

<h3 id="2-Vim-常用按键"><a href="#2-Vim-常用按键" class="headerlink" title="2. Vim 常用按键"></a>2. Vim 常用按键</h3><img src="/posts/9e45af71/1.png" class>

<p>参考狂神的微信公众号文章</p>
<blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483895&amp;idx=1&amp;sn=b685934ee0d08b9d01cc0c35ed7fed71&amp;scene=19#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247483895&amp;idx=1&amp;sn=b685934ee0d08b9d01cc0c35ed7fed71&amp;scene=19#wechat_redirect</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>01_安装 MySQL</title>
    <url>/posts/16b0a39b.html</url>
    <content><![CDATA[<blockquote>
<p>参照狂神说的博客：<a href="https://blog.csdn.net/qq_33369905/article/details/105828923">https://blog.csdn.net/qq_33369905/article/details/105828923</a></p>
</blockquote>
<h3 id="1-下载-zip-格式的安装文件"><a href="#1-下载-zip-格式的安装文件" class="headerlink" title="1. 下载 zip 格式的安装文件"></a>1. 下载 zip 格式的安装文件</h3><p>MySQL v5.7.31</p>
<p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.31-winx64.zip</a></p>
<h3 id="2-解压到安装目录"><a href="#2-解压到安装目录" class="headerlink" title="2. 解压到安装目录"></a>2. 解压到安装目录</h3><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h3><p>Path 变量添加 D:\Environment\mysql-5.7.31\bin</p>
<a id="more"></a>

<h3 id="4-新建配置文件-my-ini"><a href="#4-新建配置文件-my-ini" class="headerlink" title="4. 新建配置文件 my.ini"></a>4. 新建配置文件 my.ini</h3><p><em>注意：修改路径</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Environment\mysql-<span class="number">5.7</span>.<span class="number">31</span>\</span><br><span class="line"><span class="attr">datadir</span>=D:\Environment\mysql-<span class="number">5.7</span>.<span class="number">31</span>\data\</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<h3 id="5-启动管理员模式的-cmd"><a href="#5-启动管理员模式的-cmd" class="headerlink" title="5. 启动管理员模式的 cmd"></a>5. 启动管理员模式的 cmd</h3><ol>
<li><p>切换到 bin 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">d:</span><br><span class="line">cd Environment\mysql-5.7.31\bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 mysqld 服务，初始化 mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld –install</span><br><span class="line">mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改管理员密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br><span class="line">mysql –u root –p</span><br><span class="line">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host = &#x27;localhost&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="6-注释-my-ini-文件的最后一句话"><a href="#6-注释-my-ini-文件的最后一句话" class="headerlink" title="6. 注释 my.ini 文件的最后一句话"></a>6. 注释 my.ini 文件的最后一句话</h3><h3 id="7-重启-MySQL"><a href="#7-重启-MySQL" class="headerlink" title="7. 重启 MySQL"></a>7. 重启 MySQL</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<h3 id="8-测试连接"><a href="#8-测试连接" class="headerlink" title="8. 测试连接"></a>8. 测试连接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure>

<h3 id="9-使用-SQLyog-管理数据库"><a href="#9-使用-SQLyog-管理数据库" class="headerlink" title="9. 使用 SQLyog 管理数据库"></a>9. 使用 SQLyog 管理数据库</h3><h4 id="9-0-SQLyog-注册码"><a href="#9-0-SQLyog-注册码" class="headerlink" title="9.0 SQLyog 注册码"></a>9.0 SQLyog 注册码</h4><p>kuangshen</p>
<p>8d8120df-a5c3-4989-8f47-5afc79c56e7c</p>
<h4 id="9-1-新建数据库"><a href="#9-1-新建数据库" class="headerlink" title="9.1 新建数据库"></a>9.1 新建数据库</h4><ul>
<li><p>左侧边栏右键 -&gt; 点击【新建数据库】</p>
</li>
<li><p>字符集：utf8</p>
</li>
<li><p>排序规则：utf8_general_ci</p>
</li>
</ul>
<h4 id="9-2-新建表"><a href="#9-2-新建表" class="headerlink" title="9.2 新建表"></a>9.2 新建表</h4><ul>
<li>引擎：InnoDB</li>
<li>字符集：utf8</li>
<li>核对：utf8_general_ci</li>
</ul>
<h4 id="9-3-添加记录"><a href="#9-3-添加记录" class="headerlink" title="9.3 添加记录"></a>9.3 添加记录</h4><ul>
<li>右键表 -&gt; 【打开表】</li>
<li>输入</li>
<li>右上角刷新 保存</li>
</ul>
]]></content>
      <categories>
        <category>MySQL 学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>07_软件安装</title>
    <url>/posts/706592ae.html</url>
    <content><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>在 Linux 上安装软件一般有三种方式</p>
<ul>
<li>通过 rpm 安装包（以下用安装 JDK 来演示）</li>
<li>通过解压安装包（以下用安装 Tomcat 来演示）</li>
<li>通过 yum 安装（以下用安装 Docker 来演示）</li>
</ul>
<a id="more"></a>

<h3 id="1-安装-JDK"><a href="#1-安装-JDK" class="headerlink" title="1. 安装 JDK"></a>1. 安装 JDK</h3><ol>
<li><p>下载好 JDK（注意版本），然后传到虚拟机中</p>
<blockquote>
<p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
</blockquote>
</li>
<li><p>执行<code>java -version</code>先看看有没有自带的 JDK</p>
</li>
<li><p>有的话就卸载，先找到具体的名字，再根据名字卸载，最后检查一下是否卸载干净</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos01 Downloads]<span class="comment"># rpm -qa|grep jdk</span></span><br><span class="line">java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64</span><br><span class="line">copy-jdk-configs-3.3-10.el7_5.noarch</span><br><span class="line">java-1.8.0-openjdk-headless-1.8.0.262.b10-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@centos01 Downloads]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64</span></span><br><span class="line"></span><br><span class="line">[root@centos01 Downloads]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.262.b10-1.el7.x86_64</span></span><br><span class="line"></span><br><span class="line">[root@centos01 Downloads]<span class="comment"># java -version</span></span><br><span class="line">-bash: /usr/bin/java: No such file or directory，</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后安装下载好的 JDK</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos01 Downloads]<span class="comment"># rpm -ivh jdk-8u271-linux-x64.rpm </span></span><br><span class="line">warning: jdk-8u271-linux-x64.rpm: Header V3 RSA/SHA256 Signature, key ID ec551f03: NOKEY</span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:jdk1.8-2000:1.8.0_271-fcs        <span class="comment">################################# [100%]</span></span><br><span class="line">Unpacking JAR files...</span><br><span class="line">    tools.jar...</span><br><span class="line">    plugin.jar...</span><br><span class="line">    javaws.jar...</span><br><span class="line">    deploy.jar...</span><br><span class="line">    rt.jar...</span><br><span class="line">    jsse.jar...</span><br><span class="line">    charsets.jar...</span><br><span class="line">    localedata.jar...</span><br><span class="line">    </span><br><span class="line">[root@centos01 Downloads]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_271&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_271-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.271-b09, mixed mode)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置环境变量（这里有个小问题，先不要做，下面会讲）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos01 Downloads]<span class="comment"># vim /etc/profile</span></span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_221-amd64</span><br><span class="line">CLASSPATH=%JAVA_HOME%/lib:%JAVA_HOME%/jre/lib</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin</span><br><span class="line"><span class="built_in">export</span> PATH CLASSPATH JAVA_HOME</span><br><span class="line"><span class="comment"># 使环境和变量生效（根据弹幕所说这句话不需要</span></span><br><span class="line">[root@centos01 Downloads]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>这里讲一下问题。根据弹幕所说，以 rpm 方式安装的 JDK 不需要配置环境变量。可以看第 4 步最后，安装好之后直接就可以通过命令看到版本号，说明此时环境变量已经有了。</p>
<p>然后我查了一下原因，看到了刘遄老师网站中的一篇文章：</p>
<blockquote>
<p>为什么JDK的RPM包安装方式不需要配置Java环境变量<br><a href="https://www.linuxprobe.com/jdk-rpm.html">https://www.linuxprobe.com/jdk-rpm.html</a></p>
</blockquote>
<p>问题解决了，第 5 步是不需要的。当然如果你使用压缩包解压的方式安装，还是需要这一步的。</p>
<h3 id="2-安装-Tomcat"><a href="#2-安装-Tomcat" class="headerlink" title="2. 安装 Tomcat"></a>2. 安装 Tomcat</h3><ol>
<li><p>下载好 Tomcat（注意版本），然后传到虚拟机中</p>
<blockquote>
<p><a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>
</blockquote>
</li>
<li><p>将文件移动到 /usr/tomcat/ 下，并解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos01 tomcat]<span class="comment"># tar -zxvf apache-tomcat-9.0.40.tar.gz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 bin 目录，启动 tomcat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos01 bin]<span class="comment"># ./startup.sh</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>开启 80 和 8080 端口，顺便介绍一下防火墙相关的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"><span class="comment"># 开启、重启、关闭firewalld.service服务</span></span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all <span class="comment"># 查看全部信息</span></span><br><span class="line">firewall-cmd --list-ports <span class="comment"># 只看端口信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启端口</span></span><br><span class="line"><span class="comment"># 1.开端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"><span class="comment"># 2.重启防火墙</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line">命令含义：</span><br><span class="line">--zone <span class="comment"># 作用域</span></span><br><span class="line">--add-port=80/tcp <span class="comment"># 添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent <span class="comment"># 永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>另外说一下，可以直接购买一个属于自己的域名，解析后如果端口是 80-http 或 443-https 可以直接访问，如果是 9000 8080，就需要通过 Apache 或者 Nginx 做一下反向代理。</p>
</li>
</ol>
<h3 id="3-安装-Docker"><a href="#3-安装-Docker" class="headerlink" title="3. 安装 Docker"></a>3. 安装 Docker</h3><ol>
<li><p>这是官方的安装文档</p>
<blockquote>
<p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
</blockquote>
</li>
<li><p>安装 gcc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载旧版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">            docker-client \</span><br><span class="line">            docker-client-latest \</span><br><span class="line">            docker-common \</span><br><span class="line">            docker-latest \</span><br><span class="line">            docker-latest-logrotate \</span><br><span class="line">            docker-logrotate \</span><br><span class="line">            docker-engine</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装需要的软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 stable 镜像仓库，用阿里云的，不要用官网的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>这里遇到一个问题，由于之前复制命令的时候多复制了一个回车符，导致设置了一个错误的仓库，后来再执行一遍正确的也搞不对了。</p>
<p>这个时候需要进入 /etc/yum.repos.d，看看里面有什么内容</p>
<img src="/posts/706592ae/image-20201123140750519.png" class>

<p>看起来这个就是我们刚才设置的仓库（现在这个是对的，如果是错误的，就把它删掉，然后重新执行第 5 步）</p>
</li>
<li><p>安装 docker 引擎</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker run hello-world</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Linux 学习笔记</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>环境搭建</tag>
        <tag>Linux</tag>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>02_数据库操作</title>
    <url>/posts/5dfb91cd.html</url>
    <content><![CDATA[<h3 id="1-命令行操作"><a href="#1-命令行操作" class="headerlink" title="1. 命令行操作"></a>1. 命令行操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 连接数据库</span></span><br><span class="line">mysql -uroot -p123456</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换数据库</span></span><br><span class="line"><span class="keyword">use</span> school;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">describe</span> student；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 新建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> newdb;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-结构化查询语句分类"><a href="#2-结构化查询语句分类" class="headerlink" title="2. 结构化查询语句分类"></a>2. 结构化查询语句分类</h3><table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>DDL（数据定义语言）</td>
<td>定义和管理数据对象，如数据库、数据表等</td>
<td>create、drop、alter</td>
</tr>
<tr>
<td>DML（数据操作语言）</td>
<td>操作数据库对象中所包含的数据</td>
<td>insert、update、delete</td>
</tr>
<tr>
<td>DQL（数据查询语言）</td>
<td>查询数据库数据</td>
<td>select</td>
</tr>
<tr>
<td>DCL（数据控制语言）</td>
<td>管理数据库的语言，包括管理权限及数据更改</td>
<td>grant、commit、rollback</td>
</tr>
</tbody></table>
<h3 id="3-操作数据库"><a href="#3-操作数据库" class="headerlink" title="3. 操作数据库"></a>3. 操作数据库</h3><ol>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] xxx;</span><br></pre></td></tr></table></figure>

<p>查看数据库的定义语句（逆向）</p>
<p><code>show create database xxx</code></p>
</li>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] xxx;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="string">`xxx`</span>;</span><br><span class="line"><span class="comment">-- 如果表明或字段名为关键字 则需要加``</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">database</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-操作数据库中的表"><a href="#4-操作数据库中的表" class="headerlink" title="4. 操作数据库中的表"></a>4. 操作数据库中的表</h3><ol start="0">
<li><p>数据库表的字段属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Unsigned</td>
<td>无符号整数（表示不能为负数）</td>
</tr>
<tr>
<td>Zerofill</td>
<td>0填充（不足位数自动补0）</td>
</tr>
<tr>
<td>自增</td>
<td>通常用来设计唯一主键（必须是整数类型）</td>
</tr>
<tr>
<td>非空</td>
<td>not null：不赋值报错    null：默认值为null</td>
</tr>
<tr>
<td>默认</td>
<td>默认值</td>
</tr>
</tbody></table>
</li>
<li><p>创建数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] <span class="string">`student`</span>(</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment <span class="keyword">comment</span> <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">&#x27;匿名&#x27;</span> <span class="keyword">comment</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">comment</span> <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">comment</span> <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    <span class="string">`birthday`</span> datetime <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8</span><br></pre></td></tr></table></figure>

<p>查看数据库表的定义语句（逆向）</p>
<p><code>show create table xxx</code></p>
</li>
<li><p>显示表的结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">desc xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> oldName <span class="keyword">rename</span> <span class="keyword">as</span> newName</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加表的字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> age <span class="built_in">int</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">modify</span> age <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">change</span> age age1 <span class="built_in">int</span>(<span class="number">3</span>) <span class="comment">-- 字段重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">drop</span> age1</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] teacher</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-操作表的数据"><a href="#5-操作表的数据" class="headerlink" title="5. 操作表的数据"></a>5. 操作表的数据</h3><h4 id="5-1-添加外键（了解）"><a href="#5-1-添加外键（了解）" class="headerlink" title="5.1 添加外键（了解）"></a>5.1 添加外键（了解）</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`student`</span> </span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> <span class="string">`FK_gradeId`</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(<span class="string">`gradeId`</span>) <span class="keyword">references</span> <span class="string">`grade`</span>(<span class="string">`gradeId`</span>)</span><br></pre></td></tr></table></figure>

<h4 id="5-2-添加"><a href="#5-2-添加" class="headerlink" title="5.2 添加"></a>5.2 添加</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`grade`</span>(<span class="string">`gradeName`</span>) <span class="keyword">values</span>(<span class="string">&#x27;大四&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`grade`</span>(<span class="string">`gradeName`</span>) <span class="keyword">values</span>(<span class="string">&#x27;大一&#x27;</span>),(<span class="string">&#x27;大二&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`student`</span>(<span class="string">`name`</span>,<span class="string">`pwd`</span>,<span class="string">`sex`</span>) <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;aaaa&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`student`</span>(<span class="string">`name`</span>,<span class="string">`pwd`</span>,<span class="string">`sex`</span>) <span class="keyword">values</span>(<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;cccc&#x27;</span>,<span class="string">&#x27;女&#x27;</span>),(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;bbbb&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="5-3-修改"><a href="#5-3-修改" class="headerlink" title="5.3 修改"></a>5.3 修改</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="string">`student`</span> <span class="keyword">set</span> <span class="string">`name`</span>=<span class="string">&#x27;lhx&#x27;</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">update</span> <span class="string">`student`</span> <span class="keyword">set</span> <span class="string">`name`</span>=<span class="string">&#x27;lhx1&#x27;</span>,<span class="string">`email`</span>=<span class="string">&#x27;horsenliu@qq.com&#x27;</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="5-4-删除"><a href="#5-4-删除" class="headerlink" title="5.4 删除"></a>5.4 删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">`student`</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空一个数据库表</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="string">`student`</span></span><br></pre></td></tr></table></figure>

<h3 id="6-查询数据（重点）"><a href="#6-查询数据（重点）" class="headerlink" title="6. 查询数据（重点）"></a>6. 查询数据（重点）</h3><h4 id="6-1-简单查询"><a href="#6-1-简单查询" class="headerlink" title="6.1 简单查询"></a>6.1 简单查询</h4><ol>
<li><p>别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span> <span class="keyword">as</span> 学号,<span class="string">`studentName`</span> <span class="keyword">as</span> 学生姓名 <span class="keyword">from</span> <span class="string">`student`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拼接字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;姓名:&#x27;</span>,<span class="string">`studentName`</span>) <span class="keyword">as</span> 新名字 <span class="keyword">from</span> <span class="string">`student`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>去重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="string">`studentNo`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>排除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span>,<span class="string">`studentResult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="string">`studentNo`</span>=<span class="number">1000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模糊查询</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>is null</td>
<td>xxx is null</td>
</tr>
<tr>
<td>is not null</td>
<td>xxx is not null</td>
</tr>
<tr>
<td>between</td>
<td>xxx between 90 and 100</td>
</tr>
<tr>
<td>like</td>
<td>a like b</td>
</tr>
<tr>
<td>in</td>
<td>xxx in (a, b, c)</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span>,<span class="string">`studentResult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentName`</span> <span class="keyword">like</span> <span class="string">&#x27;刘%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的名字后面只有一个字的同学</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span>,<span class="string">`studentResult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentName`</span> <span class="keyword">like</span> <span class="string">&#x27;刘_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的名字后面只有两个字的同学</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span>,<span class="string">`studentResult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentName`</span> <span class="keyword">like</span> <span class="string">&#x27;刘__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中有嘉字的同学</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span>,<span class="string">`studentResult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentName`</span> <span class="keyword">like</span> <span class="string">&#x27;%嘉%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询1001,1002,1003学员</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span>,<span class="string">`studentResult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`studentNo`</span> <span class="keyword">in</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址为空的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">`studentNo`</span>,<span class="string">`studentResult`</span> <span class="keyword">from</span> <span class="string">`result`</span></span><br><span class="line"><span class="keyword">where</span> <span class="string">`address`</span>=<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="string">`address`</span> <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="6-2-联表查询"><a href="#6-2-联表查询" class="headerlink" title="6.2 联表查询"></a>6.2 联表查询</h4><img src="/posts/5dfb91cd/sql_joins.jpg" class>

<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>inner join</td>
<td>交集</td>
</tr>
<tr>
<td>left join</td>
<td>返回左表中所有的值，即使右表中没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>返回右表中所有的值，即使左表中没有匹配</td>
</tr>
</tbody></table>
<p>   <strong>SQL 语句编写思路：</strong></p>
<ol>
<li><p><strong>分析需求，分析查询的字段来自哪些表</strong></p>
</li>
<li><p><strong>确定使用哪种连接查询</strong></p>
</li>
<li><p><strong>确定交叉点（两张表中的相同数据）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询参加了考试的同学</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,studentName,subjectNo,subjectResult</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">result</span> <span class="keyword">as</span> r</span><br><span class="line"><span class="keyword">on</span> s.studentNo = r.studentNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有考试的同学</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,studentName,subjectNo,subjectResult</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">result</span> <span class="keyword">as</span> r</span><br><span class="line"><span class="keyword">on</span> s.studentNo = r.studentNo</span><br><span class="line"><span class="keyword">where</span> subjectResult <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学信息（学号、学生姓名、科目名、分数）</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,studentName,subjectName,studentResult</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> r.studentNo = s.studentNo</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subject sub</span><br><span class="line"><span class="keyword">on</span> sub.subjectNo = r.subjectNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学员所属的年级（学号、学生姓名、年级名称）</span></span><br><span class="line"><span class="keyword">select</span> studentNo,studentName,gradeName</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> grade g</span><br><span class="line"><span class="keyword">on</span> s.gradeId = g.gradeId</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询科目所属的年级（科目名称、年级名称）</span></span><br><span class="line"><span class="keyword">select</span> subjectName，gradeName</span><br><span class="line"><span class="keyword">from</span> subject sub</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> grade g</span><br><span class="line"><span class="keyword">on</span> sub.gradeId = g.gradeId</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询参加了 数据库结构-1 考试的同学信息（学号、学生姓名、科目名、分数）</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,studentName,subjectName,studentResult</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> s.studentNo = r.studentNo</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subject sub</span><br><span class="line"><span class="keyword">on</span> r.subjectNo = sub.subjectNo</span><br><span class="line"><span class="keyword">where</span> subjectName = <span class="string">&#x27;数据库结构-1&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="6-3-自连接"><a href="#6-3-自连接" class="headerlink" title="6.3 自连接"></a>6.3 自连接</h4><p>举一个例子：</p>
<p>category 表如下所示</p>
<img src="/posts/5dfb91cd/image-20200725152825843.png" class>

<p>想要将这一张表拆开，使父栏目和子栏目的对应关系清晰可见</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">&#x27;父栏目&#x27;</span>,b.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">&#x27;子栏目&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`category`</span> <span class="keyword">AS</span> a,<span class="string">`category`</span> <span class="keyword">AS</span> b </span><br><span class="line"><span class="keyword">WHERE</span> a.<span class="string">`categoryId`</span> = b.<span class="string">`pid`</span></span><br></pre></td></tr></table></figure>

<img src="/posts/5dfb91cd/image-20200725153113879.png" class>

<h4 id="6-4-分页和排序"><a href="#6-4-分页和排序" class="headerlink" title="6.4 分页和排序"></a>6.4 分页和排序</h4><ul>
<li>升序 –&gt; ASC</li>
<li>降序 –&gt; DESC</li>
<li>分页公式：<ul>
<li>当前页 n</li>
<li>页面大小 m</li>
<li>起始下标 (n-1)*m</li>
<li>总页数 = ⌈数据总数/页面大小⌉</li>
<li><strong>limit (起始下标, 页面大小)</strong></li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询参加了 数据库结构-1 考试的同学信息</span></span><br><span class="line"><span class="comment">-- 按成绩降序排序</span></span><br><span class="line"><span class="comment">-- 每页只显示5条数据</span></span><br><span class="line"><span class="comment">-- limit 0,5 0-起始下标 5-显示数目</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,studentName,subjectName,studentResult</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> s.studentNo = r.studentNo</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subject sub</span><br><span class="line"><span class="keyword">on</span> r.subjectNo = sub.subjectNo</span><br><span class="line"><span class="keyword">where</span> subjectName = <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> studentResult <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 JAVA第一学年 课程成绩排名前十并且分数大于80的学生信息（学号、姓名、课程名称、分数）</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,studentName,subjectName,studentResult</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> s.studentNo = r.studentNo</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subject sub</span><br><span class="line"><span class="keyword">on</span> sub.subjectNo = r.subjectNo</span><br><span class="line"><span class="keyword">where</span> studentName = <span class="string">&#x27;JAVA第一学年&#x27;</span> <span class="keyword">and</span> studentResult &gt;= <span class="number">80</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> studentResult <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="6-5-子查询和嵌套查询"><a href="#6-5-子查询和嵌套查询" class="headerlink" title="6.5 子查询和嵌套查询"></a>6.5 子查询和嵌套查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询 数据库结构-1 的所有考试结果（学号、科目编号、成绩）降序</span></span><br><span class="line"><span class="comment">-- 方式一：使用连接查询</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,r.subjectNo,studentResult</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subject sub</span><br><span class="line"><span class="keyword">on</span> r.subjectNo = sub.subjectNo</span><br><span class="line"><span class="keyword">where</span> subjectName = <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> studentResult <span class="keyword">desc</span></span><br><span class="line"><span class="comment">-- 方式二：使用子查询</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,r.subjectNo,studentResult</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">where</span> subjectNo = (</span><br><span class="line">    <span class="keyword">select</span> subjectNo <span class="keyword">from</span> subject</span><br><span class="line">    <span class="keyword">where</span> subjectName = <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> studentResult <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 高等数学-2 分数不小于80的学生的学号、姓名</span></span><br><span class="line"><span class="comment">-- 方式一：连接查询</span></span><br><span class="line"><span class="keyword">select</span> s.studentNo,studentName</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> s.studentNo = r.studentNo</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subject sub</span><br><span class="line"><span class="keyword">on</span> r.subjectNo = sub.subjectNo</span><br><span class="line"><span class="keyword">where</span> subjectName = <span class="string">&#x27;高等数学-2&#x27;</span> <span class="keyword">and</span> studentResult &gt;= <span class="number">80</span></span><br><span class="line"><span class="comment">-- 方式二：子查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> s.studentNo,studentName</span><br><span class="line"><span class="keyword">from</span> student s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> r.studentNo = s.studentNo</span><br><span class="line"><span class="keyword">where</span> studentResult &gt;= <span class="number">80</span> <span class="keyword">and</span> stubjectNo = (</span><br><span class="line">    <span class="keyword">select</span> subjectNo <span class="keyword">from</span> subject <span class="keyword">where</span> subjectName=<span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 方式三：嵌套查询</span></span><br><span class="line"><span class="keyword">select</span> studentNo,studentName <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> studentNo <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> studentNo <span class="keyword">from</span> <span class="keyword">result</span></span><br><span class="line">    <span class="keyword">where</span> studentResult &gt;= <span class="number">80</span> <span class="keyword">and</span> subjectNo = (</span><br><span class="line">        <span class="keyword">select</span> subjectNo <span class="keyword">from</span> subject</span><br><span class="line">        <span class="keyword">where</span> subjectName = <span class="string">&#x27;高等数学&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL 学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>CRUD</tag>
        <tag>select 查询语句</tag>
      </tags>
  </entry>
  <entry>
    <title>03_关于数据库表的引擎</title>
    <url>/posts/1ab39822.html</url>
    <content><![CDATA[<h3 id="1-对比"><a href="#1-对比" class="headerlink" title="1. 对比"></a>1. 对比</h3><table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>🙅‍♂️</td>
<td>👌</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>🙅‍♂️</td>
<td>👌</td>
</tr>
<tr>
<td>外键约束</td>
<td>🙅‍♂️</td>
<td>👌</td>
</tr>
<tr>
<td>全文索引</td>
<td>👌</td>
<td>🙅‍♂️</td>
</tr>
<tr>
<td>表空间的大小</td>
<td>👎较小</td>
<td>👍较大 ，约2倍</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>常规使用操作</p>
<ul>
<li>MYISAM    节约空间，速度较快</li>
<li>INNODB    安全性搞，事务的处理，多表多用户操作</li>
</ul>
<h3 id="2-MySQL-引擎在物理文件上的区别"><a href="#2-MySQL-引擎在物理文件上的区别" class="headerlink" title="2. MySQL 引擎在物理文件上的区别"></a>2. MySQL 引擎在物理文件上的区别</h3><ul>
<li><p>InnoDB 在数据库表中只有一个 *.frm，以及上级目录下的 ibdata1 文件</p>
</li>
<li><p>MyISAM 对应文件</p>
<ul>
<li>*.frm –&gt; 表结构对应文件</li>
<li>*.myd –&gt; 数据文件（data）</li>
<li>*.MYI –&gt; 索引文件（index）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL 学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>04_MySQL 函数</title>
    <url>/posts/eabdc6c0.html</url>
    <content><![CDATA[<blockquote>
<p>官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/function-reference.html">https://dev.mysql.com/doc/refman/5.7/en/function-reference.html</a></p>
</blockquote>
<h3 id="1-常用函数"><a href="#1-常用函数" class="headerlink" title="1. 常用函数"></a>1. 常用函数</h3><h4 id="1-1-数学运算"><a href="#1-1-数学运算" class="headerlink" title="1.1 数学运算"></a>1.1 数学运算</h4><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>ABS()</td>
<td>返回绝对值</td>
<td>select ABS(-8)</td>
</tr>
<tr>
<td>CEILING()</td>
<td>向上取整</td>
<td>select CEILING(9.4)</td>
</tr>
<tr>
<td>FLOOR()</td>
<td>向下取整</td>
<td>select FLOOR(9.4)</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回一个0~1之间的随机数</td>
<td>select RAND()</td>
</tr>
<tr>
<td>SIGN()</td>
<td>返回参数的符号（负数返回-1，正数返回1，0返回0）</td>
<td>select SIGN(-10)</td>
</tr>
</tbody></table>
<a id="more"></a>

<h4 id="1-2-字符串函数"><a href="#1-2-字符串函数" class="headerlink" title="1.2 字符串函数"></a>1.2 字符串函数</h4><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR_LENGTH()</td>
<td>返回字符串长度</td>
<td>select CHAR_LENGTH(‘lhx’)</td>
</tr>
<tr>
<td>CONCAT()</td>
<td>合并字符串</td>
<td>select CONCAT(‘l’, ‘h’, ‘x’)</td>
</tr>
<tr>
<td>INSERT()</td>
<td>从某个位置开始替换某个长度</td>
<td>select INSERT(‘我爱编程’, 1, 2, ‘超级热爱’)</td>
</tr>
<tr>
<td>LOWER()</td>
<td>转换为小写</td>
<td>select LOWER(‘HELLO’)</td>
</tr>
<tr>
<td>UPPER()</td>
<td>转换为大写</td>
<td>select LOWER(‘hello’)</td>
</tr>
<tr>
<td>INSTR()</td>
<td>返回第一次出现的子串的索引</td>
<td>select INSTR(‘lhxhello’, ‘h’)</td>
</tr>
<tr>
<td>REPLACE()</td>
<td>替换出现的指定字符串</td>
<td>select REPLACE(‘坚持就能成功’, ‘坚持’, ‘努力’)</td>
</tr>
<tr>
<td>SUBSTR()</td>
<td>截取字符串</td>
<td>select SUBSTR(‘坚持就能成功’, 1, 2)</td>
</tr>
<tr>
<td>REVERSE()</td>
<td>反转字符串</td>
<td>select REVERSE(‘坚持就能成功’)</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询姓周的同学，改为邹</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span>(studentName, <span class="string">&#x27;周&#x27;</span>, <span class="string">&#x27;邹&#x27;</span>) <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> studentName <span class="keyword">like</span> <span class="string">&#x27;周%&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-时间和日期函数（记住）"><a href="#1-3-时间和日期函数（记住）" class="headerlink" title="1.3 时间和日期函数（记住）"></a>1.3 时间和日期函数（记住）</h4><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>CURRENT_DATE()</td>
<td>获取当前日期</td>
</tr>
<tr>
<td>CURDATE()</td>
<td>获取当前日期</td>
</tr>
<tr>
<td>NOW()</td>
<td>获取当前时间</td>
</tr>
<tr>
<td>LOCALTIME()</td>
<td>获取本地时间</td>
</tr>
<tr>
<td>SYSDATE()</td>
<td>获取系统时间</td>
</tr>
<tr>
<td>YEAR(NOW())</td>
<td>获取当前年</td>
</tr>
<tr>
<td>MONTH(NOW())</td>
<td>获取当前月</td>
</tr>
<tr>
<td>DAY(NOW())</td>
<td>获取当前日</td>
</tr>
<tr>
<td>HOUR(NOW())</td>
<td>获取当前时</td>
</tr>
<tr>
<td>MINUTE(NOW())</td>
<td>获取当前分</td>
</tr>
<tr>
<td>SECOND(NOW())</td>
<td>获取当前秒</td>
</tr>
</tbody></table>
<h4 id="1-4-系统函数"><a href="#1-4-系统函数" class="headerlink" title="1.4 系统函数"></a>1.4 系统函数</h4><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SYSTEM_USER()</td>
<td>获取当前用户</td>
</tr>
<tr>
<td>USER()</td>
<td>获取当前用户</td>
</tr>
<tr>
<td>VERSION()</td>
<td>获取版本</td>
</tr>
</tbody></table>
<h3 id="2-聚合函数"><a href="#2-聚合函数" class="headerlink" title="2. 聚合函数"></a>2. 聚合函数</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>计数</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小值</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询学生人数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(studentName) <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>

<ul>
<li>count(字段) 会忽略所有的 null 值</li>
<li>count(*) 不会忽略 null 值</li>
<li>count(1) 不会忽略 null 值</li>
</ul>
<h3 id="3-分组和过滤"><a href="#3-分组和过滤" class="headerlink" title="3. 分组和过滤"></a>3. 分组和过滤</h3><ul>
<li>having –&gt; 过滤<strong>分组</strong>的记录必须满足的<strong>次要条件</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分 最高分 最低分 平均分大于80</span></span><br><span class="line"><span class="keyword">select</span> subjectName,<span class="keyword">avg</span>(StudentResult) <span class="keyword">as</span> 平均分,<span class="keyword">max</span>(StudentResult) <span class="keyword">as</span> 最高分,<span class="keyword">min</span>(StudentResult) <span class="keyword">as</span> 最低分</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subject sub</span><br><span class="line"><span class="keyword">on</span> r.subjectNo = sub.subjectNo</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> r.subjectNo</span><br><span class="line"><span class="keyword">having</span> 平均分&gt;<span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="4-数据库级别的-MD5-加密"><a href="#4-数据库级别的-MD5-加密" class="headerlink" title="4. 数据库级别的 MD5 加密"></a>4. 数据库级别的 MD5 加密</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 加密全部的密码</span></span><br><span class="line"><span class="keyword">update</span> testmd5 <span class="keyword">set</span> pwd = <span class="keyword">md5</span>(pwd)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入的时候加密</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> testmd5 <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;lhx&#x27;</span>,<span class="keyword">md5</span>(<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 校验用户传递进来的密码</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> testmd5 <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;lhx&#x27;</span> <span class="keyword">and</span> pwd=<span class="keyword">md5</span>(<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL 学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>select 查询语句</tag>
        <tag>MD5 加密</tag>
      </tags>
  </entry>
  <entry>
    <title>05_事务</title>
    <url>/posts/f2e699d4.html</url>
    <content><![CDATA[<h3 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1. 什么是事务"></a>1. 什么是事务</h3><p><strong>事务原则：ACID 原则（原子性、一致性、隔离性、持久性）</strong></p>
<blockquote>
<p>参考博客：<a href="https://blog.csdn.net/dengjili/article/details/82468576">https://blog.csdn.net/dengjili/article/details/82468576</a></p>
</blockquote>
<ul>
<li><strong>原子性（Atomicity）</strong>：要么都成功，要么都失败</li>
<li><strong>一致性（Consistency）</strong>：事务前后的数据完整性要保持一致</li>
<li><strong>隔离性（Isolation）</strong>：多个用户同时操作数据库互不干扰</li>
<li><strong>持久性（Durability）</strong>：事务一旦提交则不可逆，被持久化到数据库中</li>
</ul>
<p>做不到隔离性所导致的问题：</p>
<ul>
<li><strong>脏读</strong>：一个事务读取了另外一个事务未提交的数据</li>
<li><strong>不可重复读</strong>：在一个事务内读取表中的某一行数据，多次读取结果不同</li>
<li><strong>虚读（幻读）</strong>：在一个事务内读取到了别的事务插入的数据，导致前后读取不一致</li>
</ul>
<a id="more"></a>

<h3 id="2-执行事务"><a href="#2-执行事务" class="headerlink" title="2. 执行事务"></a>2. 执行事务</h3><p><em>注意：MySQL 是默认开启事务自动提交的</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment">-- 提交</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="comment">-- 事务结束 开启自动提交</span></span><br><span class="line"><span class="keyword">set</span> autocommit = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>模拟场景：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 转账实现（一行一行执行）</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span>; <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;  <span class="comment">-- 开始一个事务,标记事务的起始点</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> cash=cash<span class="number">-500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span>=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> cash=cash+<span class="number">500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span>=<span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务</span></span><br><span class="line"><span class="comment">-- ROLLBACK;</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>; <span class="comment">-- 恢复自动提交</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL 学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>06_索引</title>
    <url>/posts/305fd78c.html</url>
    <content><![CDATA[<blockquote>
<p>博客：<a href="https://blog.codinglabs.org/articles/theory-of-mysql-index.html">https://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
</blockquote>
<h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h3><ul>
<li>主键索引（Primary Key）<ul>
<li>唯一的标识，主键不可重复</li>
</ul>
</li>
<li>唯一索引（Unique Key）<ul>
<li>避免重复的列出现，唯一索引可以重复，多个列都可以标识为唯一索引</li>
</ul>
</li>
<li>常规索引（Key/Index）<ul>
<li>默认的</li>
</ul>
</li>
<li>全文索引 （FullText）<ul>
<li>在特定的数据库引擎下才有</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><ul>
<li><p>显示所有索引信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个全文索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> school.student <span class="keyword">add</span> fulltext <span class="keyword">index</span> studentName(studentName)</span><br></pre></td></tr></table></figure>
</li>
<li><p>分析 SQL 执行的状况</p>
<blockquote>
<p>博客：<a href="https://blog.csdn.net/jiadajing267/article/details/81269067">https://blog.csdn.net/jiadajing267/article/details/81269067</a></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 非全文索引</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> student</span><br><span class="line"><span class="comment">-- 全文索引</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">match</span>(studentName) against(<span class="string">&#x27;刘&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-测试索引"><a href="#3-测试索引" class="headerlink" title="3. 测试索引"></a>3. 测试索引</h3><ol>
<li><p>整100万条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入100万数据.</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data ()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i&lt;num DO</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`app_user`</span>(<span class="string">`name`</span>,<span class="string">`email`</span>,<span class="string">`phone`</span>,<span class="string">`gender`</span>,<span class="string">`password`</span>,<span class="string">`age`</span>) <span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">&#x27;用户&#x27;</span>,i),<span class="string">&#x27;horsenliu@qq.com&#x27;</span>,<span class="keyword">CONCAT</span>(<span class="string">&#x27;18&#x27;</span>,<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*((<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>))),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">2</span>),<span class="keyword">UUID</span>(),<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">100</span>));</span><br><span class="line">        <span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">    RETURN i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> mock_data(); <span class="comment">-- 执行此函数 生成一百万条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> mock_data;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给表字段添加索引（索引名：id_表名_字段名）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> app_user(<span class="string">`name`</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-索引原则"><a href="#4-索引原则" class="headerlink" title="4. 索引原则"></a>4. 索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加载常用来查询的字段上</li>
</ul>
]]></content>
      <categories>
        <category>MySQL 学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>01_NoSQL 概述</title>
    <url>/posts/e84b091a.html</url>
    <content><![CDATA[<h3 id="1-什么是-NoSQL"><a href="#1-什么是-NoSQL" class="headerlink" title="1. 什么是 NoSQL"></a>1. 什么是 NoSQL</h3><p>NoSQL = Not Only SQL，泛指非关系型数据库。</p>
<p>随着互联网 Web 2.0 网站的兴起，传统的关系数据库在应付 Web 2.0 网站，特别是超大规模和高并发的社交网络服务类型的 Web 2.0 纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展.</p>
<p>NoSQL 数据库的产生就是为了解决大规模数据集合多种数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储，例如谷歌或Facebook 每天为他们的用户收集万亿比特的数据。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>
<a id="more"></a>

<h3 id="2-NoSQL-特点"><a href="#2-NoSQL-特点" class="headerlink" title="2. NoSQL 特点"></a>2. NoSQL 特点</h3><ol>
<li><p><strong>易扩展</strong></p>
<p>NoSQL 数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。</p>
<p>数据之间无关系，这样就非常容易扩展，也无形之间，在架构的层面上带来了可扩展的能力。</p>
</li>
<li><p><strong>大数据量高性能</strong></p>
<p>NoSQL 数据库都具有非常高的读写性能，尤其是在大数据量下，同样表现优秀。这得益于它的非关系性，数据库的结构简单。</p>
<p>一般 MySQL 使用 Query Cache，每次表的更新 Cache 就失效，是一种大力度的 Cache，在针对 Web 2.0 的交互频繁应用，Cache 性能不高，而 NoSQL 的 Cache 是记录级的，是一种细粒度的 Cache，所以 NoSQL 在这个层面上来说就要性能高很多了。</p>
</li>
<li><p><strong>多样灵活的数据模型</strong></p>
<p>NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式，而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是噩梦。</p>
</li>
<li><p><strong>RDBMS VS NoSQL</strong></p>
<ul>
<li>传统的关系型数据库 RDBMS<ul>
<li>高度组织化结构化数据</li>
<li>结构化查询语言（SQL）</li>
<li>数据和关系都存储在单独的表中</li>
<li>数据操纵语言，数据定义语言</li>
<li>严格的一致性</li>
<li>基础事务</li>
</ul>
</li>
<li>NoSQL<ul>
<li>代表着不仅仅是 SQL</li>
<li>没有声明性查询语言</li>
<li>没有预定义的模式</li>
<li>键值对存储，列存储，文档存储，图形数据库</li>
<li>最终一致性，而非 ACID 属性</li>
<li>非结构化和不可预知的数据</li>
<li>CAP 定理</li>
<li>高性能、高可用性和可伸缩性</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="3-NoSQL-四大分类"><a href="#3-NoSQL-四大分类" class="headerlink" title="3. NoSQL 四大分类"></a>3. NoSQL 四大分类</h3><ol>
<li><strong>KV 键值对</strong><ul>
<li>新浪：BerkeleyDB + Redis</li>
<li>美团：Redis + tair</li>
<li>阿里、百度：Memcache + Redis</li>
</ul>
</li>
<li><strong>文档型数据库</strong>（bson 格式比较多）<ul>
<li>CouchDB</li>
<li>MongoDB<ul>
<li>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</li>
<li>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</li>
</ul>
</li>
</ul>
</li>
<li><strong>列存储数据库</strong><ul>
<li>Cassandra，HBase</li>
<li>分布式文件系统</li>
</ul>
</li>
<li><strong>图关系数据库</strong><ul>
<li>它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统</li>
<li>社交网络，推荐系统等。专注于构建关系图谱</li>
<li>Neo4J，InfoGrid</li>
</ul>
</li>
</ol>
<h3 id="4-CAP-BASE"><a href="#4-CAP-BASE" class="headerlink" title="4. CAP + BASE"></a>4. CAP + BASE</h3><h4 id="4-1-CAP-理论"><a href="#4-1-CAP-理论" class="headerlink" title="4.1 CAP 理论"></a>4.1 CAP 理论</h4><ul>
<li>C : Consistency（强一致性）</li>
<li>A : Availability（可用性）</li>
<li>P : Partition tolerance（分区容错性）</li>
</ul>
<p><strong>CAP 理论就是说在分布式存储系统中，最多只能实现上面的两点。</strong></p>
<p>而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容错性是我们必须需要实现的。所以只能在一致性和可用性之间进行权衡，没有 NoSQL 系统能同时保证这三点。大多数 web 应用，其实并不需要强一致性。因此<strong>牺牲 C 换取 P</strong>，这是目前分布式数据库产品的方向。</p>
<p><strong>CAP 理论的核心是</strong>：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类：</p>
<ul>
<li>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li>
<li>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。</li>
<li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li>
</ul>
<img src="/posts/e84b091a/1.jpg" class>

<h4 id="4-2-BASE-理论"><a href="#4-2-BASE-理论" class="headerlink" title="4.2 BASE 理论"></a>4.2 BASE 理论</h4><p> BASE 理论是由 eBay 架构师提出的。BASE 是对 CAP 中一致性和可用性权衡的结果，其来源于对大规模互联网分布式系统实践的总结，是基于CAP 定律逐步演化而来。其核心思想是即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p>
<ul>
<li><strong>基本可用</strong>（Basically Available）： 基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。</li>
<li><strong>软状态</strong>（Soft State）： 软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的<br>体现。MySQL Replication 的异步复制也是一种体现。</li>
<li><strong>最终一致性</strong>（Eventual Consistency）： 最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</li>
</ul>
<p><strong>BASE 就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。</strong></p>
<p>它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。原因就在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里 BASE 就是解决这个问题的办法。</p>
]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>02_Redis 入门</title>
    <url>/posts/4e5f8254.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Redis：<strong>RE</strong>mote <strong>DI</strong>ctionary <strong>S</strong>erver（远程字典服务器）</p>
<p>是完全开源免费的，用 C 语言编写的，遵守 BSD 协议，是一个高性能的（Key/Value）分布式内存数据库，基于内存运行，并支持持久化的NoSQL 数据库，是当前最热门的 NoSQL 数据库之一，也被人们称为<br>数据结构服务器 </p>
<p>Redis 与其他 key-value 缓存产品有以下三个特点</p>
<ul>
<li>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list、set、zset、hash 等数据结构的存储。</li>
<li>Redis 支持数据的备份，即 master-slave 模式的数据备份。</li>
</ul>
<h3 id="2-功能和特性"><a href="#2-功能和特性" class="headerlink" title="2. 功能和特性"></a>2. 功能和特性</h3><ul>
<li>内存存储和持久化：Redis 支持异步将内存中的数据写到硬盘上，同时不影响继续服务</li>
<li>取最新 N 个数据的操作，例如可以将最新的 10 条评论的 ID 放在 Redis 的 List 集合里面</li>
<li>发布、订阅消息系统</li>
<li>地图信息分析</li>
<li>定时器、计数器</li>
<li>数据类型、基本操作和配置</li>
<li>持久化和复制，RDB、AOF</li>
<li>事务的控制</li>
<li>……</li>
</ul>
<a id="more"></a>

<h3 id="3-安装-Redis"><a href="#3-安装-Redis" class="headerlink" title="3. 安装 Redis"></a>3. 安装 Redis</h3><h4 id="3-1-Windows"><a href="#3-1-Windows" class="headerlink" title="3.1 Windows"></a>3.1 Windows</h4><ol>
<li><p>下载安装包</p>
<blockquote>
<p><a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></p>
</blockquote>
</li>
<li><p>解压到环境目录</p>
</li>
<li><p><code>redis-cli.exe</code>是客户端，<code>redis-server.exe</code>是服务器</p>
<img src="/posts/4e5f8254/image-20201125082919058.png" class>
</li>
<li><p>打开服务器，可以看到默认的端口号是 6379</p>
</li>
<li><p>打开客户端，输入命令<code>ping</code>，如果出现<code>PONG</code>，说明连接成功了，可以建立一个键值对测试一下</p>
<img src="/posts/4e5f8254/image-20201125083032915.png" class>

</li>
</ol>
<h4 id="3-2-Linux"><a href="#3-2-Linux" class="headerlink" title="3.2 Linux"></a>3.2 Linux</h4><ol>
<li><p>下载压缩包</p>
<blockquote>
<p><a href="https://redis.io/download">https://redis.io/download</a></p>
</blockquote>
</li>
<li><p>传到 Linux 的 /opt 目录下</p>
</li>
<li><p>解压</p>
</li>
<li><p>注意，如果安装的是 6.0 版本及以上的话，需要升级 gcc 到 5.3 及以上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-7*</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-7 bash</span><br></pre></td></tr></table></figure>

<p>scl 命令启用只是临时的，退出 shell 或重启就会恢复原系统 gcc 版本，如果要长期使用 gcc 7 的话需要执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-7/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 redis 文件夹中，执行命令<code>make</code>，第一次 make 需要等待较长时间，好了之后再执行<code>make install</code></p>
</li>
<li><p>进入 /usr/local/bin，redis 就装在这里了，可以看到这两个熟悉的东西</p>
<img src="/posts/4e5f8254/image-20201125093215235.png" class>
</li>
<li><p>在这里建立一个文件夹，例如 hlconfig/，回到 redis 文件夹中，将里面的 redis.conf 复制到这个文件夹中，以后就修改文件夹中的这个配置文件，原配置文件就不去动了</p>
</li>
<li><p>修改配置文件，将<code>daemonize no</code>改为<code>daemonize yes</code></p>
<ul>
<li><strong>daemonize yes</strong><br>redis 采用的是单进程多线程的模式，当 redis.conf 中选项 daemonize 设置成 yes 时，代表<strong>开启守护进程模式</strong>。在该模式下，redis 会在<strong>后台运行</strong>，并将进程 pid 号写入至 redis.conf 选项 pidfile 设置的文件中，此时 redis 将一直运行，除非手动 kill 该进程。</li>
<li><strong>daemonize no</strong><br>当 daemonize 选项设置成 no 时，当前界面将进入 redis 的命令行界面，exit 强制退出或者关闭连接工具（putty、xshell等）都会导致 redis 进程退出。</li>
</ul>
</li>
<li><p>启动，测试，退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos01 hlconfig]<span class="comment"># cd /usr/local/bin/</span></span><br><span class="line">[root@centos01 bin]<span class="comment"># redis-server hlconfig/redis.conf </span></span><br><span class="line">[root@centos01 bin]<span class="comment"># redis-cli -p 6379</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name horsen</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;horsen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-基础知识"><a href="#4-基础知识" class="headerlink" title="4. 基础知识"></a>4. 基础知识</h3><h4 id="4-1-Redis-压力测试工具：Redis-benchmark"><a href="#4-1-Redis-压力测试工具：Redis-benchmark" class="headerlink" title="4.1 Redis 压力测试工具：Redis-benchmark"></a>4.1 Redis 压力测试工具：Redis-benchmark</h4><img src="/posts/4e5f8254/image-20201125101740541.png" class>

<p>可选参数如下表所示：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>选项</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>-h</td>
<td>指定服务器主机名</td>
<td>127.0.0.1</td>
</tr>
<tr>
<td>2</td>
<td>-p</td>
<td>指定服务器端口</td>
<td>6379</td>
</tr>
<tr>
<td>3</td>
<td>-s</td>
<td>指定服务器 socket</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>-c</td>
<td>指定并发连接数</td>
<td>50</td>
</tr>
<tr>
<td>5</td>
<td>-n</td>
<td>指定请求数</td>
<td>10000</td>
</tr>
<tr>
<td>6</td>
<td>-d</td>
<td>以字节的形式指定 SET/GET 值的数据大小</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>-k</td>
<td>1=keep alive | 0=reconnect</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td>-r</td>
<td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>-P</td>
<td>通过管道传输 请求</td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td>-q</td>
<td>强制退出 redis。仅显示 query/sec 值</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>–csv</td>
<td>以 CSV 格式输出</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>-l</td>
<td>生成循环，永久执行测试</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>-t</td>
<td>仅运行以逗号分隔的测试命令列表。</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>-I</td>
<td>Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td></td>
</tr>
</tbody></table>
<p>测试一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 100个并发连接，100000个请求，检测host为localhost，端口为6379的redis服务器性能</span></span><br><span class="line">[root@centos01 ~]<span class="comment"># redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span></span><br><span class="line">......</span><br><span class="line">====== SET ====== <span class="comment"># 对集合写入测试</span></span><br><span class="line">  100000 requests completed <span class="keyword">in</span> 2.56 seconds</span><br><span class="line">  100 parallel clients <span class="comment"># 每次请求有100个并发客户端</span></span><br><span class="line">  3 bytes payload <span class="comment"># 每次写入3个字节的数据，有效载荷</span></span><br><span class="line">  keep alive: 1 <span class="comment"># 保持一个连接，一台服务器来处理这些请求</span></span><br><span class="line">  host configuration <span class="string">&quot;save&quot;</span>: 900 1 300 10 60 10000</span><br><span class="line">  host configuration <span class="string">&quot;appendonly&quot;</span>: no</span><br><span class="line">  multi-thread: no</span><br><span class="line"></span><br><span class="line">18.98% &lt;= 1 milliseconds</span><br><span class="line">95.01% &lt;= 2 milliseconds</span><br><span class="line">99.58% &lt;= 3 milliseconds</span><br><span class="line">99.90% &lt;= 4 milliseconds</span><br><span class="line">99.95% &lt;= 5 milliseconds</span><br><span class="line">99.98% &lt;= 6 milliseconds</span><br><span class="line">100.00% &lt;= 6 milliseconds <span class="comment"># 所有请求在 6 毫秒内完成</span></span><br><span class="line">39093.04 requests per second <span class="comment"># 每秒处理 39093.04 次请求</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h4 id="4-2-常用命令"><a href="#4-2-常用命令" class="headerlink" title="4.2 常用命令"></a>4.2 常用命令</h4><p>默认 16 个数据库，类似数组，下标从零开始，初始默认使用零号库</p>
<p>Select 命令切换数据库，不同的库可以存不同的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 7</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[7]&gt;</span><br></pre></td></tr></table></figure>

<p>DBSIZE 查看当前数据库的 key 的数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[7]&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[7]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 查看具体的key</span></span><br><span class="line">1) <span class="string">&quot;counter:__rand_int__&quot;</span></span><br><span class="line">2) <span class="string">&quot;mylist&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;myset:__rand_int__&quot;</span></span><br><span class="line">5) <span class="string">&quot;key:__rand_int__&quot;</span></span><br></pre></td></tr></table></figure>

<p>FLUSHDB：清空当前库</p>
<p>FLUSHALL：清空所有库</p>
<h4 id="4-3-Redis-是单线程的"><a href="#4-3-Redis-是单线程的" class="headerlink" title="4.3 Redis 是单线程的"></a>4.3 Redis 是单线程的</h4><p>官方表示，因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是<strong>机器内存的大小或者网络带宽</strong>。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>
<p>Redis 采用的是基于内存的采用的是单进程单线程模型的 KV 数据库，由 C 语言编写，官方提供的数据是可以达到 100000+ 的 QPS（每秒内查询次数）。这个数据不比采用单进程多线程的同样基于内存的 KV 数据库 Memcached 差。</p>
]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>04_三种特殊数据类型</title>
    <url>/posts/154eaad9.html</url>
    <content><![CDATA[<h3 id="1-GEO-地理位置"><a href="#1-GEO-地理位置" class="headerlink" title="1. GEO 地理位置"></a>1. GEO 地理位置</h3><p>Redis 的 GEO 特性在 Redis 3.2 版本中推出， 这个功能可以将用户给定的地理位置信息储存起来， 并对<br>这些信息进行操作。来实现诸如附近位置、摇一摇这类依赖于地理位置信息的功能。GEO 的数据类型为 Zset。</p>
<p>GEO 的数据结构总共有六个常用命令：GEOADD、GEOPOS、GEODIST、GEORADIUS、GEORADIUSBYMEMBER、GETHASH。GEO 没有提供删除成员的命令，但是因为 GEO 的底层实现是 zset，所以可以<strong>借用 zrem 命令实现对地理位置信息的删除</strong>。</p>
<p>官方文档：<a href="https://www.redis.net.cn/order/3685.html">https://www.redis.net.cn/order/3685.html</a></p>
<a id="more"></a>

<h4 id="1-1-GEOADD"><a href="#1-1-GEOADD" class="headerlink" title="1.1 GEOADD"></a>1.1 GEOADD</h4><p><code>GEOADD key longitude latitude member ...</code></p>
<p>将给定的空间元素（纬度、经度、名字）添加到指定的键里面。这些数据会以有序集合的形式被储存在键里面，从而使得 GEORADIUS 和GEORADIUSBYMEMBER 这样的命令可以在之后通过位置查询取得这些元素。</p>
<p>GEOADD 命令以标准的 x,y 格式接受参数，所以用户必须先输入经度，然后再输入纬度。</p>
<p>GEOADD 能够记录的坐标是有限的，非常接近两极的区域无法被索引。有效的经度介于-180-180 度之间，有效的纬度介于 -85.05112878 -85.05112878 度之间。当用户尝试输入一个超出范围的经度或者纬度时，GEOADD 命令将返回一个错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD china:city 116.23 40.22 北京</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; GEOADD china:city 121.48 31.40 上海 113.88 22.55 深圳 120.21 30.20 杭州</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; GEOADD china:city 106.54 29.40 重庆 108.93 34.23 西安 114.02 30.58 武汉</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>

<h4 id="1-2-GEOPOS"><a href="#1-2-GEOPOS" class="headerlink" title="1.2 GEOPOS"></a>1.2 GEOPOS</h4><p><code>GEOPOS key member [member...]</code></p>
<p>从 key 里返回所有给定位置元素的位置（经度和纬度）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOPOS china:city 杭州 上海</span><br><span class="line">1) 1) <span class="string">&quot;120.21000176668167114&quot;</span></span><br><span class="line">   2) <span class="string">&quot;30.19999988833350102&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;121.48000091314315796&quot;</span></span><br><span class="line">   2) <span class="string">&quot;31.40000025319353938&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEOPOS china:city 新疆</span><br><span class="line">1) (nil)</span><br></pre></td></tr></table></figure>

<h4 id="1-3-GEODIST"><a href="#1-3-GEODIST" class="headerlink" title="1.3 GEODIST"></a>1.3 GEODIST</h4><p><code>GEODIST key member1 member2 [unit]</code></p>
<p>返回两个给定位置之间的距离，如果两个位置之间的其中一个不存在，那么命令返回空值。</p>
<p>指定单位的参数 unit 必须是以下单位的其中一个：</p>
<ul>
<li>m 表示单位为米</li>
<li>km 表示单位为千米</li>
<li>mi 表示单位为英里</li>
<li>ft 表示单位为英尺</li>
<li>如果用户没有显式地指定单位参数，默认使用米作为单位</li>
</ul>
<p>GEODIST 命令在计算距离时会假设地球为完美的球形，在极限情况下，这一假设最大会造成 0.5% 的误差。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEODIST china:city 北京 上海</span><br><span class="line"><span class="string">&quot;1088785.4302&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city 北京 上海 km</span><br><span class="line"><span class="string">&quot;1088.7854&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-GEORADIUS"><a href="#1-4-GEORADIUS" class="headerlink" title="1.4 GEORADIUS"></a>1.4 GEORADIUS</h4><p><code>GEORADIUS key longitude latitude radius m|km|ft|mi [withcoord][withdist][withhash][asc|desc][count count]</code></p>
<p>以给定的经纬度为中心， 找出某一半径内的元素。</p>
<p><em>重新连接 redis-cli，增加参数 –raw，可以强制输出中文，不然会出现乱码</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在china:city中寻找坐标(100,30)半径为1000km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 100 30 1000 km</span><br><span class="line">重庆</span><br><span class="line">西安</span><br><span class="line"><span class="comment"># withdist 返回位置名称和中心距离</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 100 30 1000 km withdist</span><br><span class="line">重庆</span><br><span class="line">635.2850</span><br><span class="line">西安</span><br><span class="line">963.3171</span><br><span class="line"><span class="comment"># withcoord 返回位置名称和经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 100 30 1000 km withcoord</span><br><span class="line">重庆</span><br><span class="line">106.54000014066696167</span><br><span class="line">29.39999880018641676</span><br><span class="line">西安</span><br><span class="line">108.92999857664108276</span><br><span class="line">34.23000121926852302</span><br><span class="line"><span class="comment"># count 限定寻找个数</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 100 30 1000 km withcoord count 1</span><br><span class="line">重庆</span><br><span class="line">106.54000014066696167</span><br><span class="line">29.39999880018641676</span><br></pre></td></tr></table></figure>

<h4 id="1-5-GEORADIUSBYMAMBER"><a href="#1-5-GEORADIUSBYMAMBER" class="headerlink" title="1.5 GEORADIUSBYMAMBER"></a>1.5 GEORADIUSBYMAMBER</h4><p><code>GEORADIUSBYMAMBER key member radius m|km|ft|mi [withcoord][withdist][withhash][asc|desc][count count]</code></p>
<p>找出位于指定范围内的元素，中心点由给定的位置元素决定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city 北京 1000 km</span><br><span class="line">北京</span><br><span class="line">西安</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city 上海 400 km</span><br><span class="line">杭州</span><br><span class="line">上海</span><br></pre></td></tr></table></figure>

<h4 id="1-6-GEOHASH"><a href="#1-6-GEOHASH" class="headerlink" title="1.6 GEOHASH"></a>1.6 GEOHASH</h4><p><code>GEOHASH key member [member...]</code></p>
<p>Redis 使用 GEOHASH 将二维经纬度转换为一维字符串，字符串越长表示位置更精确，两个字符串越相似表示距离越近。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOHASH china:city 北京 重庆</span><br><span class="line">wx4sucu47r0</span><br><span class="line">wm5z22h53v0</span><br><span class="line">127.0.0.1:6379&gt; GEOHASH china:city 上海 北京</span><br><span class="line">wtw6sk5n300</span><br><span class="line">wx4sucu47r0</span><br></pre></td></tr></table></figure>

<h3 id="2-HyperLogLog"><a href="#2-HyperLogLog" class="headerlink" title="2. HyperLogLog"></a>2. HyperLogLog</h3><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h4><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>
<p>在 Redis 里面，每个 HyperLogLog 键<strong>只需要花费 12 KB 内存</strong>，就可以计算接近 2^64 个不同元素的<strong>基数</strong>。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>
<p>HyperLogLog 则是一种算法，它提供了不精确的去重计数方案。</p>
<p>举个栗子：假如我要统计网页的 UV（浏览用户数量，一天内同一个用户多次访问只能算一次），传统的解决方案是使用 Set 来保存用户 id，然后统计 Set 中的元素数量来获取页面 UV。但这种方案只能承载少量用户，一旦用户数量大起来就需要消耗大量的空间来存储用户 id。我的目的是统计用户数量而不是保存用户，这简直是个吃力不讨好的方案，而使用 Redis 的 HyperLogLog 最多需要 12k 就可以统计大量的用户数，尽管它大概有 0.81% 的错误率，但对于统计 UV 这种不需要很精确的数据是可以忽略不计的。</p>
<h4 id="2-2-什么是基数"><a href="#2-2-什么是基数" class="headerlink" title="2.2 什么是基数"></a>2.2 什么是基数</h4><p>简单来说就是数据集中不重复的元素的个数。</p>
<p>例如数据集 A={1, 3, 5, 7, 5, 7, 8}，那么这个数据集的基数集为 {1, 3, 5 ,7 ,8}，基数为 5。</p>
<h4 id="2-3-基本命令"><a href="#2-3-基本命令" class="headerlink" title="2.3 基本命令"></a>2.3 基本命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>PFADD key element [element ...]</code></td>
<td>添加指定元素到 HyperLogLog 中</td>
</tr>
<tr>
<td><code>PFCOUNT key [key ...]</code></td>
<td>返回给定 HyperLogLog 的基数估算值</td>
</tr>
<tr>
<td><code>PFMERGE destkey sourcekey [sourcekey ...]</code></td>
<td>将多个 HyperLogLog 合并为一个 HyperLogLog 并计算</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD key a b c d e f</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT key</span><br><span class="line">6</span><br><span class="line">127.0.0.1:6379&gt; PFADD key2 g h i j a b c</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE key3 key key2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT key3</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="3-BitMaps"><a href="#3-BitMaps" class="headerlink" title="3. BitMaps"></a>3. BitMaps</h3><p>在开发中，可能会遇到这种情况，需要统计用户的某些信息，如活跃或不活跃，登录或者不登录；需要记录用户一年的打卡情况，打卡了是 1， 没有打卡是 0，如果使用普通的 key/value 存储，则要记录 365 条记录，如果用户量很大，需要的空间也会很大，所以 Redis 提供了 BitMaps 位图这中数据结构。</p>
<p>BitMaps 就是通过操作二进制位来进行记录，即 0 和 1；如果要记录 365 天的打卡情况，使用 BitMaps 表示的形式大概如下：0101000111000111…，好处是可以节约内存，365 天相当于 365 bit，1 字节 = 8 bit，所以使用 46 个字节即可。</p>
<p>BitMaps  就是通过一个 bit 位来表示某个元素对应的值或者状态，其中的 key 就是对应元素本身，实际上底层也是通过对字符串的操作来实现。</p>
<hr>
<h4 id="3-1-SETBIT"><a href="#3-1-SETBIT" class="headerlink" title="3.1 SETBIT"></a>3.1 SETBIT</h4><p><code>SETBIT key offset value</code> 设置 key 的第 offset 位为 value (1或0)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 周一：1，周二：0，周三：0，周四：1，周五：1，周六：0，周天：0 （1 为打卡，0 为不打卡）</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 0 1</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 1 0</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 2 0</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 3 1</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 4 1</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 5 0</span><br><span class="line">0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign 6 0</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="3-2-GETBIT"><a href="#3-2-GETBIT" class="headerlink" title="3.2 GETBIT"></a>3.2 GETBIT</h4><p><code>GETBIT key offset</code> 获取 offset 设置的值，未设置过默认返回 0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETBIT sign 3</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT sign 4</span><br><span class="line">1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT sign 6</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="3-3-BITCOUNT"><a href="#3-3-BITCOUNT" class="headerlink" title="3.3 BITCOUNT"></a>3.3 BITCOUNT</h4><p><code>BITCOUNT key [start, end] </code>统计 key 中 offset 为1 的个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BITCOUNT sign</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>05_Redis 事务</title>
    <url>/posts/cf821b7.html</url>
    <content><![CDATA[<h3 id="1-理论"><a href="#1-理论" class="headerlink" title="1. 理论"></a>1. 理论</h3><p><strong>Redis事务的概念</strong></p>
<p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>
<p>一句话：<strong>Redis 事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</strong></p>
<hr>
<p><strong>Redis 事务没有隔离级别的概念</strong></p>
<p>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行。</p>
<hr>
<p><strong>Redis 不保证原子性</strong></p>
<p>Redis 中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p>
<hr>
<p><strong>Redis 事务的三个阶段</strong></p>
<ul>
<li>开始事务</li>
<li>命令入队</li>
<li>执行事务</li>
</ul>
<a id="more"></a>

<hr>
<p><strong>Redis 事务相关命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监视一或多个key, 如果在事务执行之前, 被监视的key被其他命令改动, 则事务被打断(类似乐观锁)</span></span><br><span class="line">WATCH key1 key2 ... </span><br><span class="line"></span><br><span class="line"><span class="comment"># 标记一个事务块的开始(queued)</span></span><br><span class="line">MULTI </span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行所有事务块的命令(一旦执行exec后, 之前加的监控锁都会被取消掉)</span></span><br><span class="line">EXEC </span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消事务, 放弃事务块中的所有命令</span></span><br><span class="line">DISCARD </span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消watch对所有key的监控</span></span><br><span class="line">UNWATCH </span><br></pre></td></tr></table></figure>



<h3 id="2-实践"><a href="#2-实践" class="headerlink" title="2. 实践"></a>2. 实践</h3><h4 id="2-1-正常执行"><a href="#2-1-正常执行" class="headerlink" title="2.1 正常执行"></a>2.1 正常执行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; SET k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; GET k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; SET k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">OK</span><br><span class="line">OK</span><br><span class="line">v2</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h4 id="2-2-放弃事务"><a href="#2-2-放弃事务" class="headerlink" title="2.2 放弃事务"></a>2.2 放弃事务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v22 <span class="comment"># 修改k2</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD <span class="comment"># 取消</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k2 <span class="comment"># k2未被修改</span></span><br><span class="line"><span class="string">&quot;v2&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-发生错误"><a href="#2-3-发生错误" class="headerlink" title="2.3 发生错误"></a>2.3 发生错误</h4><p>若在事务队列中存在命令性错误（类似于 java 编译性错误），则执行 EXEC 命令时，所有命令都不会执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v11</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">set</span> k3 <span class="comment"># 错误命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;get&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k4 <span class="comment"># k4未被设置</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>若在事务队列中存在语法性错误（类似于 java 的 1/0 的运行时异常），则执行 EXEC 命令时，其他正确命令会被执行，错误命令抛出异常。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR k1 <span class="comment"># 对&quot;v1&quot;增加1, 显然不对</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v22</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;v22&quot;</span></span><br><span class="line">5) <span class="string">&quot;v4&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-WATCH-监控"><a href="#2-4-WATCH-监控" class="headerlink" title="2.4 WATCH 监控"></a>2.4 WATCH 监控</h4><p><strong>悲观锁：</strong></p>
<p>每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿到这个数据就会被 block 直到它拿到锁。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在操作之前先上锁。</p>
<p><strong>乐观锁：</strong></p>
<p>每次去拿数据的时候都认为别人不会修改，所以不会上锁。但是在更新的时候会判断一下再此期间别人有没有去更新这个数据，可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量。乐观锁策略：提交版本必须大于记录当前版本才能执行更新。</p>
<hr>
<ol>
<li><p>初始化信用卡可用余额和欠款</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> balance 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> debt 0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 WATCH 监控 balance，事务期间 balance 数据未变动，事务执行成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; WATCH balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 WATCH 检测 balance，事务期间 balance 数据变动，事务执行失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 客户端1</span></span><br><span class="line">127.0.0.1:6379&gt; WATCH balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment"># 然后转去客户端2</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC <span class="comment"># 执行失败</span></span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端2</span></span><br><span class="line">127.0.0.1:6379&gt; get balance</span><br><span class="line"><span class="string">&quot;80&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> balance 200 <span class="comment"># 再回到客户端1</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端1 放弃监视重新来</span></span><br><span class="line">127.0.0.1:6379&gt; UNWATCH</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC <span class="comment"># 执行成功</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 180</span><br><span class="line">2) (<span class="built_in">integer</span>) 40</span><br></pre></td></tr></table></figure>

<p><strong>一旦执行 EXEC 开启事务的执行后，无论事务使用执行成功，WATCH 对变量的监控都将被取消。</strong>所以当事务执行失败后，需重新执行 WATCH 命令对变量进行监控，并开启新的事务进行操作。</p>
<p>WATCH 指令类似于乐观锁，在事务提交时，如果WATCH 监控的多个 key 中任何 key 的值已经被其他客户端更改，则使用 EXEC 执行事务时，事务队列将不会被执行，同时返回 Nullmulti-bulk 应答以通知调用者事务执行失败。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>06_Jedis</title>
    <url>/posts/fad27213.html</url>
    <content><![CDATA[<p>Jedis 是 Redis 官方推荐的 Java 连接开发工具。要在 Java 开发中使用好 Redis 中间件，必须对 Jedis 熟悉才能写成漂亮的代码。</p>
<h3 id="1-测试"><a href="#1-测试" class="headerlink" title="1. 测试"></a>1. 测试</h3><ol>
<li><p>新建一个普通 Maven 项目</p>
</li>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 查看服务是否运行</span></span><br><span class="line">        String ping = jedis.ping();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务正在运行: &quot;</span> + ping);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;PONG&quot;</span>.equals(ping)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 redis 服务（windows 端）</p>
</li>
<li><p>结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">服务正在运行: PONG</span><br><span class="line">连接成功</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-常用-API"><a href="#2-常用-API" class="headerlink" title="2. 常用 API"></a>2. 常用 API</h3><h4 id="2-1-基本操作"><a href="#2-1-基本操作" class="headerlink" title="2.1 基本操作"></a>2.1 基本操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPwd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 验证密码，如果没有设置密码这段代码省略</span></span><br><span class="line">        <span class="comment">// jedis.auth(&quot;password&quot;);</span></span><br><span class="line">        jedis.connect(); <span class="comment">//连接</span></span><br><span class="line">        jedis.disconnect(); <span class="comment">//断开连接</span></span><br><span class="line">        jedis.flushAll(); <span class="comment">//清空所有的key</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-对-key-的操作"><a href="#2-2-对-key-的操作" class="headerlink" title="2.2 对 key 的操作"></a>2.2 对 key 的操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;清空数据：&quot;</span> + jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">&quot;判断键username是否存在：&quot;</span> + jedis.exists(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增&lt;&#x27;username&#x27;,&#x27;horsenliu&#x27;&gt;的键值对：&quot;</span> + jedis.set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;horsenliu&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;新增&lt;&#x27;password&#x27;,&#x27;123456&#x27;&gt;的键值对：&quot;</span> + jedis.set(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        System.out.print(<span class="string">&quot;系统中所有的键如下：&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(keys);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除键password:&quot;</span> + jedis.del(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断键password是否存在：&quot;</span> + jedis.exists(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;查看键username所存储的值的类型：&quot;</span> + jedis.type(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机返回key空间的一个：&quot;</span> + jedis.randomKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;重命名key：&quot;</span> + jedis.rename(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;取出改后的name：&quot;</span> + jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;按索引查询：&quot;</span> + jedis.select(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除当前选择数据库中的所有key：&quot;</span> + jedis.flushDB());</span><br><span class="line">        System.out.println(<span class="string">&quot;返回当前数据库中key的数目：&quot;</span> + jedis.dbSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;删除所有数据库中的所有key：&quot;</span> + jedis.flushAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-对-String-的操作"><a href="#2-3-对-String-的操作" class="headerlink" title="2.3 对 String 的操作"></a>2.3 对 String 的操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========增加数据===========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>));</span><br><span class="line">        System.out.println(jedis.set(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除键key2:&quot;</span> + jedis.del(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取键key2:&quot;</span> + jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改key1:&quot;</span> + jedis.set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1Changed&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取key1的值：&quot;</span> + jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;在key3后面加入值：&quot;</span> + jedis.append(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;End&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;key3的值：&quot;</span> + jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;增加多个键值对：&quot;</span> + jedis.mset(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;value01&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;value02&quot;</span>, <span class="string">&quot;key03&quot;</span>, <span class="string">&quot;value03&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span> + jedis.mget(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;key03&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span> + jedis.mget(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;key03&quot;</span>, <span class="string">&quot;key04&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除多个键值对：&quot;</span> + jedis.del(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取多个键值对：&quot;</span> + jedis.mget(<span class="string">&quot;key01&quot;</span>, <span class="string">&quot;key02&quot;</span>, <span class="string">&quot;key03&quot;</span>));</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========新增键值对防止覆盖原先值===========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>));</span><br><span class="line">        System.out.println(jedis.setnx(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2-new&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===========新增键值对并设置有效时间===========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.setex(<span class="string">&quot;key3&quot;</span>, <span class="number">2</span>, <span class="string">&quot;value3&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===========获取原值，更新为新值===========&quot;</span>);</span><br><span class="line">        System.out.println(jedis.getSet(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;key2GetSet&quot;</span>));</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获得key2的值的字串：&quot;</span> + jedis.getrange(<span class="string">&quot;key2&quot;</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-对-List-的操作"><a href="#2-4-对-List-的操作" class="headerlink" title="2.4 对 List 的操作"></a>2.4 对 List 的操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;===========添加一个list===========&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;ArrayList&quot;</span>, <span class="string">&quot;Vector&quot;</span>, <span class="string">&quot;Stack&quot;</span>,</span><br><span class="line">                <span class="string">&quot;HashMap&quot;</span>, <span class="string">&quot;WeakHashMap&quot;</span>, <span class="string">&quot;LinkedHashMap&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;HashSet&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeSet&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;collections&quot;</span>, <span class="string">&quot;TreeMap&quot;</span>);</span><br><span class="line">        <span class="comment">//-1代表倒数第一个元素，-2代表倒数第二个元素,end为-1表示查询全部</span></span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span> + jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections区间0-3的元素：&quot;</span> + jedis.lrange(<span class="string">&quot; collections&quot;</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        <span class="comment">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除指定元素个数：&quot;</span> + jedis.lrem(<span class="string">&quot;collections&quot;</span>, <span class="number">2</span>, <span class="string">&quot;HashMap&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span> + jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除下表0-3区间之外的元素：&quot;</span> + jedis.ltrim(<span class="string">&quot; collections&quot;</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span> + jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections列表出栈（左端）：&quot;</span> + jedis.lpop(<span class="string">&quot; collections&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span> + jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections添加元素，从列表右端，与lpush相对应：&quot;</span> + jedis.rpush(<span class="string">&quot; collections&quot;</span>, <span class="string">&quot; EnumMap&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span> + jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections列表出栈（右端）：&quot;</span> + jedis.rpop(<span class="string">&quot; collections&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span> + jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;修改collections指定下标1的内容：&quot;</span> + jedis.lset(<span class="string">&quot; collections&quot;</span>, <span class="number">1</span>, <span class="string">&quot; LinkedArrayList&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的内容：&quot;</span> + jedis.lrange(<span class="string">&quot;collections&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;collections的长度：&quot;</span> + jedis.llen(<span class="string">&quot;collections&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取collections下标为2的元素：&quot;</span> + jedis.lindex(<span class="string">&quot; collections&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        jedis.lpush(<span class="string">&quot;sortedList&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sortedList排序前：&quot;</span> + jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        System.out.println(jedis.sort(<span class="string">&quot;sortedList&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;sortedList排序后：&quot;</span> + jedis.lrange(<span class="string">&quot;sortedList&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-对-Set-的操作"><a href="#2-5-对-Set-的操作" class="headerlink" title="2.5 对 Set 的操作"></a>2.5 对 Set 的操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        System.out.println(<span class="string">&quot;============向集合中添加元素(不重复)============&quot;</span>);</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e1&quot;</span>, <span class="string">&quot;e2&quot;</span>, <span class="string">&quot;e4&quot;</span>, <span class="string">&quot;e3&quot;</span>, <span class="string">&quot;e0&quot;</span>, <span class="string">&quot;e8&quot;</span>, <span class="string">&quot;e7&quot;</span>, <span class="string">&quot;e5&quot;</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e6&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除一个元素e0：&quot;</span> + jedis.srem(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e0&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除两个元素e7和e6：&quot;</span> + jedis.srem(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e7&quot;</span>, <span class="string">&quot;e6&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机的移除集合中的一个元素：&quot;</span> + jedis.spop(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机的移除集合中的一个元素：&quot;</span> + jedis.spop(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet的所有元素为：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet中包含元素的个数：&quot;</span> + jedis.scard(<span class="string">&quot;eleSet&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;e3是否在eleSet中：&quot;</span> + jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;e1是否在eleSet中：&quot;</span> + jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;e1是否在eleSet中：&quot;</span> + jedis.sismember(<span class="string">&quot;eleSet&quot;</span>, <span class="string">&quot;e5&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;e1&quot;</span>, <span class="string">&quot;e2&quot;</span>, <span class="string">&quot;e4&quot;</span>, <span class="string">&quot;e3&quot;</span>, <span class="string">&quot;e0&quot;</span>, <span class="string">&quot;e8&quot;</span>, <span class="string">&quot;e7&quot;</span>, <span class="string">&quot;e5&quot;</span>));</span><br><span class="line">        System.out.println(jedis.sadd(<span class="string">&quot;eleSet2&quot;</span>, <span class="string">&quot;e1&quot;</span>, <span class="string">&quot;e2&quot;</span>, <span class="string">&quot;e4&quot;</span>, <span class="string">&quot;e3&quot;</span>, <span class="string">&quot;e0&quot;</span>, <span class="string">&quot;e8&quot;</span>));</span><br><span class="line">        <span class="comment">// 移到集合元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;将eleSet1中删除e1并存入eleSet3中：&quot;</span> + jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;e1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;将eleSet1中删除e2并存入eleSet3中：&quot;</span> + jedis.smove(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet3&quot;</span>, <span class="string">&quot;e2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1中的元素：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet3中的元素：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;============集合运算============&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1中的元素：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet1&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet2中的元素：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1和eleSet2的交集:&quot;</span> + jedis.sinter(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1和eleSet2的并集:&quot;</span> + jedis.sunion(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">        <span class="comment">// eleSet1中有，eleSet2中没有</span></span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet1和eleSet2的差集:&quot;</span> + jedis.sdiff(<span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet2&quot;</span>));</span><br><span class="line">        <span class="comment">// 求交集并将交集保存到dstkey的集合</span></span><br><span class="line">        jedis.sinterstore(<span class="string">&quot;eleSet4&quot;</span>, <span class="string">&quot;eleSet1&quot;</span>, <span class="string">&quot;eleSet2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;eleSet4中的元素：&quot;</span> + jedis.smembers(<span class="string">&quot;eleSet4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-对-Hash-的操作"><a href="#2-5-对-Hash-的操作" class="headerlink" title="2.5 对 Hash 的操作"></a>2.5 对 Hash 的操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key4&quot;</span>, <span class="string">&quot;value4&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加名称为hash（key）的hash元素</span></span><br><span class="line">        jedis.hmset(<span class="string">&quot;hash&quot;</span>, map);</span><br><span class="line">        <span class="comment">// 向名称为hash的hash中添加key为key5，value为value5元素</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key5&quot;</span>, <span class="string">&quot;value5&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span> + jedis.hgetAll(<span class="string">&quot; hash&quot;</span>));<span class="comment">//return Map&lt;String,String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键为：&quot;</span> + jedis.hkeys(<span class="string">&quot;hash&quot;</span>));<span class="comment">//return Set&lt;String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有值为：&quot;</span> + jedis.hvals(<span class="string">&quot;hash&quot;</span>));<span class="comment">//return List&lt;String&gt;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span> + jedis.hincrBy(<span class="string">&quot; hash&quot;</span>, <span class="string">&quot; key6&quot;</span>, <span class="number">6</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span> + jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;将key6保存的值加上一个整数，如果key6不存在则添加key6：&quot;</span> + jedis.hincrBy(<span class="string">&quot; hash&quot;</span>, <span class="string">&quot; key6&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span> + jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;删除一个或者多个键值对：&quot;</span> + jedis.hdel(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash的所有键值对为：&quot;</span> + jedis.hgetAll(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;散列hash中键值对的个数：&quot;</span> + jedis.hlen(<span class="string">&quot;hash&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断hash中是否存在key2：&quot;</span> + jedis.hexists(<span class="string">&quot; hash&quot;</span>, <span class="string">&quot; key2&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;判断hash中是否存在key3：&quot;</span> + jedis.hexists(<span class="string">&quot; hash&quot;</span>, <span class="string">&quot; key3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取hash中的值：&quot;</span> + jedis.hmget(<span class="string">&quot;hash&quot;</span>, <span class="string">&quot;key3&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;获取hash中的值：&quot;</span> + jedis.hmget(<span class="string">&quot; hash&quot;</span>, <span class="string">&quot; key3&quot;</span>, <span class="string">&quot; key4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-事务"><a href="#3-事务" class="headerlink" title="3. 事务"></a>3. 事务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMulti</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;horsenliu&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String value = jsonObject.toJSONString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;json1&quot;</span>, value);</span><br><span class="line">            multi.set(<span class="string">&quot;json2&quot;</span>, value);</span><br><span class="line">            <span class="comment">// 没有异常正常执行</span></span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 出现异常则不执行</span></span><br><span class="line">            multi.discard();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;json1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;json2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Jedis</tag>
      </tags>
  </entry>
  <entry>
    <title>08_Redis.conf 配置</title>
    <url>/posts/55892a91.html</url>
    <content><![CDATA[<p>Redis 的配置文件在这里</p>
<img src="/posts/55892a91/image-20201207093859975.png" class>

<p>一般情况下，会单独拷贝出来一份进行操作，来保证初始文件的安全。</p>
<h3 id="1-Units-单位"><a href="#1-Units-单位" class="headerlink" title="1. Units 单位"></a>1. Units 单位</h3><p>配置大小单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit。对大小写不敏感。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-INCLUDES-包含"><a href="#2-INCLUDES-包含" class="headerlink" title="2. INCLUDES 包含"></a>2. INCLUDES 包含</h3><p>和 Spring 配置文件类似，可以通过 includes 包含其他配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="3-NETWORK-网络配置"><a href="#3-NETWORK-网络配置" class="headerlink" title="3. NETWORK 网络配置"></a>3. NETWORK 网络配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绑定的ip</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保护模式</span></span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认端口</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure>

<h3 id="4-GENERAL-通用"><a href="#4-GENERAL-通用" class="headerlink" title="4. GENERAL 通用"></a>4. GENERAL 通用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认情况下, Redis不作为守护进程运行, 需要开启的话, 改为yes</span></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可通过upstart和systemd管理Redis守护进程</span></span><br><span class="line">supervised no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以后台进程方式运行redis, 则需要指定pid 文件</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志级别 可选项有: </span></span><br><span class="line"><span class="comment"># 1. debug(记录大量日志信息, 适用于开发或测试阶段)</span></span><br><span class="line"><span class="comment"># 2. verbose(较多日志信息)</span></span><br><span class="line"><span class="comment"># 3. notice(适量日志信息，使用于生产环境)</span></span><br><span class="line"><span class="comment"># 4. warning(仅有部分重要、关键信息才会被记录)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件的位置, 当指定为空字符串时, 为标准输出</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库的数目, 默认的数据库是DB 0</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否总是显示logo</span></span><br><span class="line">always-show-logo yes</span><br></pre></td></tr></table></figure>

<h3 id="5-SNAPSHOPTING-快照"><a href="#5-SNAPSHOPTING-快照" class="headerlink" title="5. SNAPSHOPTING 快照"></a>5. SNAPSHOPTING 快照</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 900秒(15分钟)内至少1个key值改变(则进行数据库保存--持久化)</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 300秒(5分钟)内至少10个key值改变(则进行数据库保存--持久化)</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 60秒(1分钟)内至少10000个key值改变(则进行数据库保存--持久化)</span></span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化出现错误后, 是否依然进行继续进行工作</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用压缩rdb文件 </span></span><br><span class="line"><span class="comment"># yes: 压缩, 但是需要一些cpu的消耗</span></span><br><span class="line"><span class="comment"># no: 不压缩, 需要更多的磁盘空间</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否校验rdb文件, 更有利于文件的容错性, 但是在保存rdb文件的时候, 会有大概10%的性能损耗</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbfilenamerdb文件名称</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据目录, 数据库的写入会在这个目录</span></span><br><span class="line"><span class="comment"># rdb和aof文件也会写在这个目录</span></span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure>

<h3 id="6-REPLICATION-复制"><a href="#6-REPLICATION-复制" class="headerlink" title="6. REPLICATION 复制"></a>6. REPLICATION 复制</h3><p>学到主从复制再详细说</p>
<h3 id="7-SECURITY-安全"><a href="#7-SECURITY-安全" class="headerlink" title="7. SECURITY 安全"></a>7. SECURITY 安全</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET requirepass <span class="string">&quot;123456&quot;</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 重新登录会发现所有命令都不能执行了</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line"><span class="comment"># 这个时候需要输入密码</span></span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>

<h3 id="8-CLIENTS-客户端限制"><a href="#8-CLIENTS-客户端限制" class="headerlink" title="8. CLIENTS 客户端限制"></a>8. CLIENTS 客户端限制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置能连上redis的最大客户端连接数量</span></span><br><span class="line">maxclients 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis配置的最大内存容量</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># maxmemory-policy 内存达到上限的处理策略</span></span><br><span class="line"><span class="comment"># 1. volatile-lru 利用LRU算法移除设置过过期时间的key</span></span><br><span class="line"><span class="comment"># 2. volatile-random 随机移除设置过过期时间的key</span></span><br><span class="line"><span class="comment"># 3. volatile-ttl 移除即将过期的key, 根据最近过期时间来删除(辅以TTL)</span></span><br><span class="line"><span class="comment"># 4. allkeys-lru 利用LRU算法移除任何key</span></span><br><span class="line"><span class="comment"># 5. allkeys-random 随机移除任何key</span></span><br><span class="line"><span class="comment"># 6. noeviction 不移除任何key, 只是返回一个写错误</span></span><br><span class="line">maxmemory-policy noeviction </span><br></pre></td></tr></table></figure>

<h3 id="9-APPEND-ONLY-模式"><a href="#9-APPEND-ONLY-模式" class="headerlink" title="9. APPEND ONLY 模式"></a>9. APPEND ONLY 模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否以append only模式作为持久化方式. 默认使用的是rdb方式持久化, 这种方式在许多应用中已经足够用了</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfilename AOF文件名称</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync aof持久化策略的配置</span></span><br><span class="line"><span class="comment"># 1. no表示不执行fsync, 由操作系统保证数据同步到磁盘，速度最快</span></span><br><span class="line"><span class="comment"># 2. always表示每次写入都执行fsync, 以保证数据同步到磁盘</span></span><br><span class="line"><span class="comment"># 3. everysec表示每秒执行一次fsync, 可能会导致丢失这1s数据</span></span><br><span class="line">appendfsync everysec </span><br></pre></td></tr></table></figure>

<p>具体会在后面 Redis 的持久化配置的时候再说。</p>
]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>09_Redis 持久化</title>
    <url>/posts/7f6bc1c2.html</url>
    <content><![CDATA[<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，一旦服务器进程退出，服务器中的数据库状态也会消失，所以 Redis 提供了 2 种方式的持久化功能。</p>
<h3 id="1-RDB-Redis-DataBase"><a href="#1-RDB-Redis-DataBase" class="headerlink" title="1. RDB (Redis DataBase)"></a>1. RDB (Redis DataBase)</h3><h4 id="1-1-什么是-RDB"><a href="#1-1-什么是-RDB" class="headerlink" title="1.1 什么是 RDB"></a>1.1 什么是 RDB</h4><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是 Snapshot 快照。它恢复时是将快照文件直接读到内存里。</p>
<p>Redis 会单独创建 (Fork) 一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能。</p>
<p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。</p>
<p>RDB 的缺点是最后一次持久化后的数据可能丢失。</p>
<h4 id="1-2-Fork"><a href="#1-2-Fork" class="headerlink" title="1.2 Fork"></a>1.2 Fork</h4><p>Fork 的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量，环境变量，程序计数器等）都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。</p>
<p><strong>RDB 保存的是 dump.rdb 文件</strong></p>
<img src="/posts/7f6bc1c2/image-20201207144631251.png" class>

<a id="more"></a>

<h4 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h4><ol>
<li><p>修改一下配置文件中的相关参数</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#save 900 1</span></span><br><span class="line"><span class="comment">#save 300 10</span></span><br><span class="line"><span class="comment">#save 60 10000</span></span><br><span class="line">save 60 5</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想禁用 RDB 持久化的策略，只要不设置任何 save 指令，或者给 save 传入一个空字符串参数。若要修改完毕需要立马生效，可以手动使用 save 命令。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试一下，在 1 分钟之内执行 5 条命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3 </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后把这个线程关掉，再看看是不是关掉了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">[root@centos01 ~]<span class="comment"># ps -ef|grep redis</span></span><br><span class="line">root      82639  82212  0 01:58 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新打开，尝试读取 k1，发现它还在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   [root@centos01 ~]<span class="comment"># redis-server /usr/local/bin/hlconfig/redis.conf      </span></span><br><span class="line">   [root@centos01 ~]<span class="comment"># redis-cli </span></span><br><span class="line">   127.0.0.1:6379&gt; ping</span><br><span class="line">   PONG</span><br><span class="line">   127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="1-5-如何触发-RDB-快照"><a href="#1-5-如何触发-RDB-快照" class="headerlink" title="1.5 如何触发 RDB 快照"></a>1.5 如何触发 RDB 快照</h4><ol>
<li>使用配置文件中默认的快照配置，建议多用一台机器作为备份，复制一份<code>dump.rdb</code></li>
<li>命令<code>save</code>或者是<code>bgsave</code><ul>
<li><code>save</code>时只管保存，其他不管，全部阻塞</li>
<li><code>bgsave</code>时 Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过<code>lastsave</code>命令获取最后一次成功执行快照的时间。</li>
</ul>
</li>
<li>执行<code>flushall</code>命令，也会产生<code>dump.rdb</code>文件，但里面是空的，没有意义 </li>
<li>退出的时候也会产生<code>dump.rdb</code>文件！</li>
</ol>
<h4 id="1-6-如何恢复"><a href="#1-6-如何恢复" class="headerlink" title="1.6 如何恢复"></a>1.6 如何恢复</h4><ol>
<li><p>将备份文件<code>dump.rdb</code>移动到 redis 安装目录并启动服务</p>
</li>
<li><p>CONFIG GET dir 获取目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET dir</span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/bin&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="1-7-总结"><a href="#1-7-总结" class="headerlink" title="1.7 总结"></a>1.7 总结</h4><ul>
<li><p>RDB 是一个非常紧凑的文件</p>
</li>
<li><p>RDB 在保存 RDB 文件时父进程唯一需要做的就是 fork 出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他 IO 操作，所以 RDB 持久化方式可以最大化 redis 的性能</p>
</li>
<li><p>与 AOF 相比，在恢复大的数据集时候，RDB 方式会更快一些</p>
</li>
<li><p>但是数据丢失风险大</p>
</li>
<li><p>RDB 需要经常 fork 子进程来保存数据集到硬盘上，当数据集比较大的时候，fork的过程是非常耗时的，可能会导致 Redis 在一些亳秒级不能相应客户端请求</p>
</li>
<li><p><strong>优点：</strong></p>
<ol>
<li>适合大规模的数据恢复</li>
<li>对数据完整性和一致性要求不高</li>
</ol>
</li>
<li><p><strong>缺点：</strong></p>
<ol>
<li>在一定间隔时间做一次备份，所以如果 redis 意外 down 掉的话，就会丢失最后一次快照后的所有修改</li>
<li>Fork 的时候，内存中的数据被克隆了一份，大致 2 倍的膨胀性需要考虑</li>
</ol>
</li>
</ul>
<h3 id="2-AOF-Append-Only-File"><a href="#2-AOF-Append-Only-File" class="headerlink" title="2. AOF (Append Only File)"></a>2. AOF (Append Only File)</h3><h4 id="2-1-什么是-AOF"><a href="#2-1-什么是-AOF" class="headerlink" title="2.1 什么是 AOF"></a>2.1 什么是 AOF</h4><p>以日志的形式来记录每个写操作，将 Redis 执行过的<strong>所有指令</strong>记录下来（读操作不记录），只许追加文件但不可以改写文件，Redis 启动之初会读取该文件重新构建数据，换言之，Redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p>
<p><strong>AOF 保存的是 appendonly.aof 文件</strong></p>
<h4 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否以append only模式作为持久化方式. 默认使用的是rdb方式持久化, 这种方式在许多应用中已经足够用了</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfilename AOF文件名称</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync aof持久化策略的配置</span></span><br><span class="line"><span class="comment"># 1. no表示不执行fsync, 由操作系统保证数据同步到磁盘，速度最快</span></span><br><span class="line"><span class="comment"># 2. always表示每次写入都执行fsync, 以保证数据同步到磁盘</span></span><br><span class="line"><span class="comment"># 3. everysec表示每秒执行一次fsync, 可能会导致丢失这1s数据</span></span><br><span class="line">appendfsync everysec </span><br></pre></td></tr></table></figure>

<h4 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h4><ol>
<li><p>先在配置文件中开启 AOF</p>
</li>
<li><p>重启一下客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos01 bin]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">[root@centos01 bin]<span class="comment"># redis-server hlconfig/redis.conf </span></span><br><span class="line">[root@centos01 bin]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行一些命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k5 v5</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<code>appendonly.aof</code>可以看到里面记录了所有的写操作</p>
<img src="/posts/7f6bc1c2/image-20201207225036589.png" class>
</li>
<li><p>重启客户端，可以看到还是可以取到数据的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; <span class="built_in">exit</span></span><br><span class="line">[root@centos01 bin]<span class="comment"># redis-server hlconfig/redis.conf </span></span><br><span class="line">[root@centos01 bin]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-4-AOF-启动-修复-恢复"><a href="#2-4-AOF-启动-修复-恢复" class="headerlink" title="2.4 AOF 启动/修复/恢复"></a>2.4 AOF 启动/修复/恢复</h4><ul>
<li>正常情况：<ul>
<li>启动：设置 yes，修改默认的<code>appendonly no</code>，改为<code>yes</code></li>
<li>将有数据的 AOF文件复制一份保存到对应目录（<code>CONFIG GET dir</code>）</li>
<li>恢复：重启 Redis 然后重新加载</li>
</ul>
</li>
<li>发生异常：<ul>
<li>启动：设置 yes，修改默认的<code>appendonly no</code>，改为<code>yes</code></li>
<li>故意破坏 appendonly.aof 文件</li>
<li>修复： <code>redis-check-aof --fix appendonly.aof</code>进行修复</li>
<li>恢复：重启 Redis 然后重新加载</li>
</ul>
</li>
</ul>
<h4 id="2-5-Rewrite-重写"><a href="#2-5-Rewrite-重写" class="headerlink" title="2.5 Rewrite 重写"></a>2.5 Rewrite 重写</h4><p><strong>是什么：</strong></p>
<p>AOF 采用文件追加方式，文件会越来越大，为避免出现此种情况，新增了重写机制，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动A OF 文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令<code>BGREWRITEAOF</code></p>
<p><strong>原理：</strong></p>
<p>AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写（也是先写临时文件最后再 rename），遍历新进程的内存中数据，每条记录有一条的 Set 语句。重写 AOF 文件的操作，并没有读取旧的 AOF文件，这点和快照有点类似。</p>
<p><strong>触发机制：</strong></p>
<p>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍（100%）且文件大于 64M 时触发。如果想要修改的话需要更改一下两条配置参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<h4 id="2-6-总结"><a href="#2-6-总结" class="headerlink" title="2.6 总结"></a>2.6 总结</h4><ul>
<li><p>AOF 文件时一个只进行追加的日志文件</p>
</li>
<li><p>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写</p>
</li>
<li><p>AOF 文件有序地保存了对数据库执行的所有写入操作，这些写入操作以 Redis 协议的格式保存，因此 AOF 文件的内容非常容易被人读懂，对文件进行分析也很轻松</p>
</li>
<li><p>对于相同的数据集来说，AOF 文件的体积通常要大于RDB文件的体积</p>
</li>
<li><p>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB</p>
</li>
<li><p><strong>优点：</strong></p>
<ol>
<li>每修改同步：appendfsync always 同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好</li>
<li>每秒同步： appendfsync everysec 异步操作，每秒记录 ，如果一秒内宕机，有数据丢失</li>
<li>不同步： appendfsync no 从不同步</li>
</ol>
</li>
<li><p><strong>缺点：</strong></p>
<ol>
<li>相同数据集的数据而言，AOF 文件要远大于 RDB 文件，恢复速度慢于 RDB。</li>
<li>AOF 运行效率要慢于 RDB，每秒同步策略效率较好，不同步效率和 RDB 相同。</li>
</ol>
</li>
</ul>
<h3 id="3-两种方式的对比总结"><a href="#3-两种方式的对比总结" class="headerlink" title="3. 两种方式的对比总结"></a>3. 两种方式的对比总结</h3><ul>
<li>RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</li>
<li>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得 AOF 文件的体积不至于过大。</li>
<li>如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化，只做缓存</li>
<li>同时开启两种持久化方式<ul>
<li>在这种情况下，当 Redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li>
<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li>
</ul>
</li>
<li>性能建议<ul>
<li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够了，只保留<code>save 900 1</code>这条规则。</li>
<li>如果开启 AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只加载自己的 AOF 文件就可以了。代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上，默认超过原大小100% 大小重写可以改到适当的数值。</li>
<li>如果不开启 AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔 IO，也减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时倒掉，会丢失十几分钟的数据，<br>启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Redis 持久化</tag>
      </tags>
  </entry>
  <entry>
    <title>19-20-2 学期总结</title>
    <url>/posts/5b335135.html</url>
    <content><![CDATA[<h3 id="3月5日之前"><a href="#3月5日之前" class="headerlink" title="3月5日之前"></a>3月5日之前</h3><p>3月5日是学校线上授课开始的日子，在此之前一直过着疫情期间的生活，每天就是在网上抢口罩、消毒液，由于小区封闭，也不方便出去买菜，日子过得很不舒服，也没怎么学习。</p>
<h3 id="3月5日-4月22日"><a href="#3月5日-4月22日" class="headerlink" title="3月5日 ~ 4月22日"></a>3月5日 ~ 4月22日</h3><p>线上授课开始之后，才有了一点好好学习的动力，虽然4月22日之前只有两门网课，十分轻松，所以有很多时间可以学自己想学的东西。</p>
<p>每天的节奏就是把这两门网课（水课）的视频看了，课后题做了，把题目整理保存在文档中，因为当时我有预感这学期无法开学，到最后就是网络考试，题库就是课后习题。</p>
<p>剩下的时间就学习 Html5 和 Android 开发，这两门课是上个学期的任选课，同时我也比较感兴趣，所以提前了解了一下。</p>
<h3 id="4月22日之后"><a href="#4月22日之后" class="headerlink" title="4月22日之后"></a>4月22日之后</h3><p>事实证明预习确实能提高学习效率。</p>
<p>不过 Android 任选课的学习内容，着实落后，学到最后也没有 JetPack，没有 Kotlin，学了一学期全是基础中的基础，还没有我提前预习的知识密度大…</p>
<p>除了这两门实践课，还有3门理论课。理论课真是地狱，学了后面忘前面，而且感觉十分难于应用。现在我已经什么都不记得了。</p>
<p>我把大部分的精力都放在了 Html5 和 Android 上面。不得不说，收获还是很多的，也很有成就感，我比较认真，有的时候会死磕一个东西，所以花了很多时间在这上面。不过代码敲多了就游刃有余了，期末的大作业我就很有信心了。</p>
<a id="more"></a>

<h3 id="期末"><a href="#期末" class="headerlink" title="期末"></a>期末</h3><p>不出意外的，所有科目都是大作业。</p>
<p>Html5 和 Android 是做应用，这对于我来说只要多花点功夫就好了，网上也有开发文档和很多博客。我觉得老师的要求太低了，就算再严格一倍，也达不到“可以及格”的标准，可能是为了照顾吸收消化慢的同学吧。所以我按照自己的标准来做的作业，做到我自己满意为止。</p>
<p>理论课是写文档，虽然相关的知识没有怎么进脑子，但是好在要求不是很高，借着发达的互联网，还是可以写出不错的作业的。我自认为还可以，虽然肚子里没货，写不出干货，但文档排版什么的还是得心应手的，至少可以满足老师的要求。</p>
<h3 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h3><table>
<thead>
<tr>
<th>科目</th>
<th>成绩</th>
<th>绩点</th>
</tr>
</thead>
<tbody><tr>
<td>软件质量保证与测试</td>
<td>92</td>
<td>4.5</td>
</tr>
<tr>
<td>软件系统分析与设计技术</td>
<td>84</td>
<td>3.5</td>
</tr>
<tr>
<td>软件项目管理</td>
<td>85</td>
<td>4.0</td>
</tr>
<tr>
<td>Android应用开发</td>
<td>92</td>
<td>4.5</td>
</tr>
<tr>
<td>HTML5移动应用开发</td>
<td>100</td>
<td>5.0</td>
</tr>
<tr>
<td>大学生职业发展与就业指导Ⅱ</td>
<td>91</td>
<td>4.5</td>
</tr>
<tr>
<td>形式与政策</td>
<td>98</td>
<td>5.0</td>
</tr>
<tr>
<td><strong>平均</strong></td>
<td><strong>91.71</strong></td>
<td><strong>4.43</strong></td>
</tr>
</tbody></table>
<p>同时还把 GPA 提高到了 <code>3.91</code>，这个是我没想到的。总的来说，这学期的成绩我还是很满意的，感觉自己的努力得到了应有的回报。但是又感觉是不是给自己的要求太低了，没有更努力一点。</p>
<h3 id="假期计划"><a href="#假期计划" class="headerlink" title="假期计划"></a>假期计划</h3><p>下学期就大四了，感觉一下就紧迫了起来，想想自己啥都不会，根本没有面试的能力，所以决定假期的时候针对 Java 开发再学两个月，争取能上一个台阶。同时把之前学过的技术巩固一下，查漏补缺，多积累开发经验。</p>
<p>先按照这个路线学下去</p>
<ul>
<li>搭建属于自己的博客</li>
<li>复习 MarkDown 语法，把 Typora 用熟练</li>
<li>复习 Java 基础</li>
<li>复习多线程</li>
<li>学习注解和反射</li>
<li>复习 MySQL</li>
<li>复习 Java Web</li>
<li>学习 Mybatis</li>
<li>学习 Spring5</li>
<li>学习 Spring MVC</li>
<li>复习 JavaScript</li>
<li>学习 Vue</li>
<li>学习 Spring Boot 基础</li>
<li>学习 Swagger</li>
<li>学习 Spring Cloud</li>
<li>如果还有时间，学习尚硅谷的谷粒学院，做一个完整的项目</li>
</ul>
<p>总结不会就此结束，等到开学之前，我再把这两个月的学习情况总结一下，加在下面。</p>
<h3 id="假期总结"><a href="#假期总结" class="headerlink" title="假期总结"></a>假期总结</h3><h4 id="博客搭建好了"><a href="#博客搭建好了" class="headerlink" title="博客搭建好了"></a>博客搭建好了</h4><p>今天是7月3日，我把博客搭好了。</p>
<p>上面那些是我把博客搭建好之后重新写的，因为决定把学期总结也写到博客里，所以把排版重新优化了一下。</p>
<p>之所以要自己搭博客，是因为主流的博客网站要么是功能不全，要么是广告太多，想起来以前朋友安利我的 Hexo + NexT，我就花了几天搭建、美化了一下。因为没有钱买域名，所以只好用免费的静态网站的服务了，一共建了三个仓库，东西都是一样的。</p>
<table>
<thead>
<tr>
<th>网址</th>
<th>描述</th>
<th>平台</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://horsenliu.github.io/">https://horsenliu.github.io/</a></td>
<td>速度慢，可能需要梯子</td>
<td>Github</td>
</tr>
<tr>
<td><a href="http://horsenliu.gitee.io/">http://horsenliu.gitee.io/</a></td>
<td>速度一般，图片资源加载慢</td>
<td>码云 Gitee</td>
</tr>
<tr>
<td><a href="https://8juh82.coding-pages.com/">https://8juh82.coding-pages.com/</a></td>
<td>速度快，首选推荐</td>
<td>Coding</td>
</tr>
</tbody></table>
<p>以后的学习痕迹都在博客里了，等到开学之前再简单总结一下吧。</p>
<h4 id="一些感触"><a href="#一些感触" class="headerlink" title="一些感触"></a>一些感触</h4><p>今天是8月25日。</p>
<p>由于楼下连续装修，声音巨大且震感强烈，在家里我妈和我说话都听不清，完全无法看视频学习，导致学习进度大大延后。目前学到了 Spring Cloud，跟着老师利用 Spring Boot 做了一个小 Demo。</p>
<p>期间一共写了<code>101</code>篇博客，差不多<code>65000</code>字。看起来是学了不少东西，但是只是简单了解了一下，并没有熟练掌握，也没有做到精通。还好养成了写博客的习惯，这样再复习的时候就可以直接看博客了，节省了不少时间。</p>
<p>这段时间给感受很深的有以下几点</p>
<ul>
<li><strong>要学的东西实在太多了。</strong>也就是说距离可以就业的水平还有很长的路要走。但是时间却不多了，有点后悔没有早点学这些技术。但是也许没有之前的积累，也不会这么快就吸收这些知识。</li>
<li><strong>一个好的老师真的很重要。</strong>我是无意间找到了一个观看量不错的 Java 基础的教学视频，时间比较新，用的是 IDEA。看了几节觉得讲的很细，干货很多，不像别的培训机构流水式的教学。进入这个老师的主页发现了很多教学视频，就一直跟着他学下来。收获颇丰。</li>
<li><strong>好的习惯也很重要。</strong>一个是记笔记的习惯，也就是写博客，把学过的东西记录下来。还有一个是文件整理的习惯，包括各种软件的安装位置，开发环境的配置，视频、代码、笔记的整理。最后就是敲代码的习惯，准确来说是标准吧。比如阿里巴巴的 Java 开发手册，简直就是代码圣经。</li>
<li><strong>还有就是自制力。</strong>游戏很好玩，视频很好看，但是一想到还有几千分钟的视频没有看，就头大。以后也很难再有这么舒服的学习环境了，可以心无旁骛地学习，压力也不是很大。而且是主动学习，主动吸收大量知识，而不是快来不及了才囫囵吞枣地应付。</li>
<li>最大的感受是，一旦忙起来，别的事情就全部都成了小事。自己一个人静下心来学习和思考的时候，那种感觉真的非常好。</li>
</ul>
]]></content>
      <categories>
        <category>学期总结</category>
      </categories>
      <tags>
        <tag>学期总结</tag>
      </tags>
  </entry>
  <entry>
    <title>01_项目搭建</title>
    <url>/posts/82e4d4f9.html</url>
    <content><![CDATA[<h3 id="1-父工程"><a href="#1-父工程" class="headerlink" title="1. 父工程"></a>1. 父工程</h3><table>
<thead>
<tr>
<th>项目类型</th>
<th>项目名</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>Spring Boot</td>
<td><code>guli_parent</code></td>
<td>2.2.1</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guli_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>guli_parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">guli.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">guli.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jodatime.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">jodatime.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-java-sdk-core.version</span>&gt;</span>4.3.3<span class="tag">&lt;/<span class="name">aliyun-java-sdk-core.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-sdk-oss.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">aliyun-sdk-oss.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-java-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-java-vod-upload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">json.version</span>&gt;</span>20170516<span class="tag">&lt;/<span class="name">json.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-dbutils.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">commons-dbutils.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canal.client.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">canal.client.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>zx<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Cloud --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mybatis-plus 持久层--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- swagger ui --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- aliyunOSS --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 日期时间工具 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jodatime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- xls --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- xlsx --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- commons-io --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- httpclient --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;gson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- aliyun --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-vod<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-vod.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;json.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-dbutils.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;canal.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-service-子模块"><a href="#2-service-子模块" class="headerlink" title="2. service 子模块"></a>2. service 子模块</h3><table>
<thead>
<tr>
<th>项目类型</th>
<th>项目名</th>
<th>父工程</th>
</tr>
</thead>
<tbody><tr>
<td>Maven</td>
<td><code>service</code></td>
<td><code>guli_parent</code></td>
</tr>
</tbody></table>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guli_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service_edu<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service_vod<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--                &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;!– hystrix依赖，主要是用  @HystrixCommand –&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;!– 服务注册 –&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--         &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--             &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--         &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;!– 服务调用 –&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--         &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--             &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--         &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lombok用来简化实体类：需要安装lombok插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xls --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- httpclient --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- commons-io --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- gson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>谷粒学院</tag>
      </tags>
  </entry>
  <entry>
    <title>20-21-1 学期总结</title>
    <url>/posts/f8d03568.html</url>
    <content><![CDATA[<p>这个学期非常「充实」，必须要分类才能总结清楚。</p>
<h3 id="自学-Java-技术"><a href="#自学-Java-技术" class="headerlink" title="自学 Java 技术"></a>自学 Java 技术</h3><p>借着暑假的劲头，我又学了一些新的知识，例如 Linux、Redis。虽然不多，速度也不快，但还是坚持写了不少笔记。不得不说，在家学习比在学校学习效率高得多，在宿舍学习比在图书馆学习效率高得多。当然，效率最低的当然是在课堂上。我觉得学校「强迫企业实训」和「老师讲老师的，你自己学你自己的」这种学习模式非常不适合我。可能我抗干扰能力不强，每次在图书馆里学习都觉得十分不自在，虽然图书馆里十分安静，但是总感觉到十分压抑和吵闹。</p>
<h3 id="课程设计和企业实训"><a href="#课程设计和企业实训" class="headerlink" title="课程设计和企业实训"></a>课程设计和企业实训</h3><p>这是我这学期最大的绊脚石之一，一方面我想要得到不错的成绩，另一方面我又要兼顾学习技术和找工作。我没有这么强的能力，只好把学习技术的时间拿出来，花在这上面。</p>
<p>先说课程设计，很好应付，因为我上个学习做了一个 Android APP，直接拿来优化一下，就可以完成任务。企业实训的第一个项目是 H5 项目，也很好应付，我上个学习也做了。最头大的就是第二个 SSM 的项目。</p>
<p>虽说 SSM 我早就学过，也写过 Demo，但是由于接触了 Spring Boot 之后，脑子已经没有了对 SSM 项目中配置地狱的应付能力，其次有很多优秀的技术如何集成在 SSM 项目中也成了一个问题。不是说无法集成，而是我实在找不到官方的教程，自己也搞不定，看了教程也失败。最后无奈，我还是决定用 Spring Boot 来做。不得不说，用了 Spring Boot 就再也不想回到 SSM 了。</p>
<p>具体的很多细节我都不想去回忆了，反正做项目从来不是轻轻松松的事情（特别是写前端，真是噩梦）。做这个项目花了我很大的时间和精力。由于在最后的时间点，我还要找房看房，差点都没能及时完成所有功能。12月份真是我这辈子最累的一个月了。</p>
<p>此时此刻，成绩也出来了，像上个学期一样，列一下：</p>
<table>
<thead>
<tr>
<th>课程</th>
<th>成绩</th>
<th>绩点</th>
</tr>
</thead>
<tbody><tr>
<td>企业技术实习</td>
<td>95</td>
<td>4.5</td>
</tr>
<tr>
<td>软件系统分析与设计课程设计</td>
<td>95</td>
<td>4.5</td>
</tr>
<tr>
<td>软件工程项目训练</td>
<td>92</td>
<td>4.5</td>
</tr>
</tbody></table>
<p>绩点终于到<code>4.0</code>了，但是可惜我的校招已经结束了，绩点没什么作用了。</p>
<a id="more"></a>

<h3 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h3><p>找工作可以说是十分跌宕波折的过程了。</p>
<p>一开始我和大家一样，拿着简历去跑各种招聘会和宣讲会，一脸茫然，内心迷茫，前几次连面试机会都没有拿到。后来参加的多了，渐渐也有了面试的机会。面试的次数多了，渐渐也有了面试的经验，知道面试官喜欢问哪些问题，知道公司对应届毕业生的看法和要求。有些公司给的薪资是真的低，不知道是我们学校的学生太差了他们不愿意多给一些，还是由于疫情影响，公司也拿不出太多的薪水，反正有的 offer 实在是不堪入目……</p>
<p>后来我就拿到了第一个我比较满意的 offer，也去公司参观了，他们人挺好的，十分真诚。过了几天我又去了一次，和他们签订了实习协议，他们知道我在学校里不能出来实习，就给我们在线上布置任务。其实嘴上说满意，我心里还是十分不甘心的，我觉得我的校招不能就这样结束，我还要继续投简历，继续面试，我想要进更大的公司。</p>
<p>再后来我又拿到了一个更加满意的 offer，薪资待遇更好，公司规模也大得多得多，也就是我现在在实习的这家公司。至此，我的校招就算上岸了。接下来就是等待 7 月份正式入职了。</p>
<h3 id="租房子"><a href="#租房子" class="headerlink" title="租房子"></a>租房子</h3><p>租房子的原因有三个：</p>
<ol>
<li>为了实习。学校 1 月中旬放假之后，我在南京就没有地方可以住了；</li>
<li>为了上班方便。从学校到实习单位的通勤时间实在是太长了；</li>
<li>为了离开我不喜欢的人、事、物。远离绊脚石，和另一个绊脚石。</li>
</ol>
<p>这是我人生第一次租房子，所以「理所当然」的第一次就被坑了，找了一个黑中介，被坑了 400 块钱。不过好在我很快就发现问题了，赶紧又找了一家正规的中介，虽然收中介费，但是图个安心。</p>
<p>租房的战线拉的很长，因为每周一到周五都要上课，只有周末的时间可以出去看房，每次看房回来都十分疲惫。不过好在努力有了回报，最终租到了满意的房子，房东人也很好。</p>
<p>这次总结了不少租房子的经验，下一次租房子就能更得心应手一些了吧。</p>
<h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>在 7 月份正式入职之前，我申请到了去公司实习的机会。</p>
<h4 id="为了实习"><a href="#为了实习" class="headerlink" title="为了实习"></a>为了实习</h4><p>真是费劲了千辛万苦。都不能说是绊脚石了，简直就是两把合金锁。</p>
<p>第一把，学校非得要我们上企业实训的课，但是这个课程的教学质量，用「不尽人意」来形容那都是万分的尊重了，在我心里只有三个形容词，骗钱，骗钱，还是 TMD 骗钱。我和几家公司都提出过这个问题，他们给出的答复意思是「我们不能等你这么久，因为你这个岗位有很多人在竞争呢」还有的公司就直接说「不知道你们学校为什么要干这种事情，这不是妨碍学生就业吗」。一时间，我就明白了为什么一些企业对于南京工程学院的心里印象特别不好，也明白了为什么我们的就业率这么低。</p>
<p>熬到课程结束之后，第二把合金锁又来了。如果我想出去实习，就要办校外毕设的手续。想要办这个手续，不仅需要很多领导签字，还需要三方协议。这就很巧了，我的公司非常好，offer 发下来我接受之后就和我签订了三方。但毕竟不是所有公司都这么好，有的公司需要学生先来实习，在实习期对学生进行考核，然后再决定是否和你签三方。对于这样的学生，就面临以下这个情况：</p>
<ul>
<li>学生：老师，我想出去实习，可以吗？</li>
<li>老师：可以，但是你需要先拿到三方。</li>
<li>学生：啊……那我问问公司，能不能提前和我签三方。</li>
<li>学生：HR 您好，我想问问现在能不能签三方。</li>
<li>HR：在我们公司要先经过实习期，通过我们的考核，然后你拿着毕业证和学位证，才能和我们签三方，正式入职。</li>
<li>学生：我人傻了，我需要三方才能实习，但是需要实习才能拿到三方。</li>
</ul>
<p>我不知道现在学校对于这种情况是怎么处理的，只是我万幸能提前拿到三方。</p>
<h4 id="实习中"><a href="#实习中" class="headerlink" title="实习中"></a>实习中</h4><p>虽然我的简历上写的是「Java 开发」，但是我的工作却和 Java 关系不大。不过实习重在熟悉公司、熟悉工作流程、学习新的知识。</p>
<p>这是对外的说话。其实我心里想的是：</p>
<ul>
<li>如果我早点去公司，就会比同届学生更有竞争力；</li>
<li>实习有钱赚；</li>
<li>我不想闲着。12 月底所有课程结束了，这个时候回家的人无非四种：<ol>
<li>没有找到工作，回去当咸鱼，或者啃老；</li>
<li>找到工作了，但是没有找到实习，回家努力学习，下学期开学争取找个班儿上；</li>
<li>找到工作了，我可太牛了，解脱咯，玩儿咯；</li>
<li>考研结束，无论考的怎么样，回家休息等成绩。当然不包括用考研逃避就业的，这种人可以归于第一类。</li>
</ol>
</li>
</ul>
<p>我目前在公司实习半个月了，主要的工作是翻译，一共有 34441 条数据需要翻译，每一条都是语句不那么通顺的网络攻击类型描述，我现在才处理了 11%，感觉道阻且长。经理让我一个半月搞完，我觉得我压力挺大的。</p>
<h3 id="另一个绊脚石"><a href="#另一个绊脚石" class="headerlink" title="另一个绊脚石"></a>另一个绊脚石</h3><p>两年了，我终于摆脱了。这两年我的心路历程，可以用跌宕波折来形容。</p>
<p>现在，我找到了工作，租到了房子，找到了实习，也买好了回家的车票。我成功地逃离了我不想看的到人，不想经历的事情，不想待的地方。一直以来我都没有任何办法，所以卑微到只能逃离，还好我仅存的尊严告诉我自己应该逃离，还好我和他们不一样，还好我做到了。</p>
<p>也多亏这个绊脚石，让我不断感受到痛苦与折磨，才有逃离的动力。没想到居然这么讽刺，难道这就是所谓的「鞭策」吗。更讽刺的是，我居然需要这种地理上的远离，来帮助自己进行心理上的远离。</p>
<p>处理好人与人之间的关系，可能是我这辈子永远都学不好的课程。</p>
<p>好在新的生活已经开始了，好在我还有未来。</p>
<p>🙂可是绊脚石和寄生虫能有什么未来呢？</p>
<blockquote>
<p>明天冰雪封山的时候，我会光着双脚，站在你翻山越岭的尽头，正当年少。</p>
</blockquote>
]]></content>
      <categories>
        <category>学期总结</category>
      </categories>
      <tags>
        <tag>学期总结</tag>
      </tags>
  </entry>
  <entry>
    <title>02_讲师_管理模块</title>
    <url>/posts/a257dbd6.html</url>
    <content><![CDATA[<h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><ol>
<li><p>service 模块下新建 子模块 service_edu</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th>项目名</th>
<th>包名</th>
<th>父模块</th>
</tr>
</thead>
<tbody><tr>
<td>Maven</td>
<td><code>service_edu</code></td>
<td><code>com.horsen.serviceedu</code></td>
<td><code>service</code></td>
</tr>
</tbody></table>
<a id="more"></a>
</li>
<li><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">   </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 返回json的全局时间格式</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">  <span class="comment"># 服务名</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="comment"># mysql数据库连接</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/guli_edu?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># mybatis日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 配置逻辑删除</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Mybatis-Plus 代码生成器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置策略</span></span><br><span class="line">        <span class="comment">// 1. 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;E:\\Proj_Java\\guli_parent\\service\\service_edu\\src\\main\\java&quot;</span> + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Horsen&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成后是否打开资源管理器</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        <span class="comment">// 主键策略</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">        <span class="comment">// 定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        <span class="comment">//开启Swagger2模式</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置数据源</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/guli_edu?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 包的配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;com/horsen/serviceedu&quot;</span>);</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.horsen&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;model&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// 设置要映射的表名</span></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;edu_teacher&quot;</span>);</span><br><span class="line">        <span class="comment">// 数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// 生成实体时去掉表前缀</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="comment">// 数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// restful api风格控制器</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动填充配置</span></span><br><span class="line">        TableFill gmtCreate = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        TableFill gmtModified = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_modified&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(gmtCreate);</span><br><span class="line">        tableFills.add(gmtModified);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">// 乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-编写-API"><a href="#2-编写-API" class="headerlink" title="2. 编写 API"></a>2. 编写 API</h3><ol>
<li><p>Srping Boot 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.horsen.serviceedu.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL执行效率插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">        <span class="comment">// 设置SQL的最大执行时间, 超过时间就不执行</span></span><br><span class="line">        performanceInterceptor.setMaxTime(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 开启SQL语句格式化</span></span><br><span class="line">        performanceInterceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑删除组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EduApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/edu/teachers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeacherController</span><span class="params">(TeacherService teacherService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacherService = teacherService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Teacher&gt; list = teacherService.list(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success().setData(<span class="string">&quot;items&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>谷粒学院</tag>
        <tag>Mybatis-Plus</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>03_配置 Swagger</title>
    <url>/posts/5dbf6bc3.html</url>
    <content><![CDATA[<ol>
<li><p>gui_parent 工程下创建模块 common</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th align="left">项目名</th>
<th>父工程</th>
</tr>
</thead>
<tbody><tr>
<td>Maven</td>
<td align="left"><code>common</code></td>
<td><code>gui_parent</code></td>
</tr>
</tbody></table>
<a id="more"></a>
</li>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guli_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- lombok用来简化实体类：需要安装lombok插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring2.X集成redis所需common-pool2</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;2.6.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>common 模块下创建模块 service_base</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th>项目名</th>
<th>包名</th>
<th>父模块</th>
</tr>
</thead>
<tbody><tr>
<td>Maven</td>
<td><code>service_base</code></td>
<td><code>com.horsen.servicebase</code></td>
<td><code>common</code></td>
</tr>
</tbody></table>
</li>
<li><p>Swagger 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/admin/.*&quot;</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;网站-课程中心API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;Horsen&quot;</span>, <span class="string">&quot;http://horsenliu.gitee.io&quot;</span>, <span class="string">&quot;horsenliu@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 service 模块中引入 service_base</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类添加注解<code>@ComponentScan(basePackages = &#123;&quot;com.horsen&quot;&#125;)</code></p>
</li>
<li><p>添加自定义接口说明和参数说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;讲师管理&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/edu/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeacherController</span><span class="params">(TeacherService teacherService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacherService = teacherService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;所有讲师列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Teacher&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherService.list(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据ID删除讲师&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@ApiParam(name=&quot;id&quot;,value = &quot;讲师ID&quot;,required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>04_统一返回数据格式</title>
    <url>/posts/a77139ed.html</url>
    <content><![CDATA[<ol>
<li><p>common 模块下新建模块 common_utils</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th align="left">项目名</th>
<th>包名</th>
<th>父模块</th>
</tr>
</thead>
<tbody><tr>
<td>Maven</td>
<td align="left"><code>common_utils</code></td>
<td><code>com.horsen.commonutils</code></td>
<td><code>common</code></td>
</tr>
</tbody></table>
<a id="more"></a>
</li>
<li><p>创建接口定义返回码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer SUCCESS = <span class="number">20000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer ERROR = <span class="number">20001</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建结果类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把构造方法私有化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">        r.setCode(ResultCode.SUCCESS);</span><br><span class="line">        r.setMessage(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> R <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        R r = <span class="keyword">new</span> R();</span><br><span class="line">        r.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">        r.setCode(ResultCode.ERROR);</span><br><span class="line">        r.setMessage(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">setData</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 service 模块中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common_utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;讲师管理&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/edu/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeacherController</span><span class="params">(TeacherService teacherService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacherService = teacherService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;所有讲师列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Teacher&gt; list = teacherService.list(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success().setData(<span class="string">&quot;items&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据ID删除讲师&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">removeById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = teacherService.removeById(id);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Mybatis-Plus</tag>
        <tag>Spring Boot</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>05_讲师_分页和条件查询</title>
    <url>/posts/caf9e75e.html</url>
    <content><![CDATA[<h3 id="1-分页"><a href="#1-分页" class="headerlink" title="1. 分页"></a>1. 分页</h3><ol>
<li><p>注入插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Controller 中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;分页显示讲师列表&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/findAll/&#123;page&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">pageList</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable(&quot;page&quot;)</span> Long page,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable(&quot;limit&quot;)</span> Long limit)</span> </span>&#123;</span><br><span class="line">    Page&lt;Teacher&gt; pageParam = <span class="keyword">new</span> Page&lt;&gt;(page, limit);</span><br><span class="line">    teacherService.page(pageParam, <span class="keyword">null</span>);</span><br><span class="line">    List&lt;Teacher&gt; records = pageParam.getRecords();</span><br><span class="line">    <span class="keyword">long</span> total = pageParam.getTotal();</span><br><span class="line">    <span class="keyword">return</span> R.success().setData(<span class="string">&quot;total&quot;</span>, total).setData(<span class="string">&quot;rows&quot;</span>, records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2. 条件查询"></a>2. 条件查询</h3><ol>
<li><p>创建查询对象，将查询的条件封装在一个类中，包名<code>com.horsen.serviceedu.model.vo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value = &quot;Teacher对象&quot;, description = &quot;讲师&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherQuery</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionID = <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;讲师姓名 模糊查询&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;头衔 1高级讲师 2首席讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;查询开始时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String begin;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;查询结束时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口中添加查询方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Teacher</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(Page&lt;Teacher&gt; page, TeacherQuery teacherQuery)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现类中将 wrapper 的操作封装起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">TeacherMapper</span>, <span class="title">Teacher</span>&gt; <span class="keyword">implements</span> <span class="title">TeacherService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageQuery</span><span class="params">(Page&lt;Teacher&gt; pageParam, TeacherQuery teacherQuery)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;Teacher&gt; wrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">        wrapper.orderByDesc();</span><br><span class="line">        String name = teacherQuery.getName();</span><br><span class="line">        Integer level = teacherQuery.getLevel();</span><br><span class="line">        String begin = teacherQuery.getBegin();</span><br><span class="line">        String end = teacherQuery.getEnd();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(name)) &#123;</span><br><span class="line">            wrapper.like(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(level)) &#123;</span><br><span class="line">            wrapper.eq(<span class="string">&quot;level&quot;</span>, level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(begin)) &#123;</span><br><span class="line">            wrapper.ge(<span class="string">&quot;gmt_create&quot;</span>, begin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(end)) &#123;</span><br><span class="line">            wrapper.le(<span class="string">&quot;gmt_modified&quot;</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">        baseMapper.selectPage(pageParam, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Controller 中添加方法</p>
<p><strong>注意：</strong>必须使用 post 提交方式且 teacherQuery 参数前必须添加<code>@RequestBody</code>，否则无法将该参数提交请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;分页条件查询讲师&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/&#123;page&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getTeacherByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@PathVariable(&quot;page&quot;)</span> Long page,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@PathVariable(&quot;limit&quot;)</span> Long limit,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name = &quot;teacherQuery&quot;, value = &quot;查询对象&quot;, required = false)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestBody(required = false)</span> TeacherQuery teacherQuery)</span> </span>&#123;</span><br><span class="line">    Page&lt;Teacher&gt; pageParam = <span class="keyword">new</span> Page&lt;&gt;(page, limit);</span><br><span class="line">    teacherService.pageQuery(pageParam, teacherQuery);</span><br><span class="line">    List&lt;Teacher&gt; records = pageParam.getRecords();</span><br><span class="line">    <span class="keyword">long</span> total = pageParam.getTotal();</span><br><span class="line">    <span class="keyword">return</span> R.success().setData(<span class="string">&quot;total&quot;</span>, total).setData(<span class="string">&quot;rows&quot;</span>, records);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>CRUD</tag>
        <tag>谷粒学院</tag>
        <tag>Mybatis-Plus</tag>
        <tag>Spring Boot</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>06_讲师_新增、修改和删除</title>
    <url>/posts/c15e24c2.html</url>
    <content><![CDATA[<h3 id="1-新增"><a href="#1-新增" class="headerlink" title="1. 新增"></a>1. 新增</h3><ol>
<li><p>新建自动填充类，包名<code>com.horsen.servicebase.handler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时的填充策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill......&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtCreate&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时的填充策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill......&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;gmtModified&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Controller 新增添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;新增讲师&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">postTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name = &quot;teacher&quot;, value = &quot;讲师对象&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestBody</span> Teacher teacher)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> save = teacherService.save(teacher);</span><br><span class="line">    <span class="keyword">if</span> (save) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2. 修改"></a>2. 修改</h3><ol>
<li><p>先根据 ID 查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;根据ID查询讲师&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getTeacherById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">    Teacher teacher = teacherService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> R.success().setData(<span class="string">&quot;teacher&quot;</span>, teacher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>再根据 ID 修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;根据ID修改讲师&quot;)</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">putTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable(&quot;id&quot;)</span> String id,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(name = &quot;teacher&quot;, value = &quot;讲师对象&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestBody</span> Teacher teacher)</span> </span>&#123;</span><br><span class="line">    teacher.setId(id);</span><br><span class="line">    teacherService.updateById(teacher);</span><br><span class="line">    <span class="keyword">return</span> R.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h3><p>Controller 中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;根据ID删除讲师&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">deleteTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = teacherService.removeById(id);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>CRUD</tag>
        <tag>谷粒学院</tag>
        <tag>Mybatis-Plus</tag>
        <tag>Spring Boot</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title>07_统一异常处理</title>
    <url>/posts/75c7fbe2.html</url>
    <content><![CDATA[<p>如果想要异常结果也想视为同意的返回结果对象，并且统一处理系统的异常信息，那么就需要统一异常处理</p>
<h3 id="1-全局异常处理"><a href="#1-全局异常处理" class="headerlink" title="1. 全局异常处理"></a>1. 全局异常处理</h3><p>service_base 模块中新建包 exceptionhandler，新建类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-处理特定异常"><a href="#2-处理特定异常" class="headerlink" title="2. 处理特定异常"></a>2. 处理特定异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(ArithmeticException e)</span></span>&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> R.error().setMessage(<span class="string">&quot;处理了Arithmetic异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3. 自定义异常"></a>3. 自定义异常</h3><ol>
<li><p>创建自定义异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuliException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;状态码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;错误信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GuliException&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, msg=&#x27;&quot;</span> + <span class="keyword">this</span>.getMessage() + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要的位置抛出自定义异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(<span class="number">20001</span>, <span class="string">&quot;出现自定义异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
</li>
<li><p>异常处理类中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(GuliException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">error</span><span class="params">(GuliException e)</span> </span>&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> R.error().setCode(e.getCode()).setMessage(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>08_统一日志处理</title>
    <url>/posts/45ca0965.html</url>
    <content><![CDATA[<h3 id="1-配置日志级别"><a href="#1-配置日志级别" class="headerlink" title="1. 配置日志级别"></a>1. 配置日志级别</h3><p>日志记录器（Logger）的行为是分等级的，分为 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL</p>
<p>默认情况加，Spring Boot 从控制台打印出来的日志级别只有 INFO 及以上级别，可以已配置日志级别</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure>

<p>这种方式只能打印在控制台上</p>
<h3 id="2-Logback-日志"><a href="#2-Logback-日志" class="headerlink" title="2. Logback 日志"></a>2. Logback 日志</h3><p>Spring Boot 内部使用 Logback 作为日志实现的框架，Logback 和 log4j 非常相似</p>
<blockquote>
<p>Logback 相对于 log4j 的优点：<a href="https://blog.csdn.net/caisini_vc/article/details/48551287">https://blog.csdn.net/caisini_vc/article/details/48551287</a></p>
</blockquote>
<a id="more"></a>

<h4 id="2-1-配置-Logback-日志"><a href="#2-1-配置-Logback-日志" class="headerlink" title="2.1 配置 Logback 日志"></a>2.1 配置 Logback 日志</h4><ol>
<li><p>删除配置文件中的日志级别配置</p>
</li>
<li><p>安装 IDEA 彩色日志插件：Grep Console</p>
</li>
<li><p>resources 文件夹中创建 logback-spring.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;10 seconds&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设 置为WARN，则低于WARN的信息都不会输出</span></span><br><span class="line"><span class="comment">        scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true</span></span><br><span class="line"><span class="comment">        scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认 单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟</span></span><br><span class="line"><span class="comment">        de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查 看logback运行状态。默认值为false</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;E:/Proj_Java/guli_parent/guli_log/edu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        彩色日志</span></span><br><span class="line"><span class="comment">        配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式</span></span><br><span class="line"><span class="comment">        magenta:洋红</span></span><br><span class="line"><span class="comment">        boldMagenta:粗红</span></span><br><span class="line"><span class="comment">        cyan:青色</span></span><br><span class="line"><span class="comment">        white:白色</span></span><br><span class="line"><span class="comment">        magenta:洋红</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出level为INFO日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO_FILE&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span></span><br><span class="line">                UTF-8</span><br><span class="line">            <span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MMdd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MMdd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR_FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MMdd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;仅有一个name属性， 一个可选的level和一个可选的addtivity属性</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打 印，其他还是正常DEBUG级别</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.guli&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR,ALL 和 OFF，默认是DEBUG 可以包含零个或多个appender元素</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR_FILE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN_FILE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-2-将错误日志输出到文件"><a href="#2-2-将错误日志输出到文件" class="headerlink" title="2.2 将错误日志输出到文件"></a>2.2 将错误日志输出到文件</h4><ol>
<li><p>在 GlobalExceptionHandler 上添加注解<code>@Slf4j</code></p>
</li>
<li><p>在异常输出的地方添加<code>log.error(e.getMessage());</code></p>
</li>
</ol>
<h4 id="2-3-将日志堆栈信息输出到文件"><a href="#2-3-将日志堆栈信息输出到文件" class="headerlink" title="2.3 将日志堆栈信息输出到文件"></a>2.3 将日志堆栈信息输出到文件</h4><ol>
<li><p>在 guli_framework_common 下创建 util 包，创建工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMessage</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        StringWriter sw = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter pw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            <span class="comment">// 将出错的栈信息输出到printWriter中</span></span><br><span class="line">            pw = <span class="keyword">new</span> PrintWriter(sw);</span><br><span class="line">            e.printStackTrace(pw);</span><br><span class="line">            pw.flush();</span><br><span class="line">            sw.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                pw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.error(ExceptionUtil.getMessage(e));</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>日志</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>09_ES6 入门</title>
    <url>/posts/d09cdc27.html</url>
    <content><![CDATA[<h3 id="1-ECMAScript-6-简介"><a href="#1-ECMAScript-6-简介" class="headerlink" title="1. ECMAScript 6 简介"></a>1. ECMAScript 6 简介</h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目 标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
<p><strong>ECMAScript 和 JavaScript 的关系</strong></p>
<p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提 交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262） 的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。 </p>
<p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）</p>
<hr>
<p><strong>ES6 与 ECMAScript 2015 的关系</strong></p>
<p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言 的下一个版本。 </p>
<p>ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。 </p>
<p>2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。 </p>
<p>因此，ES6 既是一个历史名词，也<strong>是一个泛指</strong>，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p>
<a id="more"></a>

<h3 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a>2. 基本语法</h3><h4 id="2-1-let-声明变量"><a href="#2-1-let-声明变量" class="headerlink" title="2.1 let 声明变量"></a>2.1 let 声明变量</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// var声明的变量没有局部作用域</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let声明的变量有局部作用域</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> b = <span class="number">1</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a); <span class="comment">// 0</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError: b is not defined</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">// var 可以声明多次</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let 只能声明一次</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> n = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> n = <span class="number">4</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(m); <span class="comment">// 2</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(n); <span class="comment">// Identifier &#x27;n&#x27; has already been declared</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-const-声明变量（只读变量）"><a href="#2-2-const-声明变量（只读变量）" class="headerlink" title="2.2 const 声明变量（只读变量）"></a>2.2 const 声明变量（只读变量）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 声明之后不允许改变</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> PI = <span class="string">&quot;3.1415926&quot;</span></span></span><br><span class="line"><span class="javascript">    PI = <span class="number">3</span> <span class="comment">// TypeError: Assignment to constant variable.</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 一但声明必须初始化，否则会报错</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> MY_AGE <span class="comment">// SyntaxError: Missing initializer in const declaration</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-解构赋值"><a href="#2-3-解构赋值" class="headerlink" title="2.3 解构赋值"></a>2.3 解构赋值</h4><p>解构赋值是对赋值运算符的扩展。</p>
<p>它是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。 </p>
<p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 数组解构</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传统</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> a = <span class="number">1</span>,</span></span><br><span class="line">        b = 2,</span><br><span class="line">        c = 3;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a, b, c);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ES6</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> [x, y, z] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(x, y, z);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 对象解构</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Helen&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传统</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name1 = user.name;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age1 = user.age;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(name1, age1);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ES6</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注意：解构的变量必须是user中的属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> &#123; name, age &#125; = user; </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(name, age);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-模板字符串"><a href="#2-4-模板字符串" class="headerlink" title="2.4 模板字符串"></a>2.4 模板字符串</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 多行字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> string1 = <span class="string">`Hey, </span></span></span><br><span class="line">    can you stop angry now?`;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(string1);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 字符串插入变量和表达式</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 变量名写在$&#123;&#125;中，$&#123;&#125;中可以放入JavaScript表达式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = <span class="string">&quot;Mike&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = <span class="number">27</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> info = <span class="string">`My Name is <span class="subst">$&#123;name&#125;</span>, I am <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next year.`</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(info);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 3. 字符串中调用函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">&quot;have fun!&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> string2 = <span class="string">`Game start, <span class="subst">$&#123;f()&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(string2);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-声明对象简写"><a href="#2-5-声明对象简写" class="headerlink" title="2.5 声明对象简写"></a>2.5 声明对象简写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age = <span class="number">12</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> name = <span class="string">&quot;Amy&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传统</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person1 = &#123; <span class="attr">age</span>: age, <span class="attr">name</span>: name &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person1);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ES6</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person2 = &#123; age, name &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person2); <span class="comment">//&#123;age: 12, name: &quot;Amy&quot;&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6-定义方法"><a href="#2-6-定义方法" class="headerlink" title="2.6 定义方法"></a>2.6 定义方法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传统</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person1 = &#123;</span></span><br><span class="line"><span class="javascript">        sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;Hi&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    person1.sayHi(); <span class="comment">//&quot;Hi&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ES6</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> person2 = &#123;</span></span><br><span class="line">        sayHi() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;Hi&quot;</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    person2.sayHi(); <span class="comment">//&quot;Hi&quot;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-7-对象拓展运算符"><a href="#2-7-对象拓展运算符" class="headerlink" title="2.7 对象拓展运算符"></a>2.7 对象拓展运算符</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 拷贝对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> someone = &#123; ...person1 &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(someone); <span class="comment">// &#123;name: &quot;Amy&quot;, age: 15&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 合并对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = &#123; <span class="attr">age</span>: <span class="number">15</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = &#123; <span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person2 = &#123; ...age, ...name &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person2); <span class="comment">// &#123;age: 15, name: &quot;Amy&quot;&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-8-箭头函数"><a href="#2-8-箭头函数" class="headerlink" title="2.8 箭头函数"></a>2.8 箭头函数</h4><p>基本语法：<code>参数 =&gt; 函数体</code></p>
<p><strong>箭头函数多用于匿名函数的定义</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 传统</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(f1(<span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ES6</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> f2 = <span class="function">(<span class="params">a</span>) =&gt;</span> a;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(f2(<span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当箭头函数没有参数或者有多个参数, 要用()括起来</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当箭头函数函数体有多行语句, 用&#123;&#125;包裹起来, 表示代码块</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当只有一行语句, 并且需要返回结果时, 可以省略&#123;&#125;, 结果会自动返回</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> f3 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> result = a + b;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> result;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(f3(<span class="number">6</span>, <span class="number">2</span>)); <span class="comment">// 8</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 前面代码相当于： var f4 = (a,b) =&gt; a+b</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>10_Vue 入门</title>
    <url>/posts/76780ad4.html</url>
    <content><![CDATA[<h3 id="1-初识-vue-js"><a href="#1-初识-vue-js" class="headerlink" title="1. 初识 vue.js"></a>1. 初识 vue.js</h3><ol>
<li><p>新建文件</p>
</li>
<li><p>vscode 快捷键<code>!</code>生成 html 代码</p>
</li>
<li><p>引入 vue.mix.js</p>
</li>
<li><p>开始写代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &#123;&#123;&#125;&#125; 插值表达式，绑定vue中的data数据 --&gt;</span></span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 绑定vue作用的范围</span></span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 定义页面中显示的模型数据</span></span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="javascript">                    message: <span class="string">&quot;Hello, vue.&quot;</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这就是<strong>声明式渲染</strong>：Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统，这里的核心思想就是没有繁琐的 DOM 操作，例如 jQuery 中，我们需要先找到div 节点，获取到 DOM 对象，然后进行一系列的节点操作。</p>
<a id="more"></a>

<h3 id="2-在-vs-code-中创建代码片段"><a href="#2-在-vs-code-中创建代码片段" class="headerlink" title="2. 在 vs code 中创建代码片段"></a>2. 在 vs code 中创建代码片段</h3><p>文件 =&gt;  首选项 =&gt; 用户代段 =&gt; 新建全局代码片段：vue-html.code-snippets</p>
<p><strong>注意：制作代码片段的时候，字符串中如果包含文件中复制过来的 Tab 要换成空格</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;vue htm&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;vuehtml&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &lt;head&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;meta charset=\&quot;UTF-8\&quot; /&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0\&quot; /&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;ie=edge\&quot; /&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;title&gt;Document&lt;/title&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &lt;/head&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &lt;body&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;div id=\&quot;app\&quot;&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;/div&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;script src=\&quot;vue.min.js\&quot;&gt;&lt;/script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;            new Vue(&#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;                el: &#x27;#app&#x27;,&quot;</span>,</span><br><span class="line">            <span class="string">&quot;                data: &#123;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;                    $1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;                &#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;             &#125;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        &lt;/script&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &lt;/body&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;/html&gt;&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;my vue template in html&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-基本语法"><a href="#3-基本语法" class="headerlink" title="3. 基本语法"></a>3. 基本语法</h3><h4 id="3-1-v-bind-单向绑定"><a href="#3-1-v-bind-单向绑定" class="headerlink" title="3.1 v-bind 单向绑定"></a>3.1 v-bind 单向绑定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果要将模型数据绑定在html属性中, 则使用v-bind指令, 此时title中显示的是模型数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind指令的简写形式 冒号（:）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                content: <span class="string">&quot;我是标题&quot;</span>,</span></span><br><span class="line"><span class="javascript">                message: <span class="string">&quot;页面加载于&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString(),</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-v-model-双向绑定"><a href="#3-2-v-model-双向绑定" class="headerlink" title="3.2 v-model 双向绑定"></a>3.2 v-model 双向绑定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind:value只能进行单向的数据渲染 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;searchMap.keyWord&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-model 可以进行双向的数据绑定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;searchMap.keyWord&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; searchMap.keyWord &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                searchMap: &#123;</span><br><span class="line"><span class="javascript">                    keyWord: <span class="string">&quot;Horsen&quot;</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-v-on-事件"><a href="#3-3-v-on-事件" class="headerlink" title="3.3 v-on 事件"></a>3.3 v-on 事件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-on指令绑定事件，click指定绑定的事件类型，事件发生时调用vue中methods节点中定义的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;search()&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;f1()&quot;</span>&gt;</span>简写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                searchMap: &#123;</span><br><span class="line"><span class="javascript">                    keyWord: <span class="string">&quot;Horsen&quot;</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                search() &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;search...&quot;</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                f1() &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;f1...&quot;</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-修饰符"><a href="#3-4-修饰符" class="headerlink" title="3.4 修饰符"></a>3.4 修饰符</h4><p>修饰符（Modifiers）是以半角句号（.）指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。 </p>
<p>例如，<code>.prevent</code>修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()，即阻止事件原本的默认行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            修饰符用于指出一个指令应该以特殊方式绑定</span></span><br><span class="line"><span class="comment">            这里的.prevent修饰符告诉v-on指令对于触发的事件调用js的event.preventDefault()</span></span><br><span class="line"><span class="comment">            即阻止表单提交的默认行为</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;save&quot;</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.username&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                user: &#123;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                onSubmit() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">this</span>.user.username) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;提交表单&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;请输入用户名&quot;</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-v-if-条件渲染"><a href="#3-5-v-if-条件渲染" class="headerlink" title="3.5 v-if 条件渲染"></a>3.5 v-if 条件渲染</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ok&quot;</span> /&gt;</span>同意许可协议</span><br><span class="line">        <span class="comment">&lt;!-- v:if条件指令：还有v-else、v-else-if 切换开销大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>if：Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                ok: <span class="literal">false</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用<code>v-show</code>实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v:show条件指令 初始渲染开销大 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>show：Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!ok&quot;</span>&gt;</span>no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>v-if</code>是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li>
<li><code>v-if</code>也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会 开始渲染条件块。 </li>
<li>相比之下，<code>v-show</code>就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</li>
<li>一般来说，<code>v-if</code>有更高的切换开销，而<code>v-show</code>有更高的初始渲染开销。<strong>因此，如果需要非常频繁地切换，则使用<code>v-show</code>较好；如果在运行时条件很少改变，则使用<code>v-if</code>较好。</strong></li>
</ul>
<h4 id="3-6-v-for-列表渲染"><a href="#3-6-v-for-列表渲染" class="headerlink" title="3.6 v-for 列表渲染"></a>3.6 v-for 列表渲染</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in userList&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index&#125;&#125;: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                userList: [</span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">username</span>: <span class="string">&quot;helen&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">username</span>: <span class="string">&quot;peter&quot;</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">username</span>: <span class="string">&quot;andy&quot;</span>, <span class="attr">age</span>: <span class="number">38</span> &#125;,</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-组件"><a href="#4-组件" class="headerlink" title="4. 组件"></a>4. 组件</h3><h4 id="4-1-局部组件"><a href="#4-1-局部组件" class="headerlink" title="4.1 局部组件"></a>4.1 局部组件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">Navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            components: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 组件的名字</span></span></span><br><span class="line">                Navbar: &#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">// 组件的内容</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    template: &quot;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&quot;,</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-全局组件"><a href="#4-2-全局组件" class="headerlink" title="4.2 全局组件"></a>4.2 全局组件</h4><ol>
<li><p>定义全局组件：components/Navbar.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 定义全局组件</span><br><span class="line">Vue.component(&#x27;Navbar&#x27;, &#123; </span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Navbar</span>&gt;</span><span class="tag">&lt;/<span class="name">Navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;components/Navbar.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h3><ol>
<li><p>引入 js（注意顺序，先 vue 再 vue-router）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/student&quot;</span>&gt;</span>会员管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/teacher&quot;</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 定义（路由）组件 可以从其他文件import进来</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> Welcome = &#123; <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;欢迎&lt;/div&gt;&quot;</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> Student = &#123; <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;student list&lt;/div&gt;&quot;</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> Teacher = &#123; <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;teacher list&lt;/div&gt;&quot;</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 定义路由 每个路由应该映射一个组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置默认指向的路径</span></span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/welcome&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&quot;/welcome&quot;</span>, <span class="attr">component</span>: Welcome &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&quot;/student&quot;</span>, <span class="attr">component</span>: Student &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&quot;/teacher&quot;</span>, <span class="attr">component</span>: Teacher &#125;,</span></span><br><span class="line">    ];</span><br><span class="line"><span class="javascript">    <span class="comment">// 3. 创建router实例，然后传 `routes` 配置</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="javascript">        routes, <span class="comment">// （缩写）相当于 routes: routes</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="comment">// 4. 创建和挂载根实例 从而让整个应用都有路由功能</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        router,</span><br><span class="line">    &#125;); </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>10_Axios 入门</title>
    <url>/posts/8ecad9eb.html</url>
    <content><![CDATA[<p>axios 是独立于 vue 的一个项目，基于promise 用于浏览器和 node.js 的 http 客户端</p>
<ul>
<li>在浏览器中可以帮助我们完成 ajax 请求的发送</li>
<li>在 node.js 中可以向远程接口发送请求</li>
</ul>
<h3 id="1-获取数据"><a href="#1-获取数据" class="headerlink" title="1. 获取数据"></a>1. 获取数据</h3><ol>
<li><p>编写 data.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;success&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Lucy&quot;</span>, <span class="attr">&quot;age&quot;</span>: <span class="number">20</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Marry&quot;</span>, <span class="attr">&quot;age&quot;</span>: <span class="number">30</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Jack&quot;</span>, <span class="attr">&quot;age&quot;</span>: <span class="number">40</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入 axios，编写 html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 固定的结构</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 在data定义变量和初始值</span></span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 定义变量 值空数组</span></span></span><br><span class="line">                userList: [],</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">// 页面渲染之前执行</span></span></span><br><span class="line">            created() &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 调用定义的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.getUseList();</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">// 编写具体的方法</span></span></span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 查询所有用户</span></span></span><br><span class="line">                getUseList() &#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">// 使用axios发送ajax请求</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 模板: axios.提交方式(&quot;请求接口路径&quot;).then(箭头函数).catch(箭头函数)</span></span></span><br><span class="line">                    axios</span><br><span class="line"><span class="javascript">                        .get(<span class="string">&quot;data.json&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 请求成功执行then方法</span></span></span><br><span class="line"><span class="javascript">                        .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(response);</span></span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="javascript">                        <span class="comment">// 请求失败执行catch方法</span></span></span><br><span class="line"><span class="javascript">                        .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(error);</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-显示数据"><a href="#2-显示数据" class="headerlink" title="2. 显示数据"></a>2. 显示数据</h3><ol>
<li><p>修改 then() 方法</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.then((response) &#x3D;&gt; &#123;</span><br><span class="line">    this.userList &#x3D; response.data.data.items;</span><br><span class="line">    console.log(this.userList);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 v-for</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;user in userList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>13_模块化</title>
    <url>/posts/b26dd3ae.html</url>
    <content><![CDATA[<h3 id="1-CommonJS-模块化规范"><a href="#1-CommonJS-模块化规范" class="headerlink" title="1. CommonJS 模块化规范"></a>1. CommonJS 模块化规范</h3><p><strong>CommonJS 使用<code>exports</code>和<code>require</code>来导出、导入模块</strong></p>
<ol>
<li><p>导出模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建js方法</span></span><br><span class="line"><span class="comment">// 定义成员</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> subtract = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) - <span class="built_in">parseInt</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> multiply = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) * <span class="built_in">parseInt</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> divide = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) / <span class="built_in">parseInt</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出成员</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    sum,</span><br><span class="line">    subtract,</span><br><span class="line">    multiply,</span><br><span class="line">    divide</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用01.js中的方法</span></span><br><span class="line"><span class="comment">// 引入01.js</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&quot;./01.js&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = m.sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> result2 = m.subtract(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result1, result2)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-ES6-模块化规范"><a href="#2-ES6-模块化规范" class="headerlink" title="2. ES6 模块化规范"></a>2. ES6 模块化规范</h3><p><strong>ES6 使用<code>export</code>和<code>import</code>来导出、导入模块</strong></p>
<ol>
<li><p>导出模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取数据列表&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;保存数据&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只取需要的方法即可，多个方法用逗号分隔 </span></span><br><span class="line"><span class="keyword">import</span> &#123; getList, save &#125; <span class="keyword">from</span> <span class="string">&quot;./01.js&quot;</span></span><br><span class="line">getList()</span><br><span class="line">save()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意：这时的程序无法运行的，因为 ES6 的模块化无法在 Node.js 中执行，需要用 Babel 编辑成 ES5 后再执行。</strong></p>
<h3 id="3-ES6-模块化的另一种写法"><a href="#3-ES6-模块化的另一种写法" class="headerlink" title="3. ES6 模块化的另一种写法"></a>3. ES6 模块化的另一种写法</h3><ol>
<li><p>导出模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    getList() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;获取数据列表2&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    save() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;保存数据2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;./02.js&quot;</span> </span><br><span class="line">user.getList() </span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>12_Node.js、NPM 和 Babel</title>
    <url>/posts/aca7959.html</url>
    <content><![CDATA[<h3 id="1-Node-js-简介"><a href="#1-Node-js-简介" class="headerlink" title="1. Node.js 简介"></a>1. Node.js 简介</h3><p><strong>什么是 Node.js</strong></p>
<p>简单的说 Node.js 就是运行在服务端的 JavaScript。 Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度 非常快，性能非常好。</p>
<p><strong>Node.js 有什么用</strong></p>
<p>如果你是一个前端程序员，你不懂得像 PHP、Python 或 Ruby 等动态编程语言，然后你想创建自己的服务，那么 Node.js 是一个非常好的选择。 Node.js 是运行在服务端的 JavaScript，如果你熟悉 Javascript，那么你将会很容易的学会 Node.js。 当然，如果你是后端程序员，想部署一些高性能的服务，那么学习 Node.js 也是一个非常好的选择。</p>
<h3 id="2-NPM-简介"><a href="#2-NPM-简介" class="headerlink" title="2. NPM 简介"></a>2. NPM 简介</h3><p><strong>什么是 NPM</strong></p>
<p>NPM 全称 Node Package Manager，是 Node.js 包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的，也是 Node.js 的包管理工具，相当于前端的 Maven。</p>
<p><strong>npm 工具的安装位置</strong></p>
<p>我们通过 npm 可以很方便地下载 js 库，管理前端工程。 </p>
<p>Node.js 默认安装的 npm 包和工具的位置：Node.js目录\node_modules </p>
<p>在这个目录下可以看见 npm目录，npm 本身就是被 NPM 包管理器管理的一个工具，说明 Node.js 已经集成了npm 工具</p>
<a id="more"></a>

<h4 id="2-1-使用-npm-管理项目"><a href="#2-1-使用-npm-管理项目" class="headerlink" title="2.1 使用 npm 管理项目"></a>2.1 使用 npm 管理项目</h4><ol>
<li><p>创建文件夹 npm_demo</p>
</li>
<li><p>项目初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  建立一个空文件夹，在命令提示符进入该文件夹 执行命令初始化 </span></span><br><span class="line">npm init </span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照提示输入相关信息，如果是用默认值则直接回车即可。 <span class="comment"># name: 项目名称 </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> version: 项目版本号 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description: 项目描述 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> keywords: &#123;Array&#125;关键词，便于用户搜索到我们的项目 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们之后也可以根据需要进行修改。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想直接生成 package.json 文件，那么可以使用命令 </span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-2-修改-npm-镜像"><a href="#2-2-修改-npm-镜像" class="headerlink" title="2.2 修改 npm 镜像"></a>2.2 修改 npm 镜像</h4><p>NPM 官方的管理的包都是从 <a href="http://npmjs.com下载的,但是这个网站在国内速度很慢./">http://npmjs.com下载的，但是这个网站在国内速度很慢。</a> </p>
<p>这里推荐使用淘宝 NPM 镜像 <a href="http://npm.taobao.org/">http://npm.taobao.org/</a> ，淘宝 NPM 镜像是一个完整 npmjs.com 镜像， 同步频率目前为 10分钟一次，以保证尽量与官方服务同步。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载 </span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看npm配置信息 </span></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<h4 id="2-3-npm-install-命令"><a href="#2-3-npm-install-命令" class="headerlink" title="2.3 npm install 命令"></a>2.3 npm install 命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 npm install 安装依赖包的最新版</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 模块安装的位置：项目目录\node_modules </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装会自动在项目目录下添加 package-lock.json 文件，这个文件帮助锁定安装包的版本 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同时package.json 文件中，依赖包会被添加到dependencies节点下，类似maven中的 &lt;dependencies&gt; </span></span><br><span class="line">npm install jquery </span><br><span class="line"><span class="meta">#</span><span class="bash"> npm管理的项目在备份和传输的时候一般不携带node_modules文件夹 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据package.json中的配置下载依赖，初始化项目</span></span><br><span class="line">npm install  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果安装时想指定特定的版本 </span></span><br><span class="line">npm install jquery@2.1.x </span><br><span class="line"><span class="meta">#</span><span class="bash"> devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 -D 参数将依赖添加到devDependencies节点 </span></span><br><span class="line">npm install --save-dev eslint </span><br><span class="line"><span class="meta">#</span><span class="bash"> 或 </span></span><br><span class="line">npm install -D eslint </span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局安装 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一些命令行工具常使用全局安装的方式 </span></span><br><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure>

<h4 id="2-4-其他命令"><a href="#2-4-其他命令" class="headerlink" title="2.4 其他命令"></a>2.4 其他命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新包（更新到最新版本） </span></span><br><span class="line">npm update 包名 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局更新 </span></span><br><span class="line">npm update -g 包名 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载包 </span></span><br><span class="line">npm uninstall 包名 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局卸载 </span></span><br><span class="line">npm uninstall -g 包名</span><br></pre></td></tr></table></figure>

<h3 id="3-Babel-转码器"><a href="#3-Babel-转码器" class="headerlink" title="3. Babel 转码器"></a>3. Babel 转码器</h3><h4 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h4><p>Babel 是一个广泛使用的转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行执行。 这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p>
<h4 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h4><ol>
<li><p>安装 babel 工具</p>
<p>Babel 提供 babel-cli 工具，用于命令行转码。它的安装命令如下：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global babel-cli</span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否安装成功 </span></span><br><span class="line">babel --version</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 js 文件，使用 es6</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转码前 </span></span><br><span class="line"><span class="comment">// 定义数据</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 将数组的每个元素 +1 </span></span><br><span class="line">input = input.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(input)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 babel 配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 es2015 转码器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure>
</li>
<li><p>转码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 转码结果写入一个文件 </span></span><br><span class="line">mkdir dist1 </span><br><span class="line"><span class="meta">#</span><span class="bash"> --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">babel es6/example.js --out-file dist/compiled.js # 或者</span><br><span class="line">babel es6/example.js -o dist/compiled.js</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整个目录转码 </span></span><br><span class="line">mkdir dist </span><br><span class="line"><span class="meta">#</span><span class="bash"> --out-dir 或 -d 参数指定输出目录 </span></span><br><span class="line">babel es6 --out-dir dist </span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">babel es6 -d dist</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Node.js</tag>
        <tag>NPM</tag>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>14_Webpack</title>
    <url>/posts/70431d06.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按 照指定的规则生成对应的静态资源。 </p>
<p>从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 </p>
<img src="/posts/70431d06/image-20200911193010054.png" class>

<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3-初始化项目"><a href="#3-初始化项目" class="headerlink" title="3. 初始化项目"></a>3. 初始化项目</h3><ol>
<li><p>进入 webpack 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建 src 文件夹</p>
</li>
<li><p>src 中新建 commons.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.info = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>src 中新建 utils.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>src 中新建 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./common&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);</span><br><span class="line"></span><br><span class="line">common.info(<span class="string">&#x27;Hello, world!&#x27;</span> + utils.add(<span class="number">100</span>, <span class="number">200</span>));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-JS-打包"><a href="#4-JS-打包" class="headerlink" title="4. JS 打包"></a>4. JS 打包</h3><ol>
<li><p>webpack 目录下创建配置文件 webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Node.js内置模块 </span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 配置入口文件 </span></span><br><span class="line">    entry: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出路径，__dirname：当前文件所在路径 </span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 输出文件</span></span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行编译命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">webpack # 有黄色警告</span><br><span class="line">webpack --mode=development # 没有警告</span><br></pre></td></tr></table></figure>

<p>也可以配置项目的npm运行命令，修改 package.json 文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123; </span><br><span class="line">    <span class="comment">//..., </span></span><br><span class="line">    &quot;dev&quot;: &quot;webpack --mode=development&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 npm 命令执行打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack 目录下创建 index.html，引用 bundle.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-CSS-打包"><a href="#5-CSS-打包" class="headerlink" title="5. CSS 打包"></a>5. CSS 打包</h3><ol>
<li><p>安装 style-loader 和 css-loader</p>
<p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。 </p>
<p>Loader 可以理解为是模块和资源的转换器。 </p>
<p>首先我们需要安装相关 Loader 插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识 css。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Node.js内置模块 </span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 打包规则应用到以css结尾的文件上</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>src 文件夹创建 style.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>:pink; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 main.js，引入 css</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./style.css&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">webpack --mode=development</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>15_后台系统前端项目创建</title>
    <url>/posts/2b6caa56.html</url>
    <content><![CDATA[<h3 id="1-vue-element-admin"><a href="#1-vue-element-admin" class="headerlink" title="1. vue-element-admin"></a>1. vue-element-admin</h3><h4 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h4><p>vue-element-admin 是基于 element-ui 的一套后台管理系统集成方案</p>
<blockquote>
<p>功能：https:#panjiachen.github.io/vue-element-admin-site/zh/guide/</p>
<p>GitHub地址：https:#github.com/PanJiaChen/vue-element-admin</p>
<p>项目在线预览：https:#panjiachen.gitee.io/vue-element-admin</p>
</blockquote>
<h4 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压压缩包 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录 </span></span><br><span class="line">cd vue-element-admin-master </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖 </span></span><br><span class="line">npm install </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 执行后，浏览器自动弹出并访问 http:<span class="comment">#localhost:9527/ </span></span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-vue-admin-template"><a href="#2-vue-admin-template" class="headerlink" title="2. vue-admin-template"></a>2. vue-admin-template</h3><h4 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h4><p>vueAdmin-template 是基于 vue-element-admin 的一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。 </p>
<blockquote>
<p>GitHub地址：https:#github.com/PanJiaChen/vue-admin-template </p>
</blockquote>
<p><strong>建议：</strong>你可以在 vue-admin-template 的基础上进行二次开发，把 vue-element-admin当做工具箱，想要什么功能或者组件就去 vue-element-admin 那里复制过来</p>
<h4 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压压缩包 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录 </span></span><br><span class="line">cd vue-admin-template-master </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖 </span></span><br><span class="line">npm install </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 执行后，浏览器自动弹出并访问http:<span class="comment">#localhost:9528/ </span></span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h3 id="3-项目的创建和基本配置"><a href="#3-项目的创建和基本配置" class="headerlink" title="3. 项目的创建和基本配置"></a>3. 项目的创建和基本配置</h3><ol>
<li><p>创建项目，将 vue-admin-template-master 重命名为 guli-admin</p>
</li>
<li><p>关闭 ESLint 检查，config/index.js 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useEslint: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改项目信息，package.json</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;guli-admin&quot;</span>,</span><br><span class="line">    ......</span><br><span class="line">    &quot;description&quot;: &quot;谷粒学院后台管理系统&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;Helen &lt;55317332@qq.com&gt;&quot;,</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要修改端口号，在 config/index.js 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">port: <span class="number">9528</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-项目的目录结构"><a href="#4-项目的目录结构" class="headerlink" title="4. 项目的目录结构"></a>4. 项目的目录结构</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build # 构建脚本 </span><br><span class="line">├── config # 全局配置 </span><br><span class="line">├── node_modules # 项目依赖模块 </span><br><span class="line">├── src # 项目源代码</span><br><span class="line">│    ├── api # 各种接口 </span><br><span class="line">│    ├── assets # 图片等资源 </span><br><span class="line">│    ├── components # 各种公共组件，非公共组件在各自view下维护 </span><br><span class="line">│    ├── icons #svg icon </span><br><span class="line">│    ├── router # 路由表 </span><br><span class="line">│    ├── store # 存储 </span><br><span class="line">│    ├── styles # 各种样式 </span><br><span class="line">│    ├── utils # 公共工具，非公共工具，在各自view下维护 </span><br><span class="line">│    ├── views # 各种layout </span><br><span class="line">│    ├── App.vue #项目顶层组件</span><br><span class="line">│    ├── main.js #项目入口文件 </span><br><span class="line">│    └── permission.js #认证入口</span><br><span class="line">├── static # 静态资源 </span><br><span class="line">└── package.json # 项目信息和依赖配置</span><br></pre></td></tr></table></figure>

<h3 id="5-页面修改"><a href="#5-页面修改" class="headerlink" title="5. 页面修改"></a>5. 页面修改</h3><ol>
<li><p>修改 src/views/login/index.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第4行 --&gt;</span><br><span class="line">&lt;h3 class&#x3D;&quot;title&quot;&gt;谷粒学院后台管理系统&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;!-- 第28行 --&gt;</span><br><span class="line">&lt;el-button :loading&#x3D;&quot;loading&quot; type&#x3D;&quot;primary&quot; style&#x3D;&quot;width:100%;&quot; @click.native.prevent&#x3D;&quot;handleLogin&quot;&gt;</span><br><span class="line">    登录</span><br><span class="line">&lt;&#x2F;el-button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>谷粒学院后台管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>国际化设置，修改 src/main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第7行</span></span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span> <span class="comment">// lang i18n</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复制 favicon.ico 到根目录</p>
</li>
<li><p>导航栏文字，修改 src/views/layout/components/Navbar.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第13行 --&gt;</span><br><span class="line">&lt;el-dropdown-item&gt;</span><br><span class="line">    首页</span><br><span class="line">&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">&lt;!-- 第17行 --&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;display:block;&quot; @click&#x3D;&quot;logout&quot;&gt;退出&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>面包屑文字，修改 src/components/Breadcrumb/index.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 第38行 --&gt;</span><br><span class="line">matched &#x3D; [&#123; path: &#39;&#x2F;dashboard&#39;, meta: &#123; title: &#39;首页&#39; &#125;&#125;].concat(matched)</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Vue</tag>
        <tag>vue-element-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>17_讲师_添加相关路由</title>
    <url>/posts/a0437db0.html</url>
    <content><![CDATA[<h3 id="1-复制-icon-图标"><a href="#1-复制-icon-图标" class="headerlink" title="1. 复制 icon 图标"></a>1. 复制 icon 图标</h3><p>将 vue-element-admin-master/src/icons/svg 中的图标复制到 guli-admin项目中</p>
<h3 id="2-修改路由"><a href="#2-修改路由" class="headerlink" title="2. 修改路由"></a>2. 修改路由</h3><p>修改 src/router/index.js 文件，重新定义 constantRouterMap</p>
<p><strong>注意：每个路由的 name 不能相同</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>), <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>), <span class="attr">hidden</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="comment">// 首页</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      path: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;谷粒学院后台首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 讲师管理</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/edu/teacher&#x27;</span>,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: <span class="string">&#x27;/edu/teacher/list&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Teacher&#x27;</span>,</span><br><span class="line">    meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;讲师管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;peoples&#x27;</span> &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;EduTeacherList&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/list&#x27;</span>),</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;讲师列表&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;create&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;EduTeacherCreate&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/form&#x27;</span>),</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;添加讲师&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;edit/:id&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;EduTeacherEdit&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/teacher/form&#x27;</span>),</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;编辑讲师&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        hidden: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 404</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    hidden: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3-创建-vue-组件"><a href="#3-创建-vue-组件" class="headerlink" title="3. 创建 vue 组件"></a>3. 创建 vue 组件</h3><p>在 src/views 文件夹下创建以下文件夹和文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── src</span><br><span class="line">     └── views </span><br><span class="line">          └── edu </span><br><span class="line">               └── teacher </span><br><span class="line">                    ├── form.vue</span><br><span class="line">                    └── list.vue</span><br></pre></td></tr></table></figure>

<ul>
<li><p>form.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;app-container&quot;&gt;</span><br><span class="line">        讲师表单</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>list.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;app-container&quot;&gt;</span><br><span class="line">        讲师列表</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>16_处理登录请求</title>
    <url>/posts/6258c8f5.html</url>
    <content><![CDATA[<h3 id="1-修改前端"><a href="#1-修改前端" class="headerlink" title="1. 修改前端"></a>1. 修改前端</h3><ol>
<li><p>修改 config/dev.env.js，修改请求地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">&#x27;./prod.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">  <span class="comment">//BASE_API: &#x27;&quot;https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin&quot;&#x27;,</span></span><br><span class="line">  BASE_API: <span class="string">&#x27;&quot;http://localhost:8001&quot;&#x27;</span>,<span class="comment">// 修改</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 src/api/login.js，修改请求 url</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/edu/user/login&#x27;</span>,<span class="comment">// 修改</span></span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/edu/user/info&#x27;</span>,<span class="comment">// 修改</span></span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params: &#123; token &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/user/logout&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-修改后端"><a href="#2-修改后端" class="headerlink" title="2. 修改后端"></a>2. 修改后端</h3><p>新建一个 Controller，注意<code>@CrossOrigin</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/edu/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success().setData(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success()</span><br><span class="line">                .setData(<span class="string">&quot;roles&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setData(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setData(<span class="string">&quot;avatar&quot;</span>, <span class="string">&quot;https://horsenliu.gitee.io/images/avatar.png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Spring Boot</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>18_讲师_管理列表组件</title>
    <url>/posts/75d542ba.html</url>
    <content><![CDATA[<h3 id="1-分页列表"><a href="#1-分页列表" class="headerlink" title="1. 分页列表"></a>1. 分页列表</h3><ol>
<li><p>定义 api</p>
<p>创建文件 src/api/edu/teacher.js</p>
<p><strong>注意：</strong>api_name 的末尾必须有一个<code>/</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> api_name = <span class="string">&#x27;/edu/teachers/&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getPageList(page, limit, searchObj) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/<span class="subst">$&#123;page&#125;</span>/<span class="subst">$&#123;limit&#125;</span>`</span>,</span><br><span class="line">      method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      data: searchObj</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化 vue 组件</p>
<p>修改 src/views/edu/teacher/list.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import teacher from &#39;@&#x2F;api&#x2F;edu&#x2F;teacher&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F; 定义数据</span><br><span class="line">  data() &#123;&#125;,</span><br><span class="line">  &#x2F;&#x2F; 当前页面加载时获取数据</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.fetchData();</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 调用api层获取数据库中的数据</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetchData() &#123;</span><br><span class="line">      console.log(&#39;加载列表&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>定义 data</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数据</span></span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    listLoading: <span class="literal">true</span>, <span class="comment">// 是否显示loading信息</span></span><br><span class="line">    list: <span class="literal">null</span>, <span class="comment">// 数据列表</span></span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">    page: <span class="number">1</span>, <span class="comment">// 页码</span></span><br><span class="line">    limit: <span class="number">10</span>, <span class="comment">// 每页记录数</span></span><br><span class="line">    searchObj: &#123;&#125; <span class="comment">// 查询条件</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义 methods</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用api层获取数据库中的数据</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  fetchData() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;加载列表&#x27;</span>);</span><br><span class="line">    teacher</span><br><span class="line">      .getPageList(<span class="built_in">this</span>.page, <span class="built_in">this</span>.limit, <span class="built_in">this</span>.searchObj)</span><br><span class="line">      <span class="comment">// 请求成功</span></span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// debuggers设置断点调试</span></span><br><span class="line">        <span class="keyword">if</span> (response.success === <span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.list = response.data.rows;</span><br><span class="line">          <span class="built_in">this</span>.total = response.data.total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.listLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>渲染表格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- :data 用于存放请求数据回来的数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-loading</span>=<span class="string">&quot;listLoading&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">element-lodaing-text</span>=<span class="string">&quot;数据加载中&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">border</span></span></span><br><span class="line"><span class="tag">  <span class="attr">fit</span></span></span><br><span class="line"><span class="tag">  <span class="attr">highlight-current-row</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stripe</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;70&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里取到当前单元格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- scope.$index 就是索引 --&gt;</span></span><br><span class="line">      &#123;&#123; (page - 1) * limit + scope.$index + 1 &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;名称&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;头衔&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;80&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- scope.row 直接取到该单元格对象，就是数组里的元素对象，即是list[scope.$index] --&gt;</span></span><br><span class="line">      &#123;&#123; scope.row.level===1?&#x27;高级讲师&#x27;:&#x27;首席讲师&#x27; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;intro&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;资历&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;gmtCreate&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;添加时间&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;160&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;sort&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;排序&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>分页组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">background</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:hide-on-single-page</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:current-page</span>=<span class="string">&quot;page&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-size</span>=<span class="string">&quot;limit&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;padding: 30px 0; text-align: center;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">layout</span>=<span class="string">&quot;total, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">current-change</span>=<span class="string">&quot;fetchData&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改方法，添加参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  fetchData(page = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;加载列表&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.page = page;</span><br><span class="line">    <span class="built_in">this</span>.listLoading = <span class="literal">true</span>;</span><br><span class="line">    teacher</span><br><span class="line">      .getPageList(<span class="built_in">this</span>.page, <span class="built_in">this</span>.limit, <span class="built_in">this</span>.searchObj)</span><br><span class="line">      <span class="comment">// 请求成功</span></span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// debuggers设置断点调试</span></span><br><span class="line">        <span class="keyword">if</span> (response.success === <span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.list = response.data.rows;</span><br><span class="line">          <span class="built_in">this</span>.total = response.data.total;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.listLoading = <span class="literal">false</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="2-顶部查询表单"><a href="#2-顶部查询表单" class="headerlink" title="2. 顶部查询表单"></a>2. 顶部查询表单</h3><p><strong>注意：</strong><br>element-ui 的 date-picker 组件默认绑定的时间值是默认世界标准时间，和中国时间差 8 小时，设置<code>value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</code>改变绑定的值</p>
<ol>
<li><p>修改 api，提交方式改为 post</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 讲师列表(条件分页查询)</span></span><br><span class="line">getPageList(page, limit, searchObj) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/<span class="subst">$&#123;page&#125;</span>/<span class="subst">$&#123;limit&#125;</span>`</span>,</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data: searchObj</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加表单组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;searchObj.name&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;讲师名&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;searchObj.level&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;讲师头衔&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">&quot;高级讲师&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span>          </span><br><span class="line">      <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">&quot;首席讲师&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;添加时间&quot;</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">       <span class="attr">v-model</span>=<span class="string">&quot;searchObj.begin&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">placeholder</span>=<span class="string">&quot;选择开始时间&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-time</span>=<span class="string">&quot;00:00:00&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span>      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">       <span class="attr">v-model</span>=<span class="string">&quot;searchObj.end&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">placeholder</span>=<span class="string">&quot;选择截止时间&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-time</span>=<span class="string">&quot;00:00:00&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span>      </span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;fetchData()&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;default&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;resetData()&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>清空<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新增清空方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resetData() &#123;</span><br><span class="line">  <span class="built_in">this</span>.searchObj = &#123;&#125;;</span><br><span class="line">  <span class="built_in">this</span>.fetchData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h3><ol>
<li><p>添加按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;removeDataById(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义 api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据ID删除讲师</span></span><br><span class="line">removeById(teacherId) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123; </span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/<span class="subst">$&#123;teacherId&#125;</span>`</span>, </span><br><span class="line">    method: <span class="string">&#x27;delete&#x27;</span> </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义 methods</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">removeDataById(id) &#123;</span><br><span class="line">  <span class="comment">// debugger</span></span><br><span class="line">  <span class="built_in">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除该记录，是否继续？&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">    confirmButtonText: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">    cancelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">    type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">    <span class="comment">// 点击确定执行then()</span></span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> teacher.removeById(id);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.fetchData();</span><br><span class="line">      <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;删除成功!&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 点击取消执行catch()</span></span><br><span class="line">    .catch(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response === <span class="string">&#x27;cancel&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">          type: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">          message: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">          type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">          message: <span class="string">&#x27;删除失败&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>19_讲师_管理表单组件</title>
    <url>/posts/77fd642e.html</url>
    <content><![CDATA[<h3 id="1-新增"><a href="#1-新增" class="headerlink" title="1. 新增"></a>1. 新增</h3><ol>
<li><p>定义 api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增讲师</span></span><br><span class="line">save(teacher) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: api_name,</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data: teacher</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化组件，设计表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="line">    讲师表单</span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;讲师名称&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;teacher.name&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;讲师排序&quot;</span>&gt;</span></span><br><span class="line">        &lt;&lt;el-input-number</span><br><span class="line">          v-model=&quot;teacher.sort&quot;</span><br><span class="line">          controls-position=&quot;right&quot;</span><br><span class="line">          min=&quot;0&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;讲师头衔&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;teacher.level&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            数据类型一定要和取出的json中的一致, 否则没法回填</span></span><br><span class="line"><span class="comment">            因此, 这里value使用动态绑定的值, 保证其数据类型是number</span></span><br><span class="line"><span class="comment">          --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">label</span>=<span class="string">&quot;高级讲师&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">label</span>=<span class="string">&quot;首席讲师&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;讲师资历&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;teacher.career&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;讲师介绍&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;teacher.intro&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;textarea&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:rows</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 讲师头像: TODO --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:disable</span>=<span class="string">&quot;saveBtnDisabled&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;saveOrUpdate&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>保存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 axios</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      teacher: &#123;</span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">        sort: 0,</span><br><span class="line">        level: 1,</span><br><span class="line"><span class="javascript">        career: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        intro: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        avatar: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      saveBtnDisabled: <span class="literal">false</span> <span class="comment">// 保存按钮是否禁用</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    saveOrUpdate() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.saveBtnDisabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.saveData();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    saveData() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实现功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">saveData() &#123;</span><br><span class="line">  teacher</span><br><span class="line">    .save(<span class="built_in">this</span>.teacher)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;保存成功&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 保存成功跳转到表格页面</span></span><br><span class="line">      <span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/edu/teacher&#x27;</span> &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;保存失败&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p><strong>遇到一个坑：</strong></p>
<p>因为我用了 RESTful 风格设计请求，所以增加讲师的请求</p>
<ul>
<li>在 Controller 中为<code>@PostMapping(&quot;/&quot;)</code></li>
<li>地址为<code>http://localhost:8080/edu/teachers/</code></li>
<li>而 api 中的常量是<code>const api_name = &#39;/edu/teachers&#39;;</code></li>
</ul>
<p>由于最后少了一个<code>/</code>，导致 swagger 测试时没问题，但前端请求会有 404 问题。</p>
<h3 id="2-回显"><a href="#2-回显" class="headerlink" title="2. 回显"></a>2. 回显</h3><ol>
<li><p>添加一个修改按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;/edu/teacher/edit/&#x27;+scope.row.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    &gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">round</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;removeDataById(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义 api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过id获取讲师</span></span><br><span class="line">getById(id) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件中调用 api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过id获取讲师</span></span><br><span class="line">fetchDataById(id) &#123;</span><br><span class="line">  teacher</span><br><span class="line">    .getById(id)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.teacher = response.data.teacher;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;获取数据失败&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面渲染前调用方法</p>
<p><strong>注意：</strong>是<code>$route</code>而不是<code>$router</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="comment">// params表示路由中的参数, 指 path: &#x27;edit/:id&#x27; 中类似:id的参数</span></span><br><span class="line">  <span class="comment">// 注意是route不是router</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.$route.params &amp;&amp; <span class="built_in">this</span>.$route.params.id) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">this</span>.$route.params.id;</span><br><span class="line">    <span class="built_in">this</span>.fetchDataById(id);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-更新"><a href="#3-更新" class="headerlink" title="3. 更新"></a>3. 更新</h3><ol>
<li><p>定义 api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改讲师</span></span><br><span class="line">update(teacher) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;api_name&#125;</span>/<span class="subst">$&#123;teacher.id&#125;</span>`</span>,</span><br><span class="line">    method: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data: teacher</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件中调用 api</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updateData() &#123;</span><br><span class="line">  <span class="built_in">this</span>.saveBtnDisabled = <span class="literal">true</span>;</span><br><span class="line">  teacher</span><br><span class="line">    .update(<span class="built_in">this</span>.teacher)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;修改成功&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/edu/teacher&#x27;</span> &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;保存失败&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>完善 saveOrUpdate() 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">saveOrUpdate() &#123;</span><br><span class="line">  <span class="built_in">this</span>.saveBtnDisabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果teacher对象中有id, 说明是修改, 因为创建不需要输入id</span></span><br><span class="line">  <span class="comment">// 这个teacher对象是后端返回给前端的, 不是data中的</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.teacher.id) &#123;</span><br><span class="line">    <span class="built_in">this</span>.updateData();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.saveData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-存在问题"><a href="#4-存在问题" class="headerlink" title="4. 存在问题"></a>4. 存在问题</h3><p>vue-router 导航切换 时，如果两个路由都渲染同个组件，组件会重用, 组件的生命周期钩子（created）不会再被调用，使得组件的一些数据无法根据 path 的改变得到更新。</p>
<p>因此可以：</p>
<ul>
<li>在 watch 中监听路由的变化，当路由变化时，重新调用 created中的内容 </li>
<li>在 init 方法中判断路由的变化，如果是修改路由，则从 api 获取表单数据， 如果是新增路由，则重新初始化表单数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultForm = &#123;</span><br><span class="line">  name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  sort: <span class="number">0</span>,</span><br><span class="line">  level: <span class="number">1</span>,</span><br><span class="line">  career: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  intro: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  avatar: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 监听</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 当路由发生变化, 方法执行</span></span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    init() &#123;</span><br><span class="line">      <span class="comment">// params表示路由中的参数, 指 path: &#x27;edit/:id&#x27; 中类似:id的参数</span></span><br><span class="line">      <span class="comment">// 注意是route不是router</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$route.params &amp;&amp; <span class="built_in">this</span>.$route.params.id) &#123;</span><br><span class="line">        <span class="keyword">const</span> id = <span class="built_in">this</span>.$route.params.id;</span><br><span class="line">        <span class="built_in">this</span>.fetchDataById(id);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则新增一条记录后, defaultForm就变成了之前新增的teacher的值</span></span><br><span class="line">        <span class="comment">// 使用对象拓展运算符, 拷贝对象, 而不是引用</span></span><br><span class="line">        <span class="built_in">this</span>.teacher = &#123; ...defaultForm &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>20_后端集成 OSS</title>
    <url>/posts/6c1f5919.html</url>
    <content><![CDATA[<h3 id="1-对象存储-OSS"><a href="#1-对象存储-OSS" class="headerlink" title="1. 对象存储 OSS"></a>1. 对象存储 OSS</h3><ol>
<li><p>创建 Bucket</p>

</li>
<li><p>上传默认头像</p>
</li>
<li><p>创建 AccessKey</p>


</li>
</ol>
<a id="more"></a>

<h3 id="2-新建云存储微服务"><a href="#2-新建云存储微服务" class="headerlink" title="2. 新建云存储微服务"></a>2. 新建云存储微服务</h3><blockquote>
<p>帮助文档：<a href="https://help.aliyun.com/document_detail/32008.html?spm=5176.208357.1107607.22.1c7c390fC7Vqgz">https://help.aliyun.com/document_detail/32008.html?spm=5176.208357.1107607.22.1c7c390fC7Vqgz</a></p>
</blockquote>
<ol>
<li><p>创建 Maven 项目</p>
<table>
<thead>
<tr>
<th>项目类型</th>
<th align="left">项目名</th>
<th>包名</th>
<th>父模块</th>
</tr>
</thead>
<tbody><tr>
<td>Maven</td>
<td align="left"><code>service_oss</code></td>
<td><code>com.horsen.serviceoss</code></td>
<td><code>service</code></td>
</tr>
</tbody></table>
</li>
<li><p>配置 pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阿里云oss依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日期工具栏依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 服务名</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-oss</span></span><br><span class="line">  <span class="comment"># 环境设置 dev test prod</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云OSS</span></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">oss:</span></span><br><span class="line">    <span class="attr">file:</span></span><br><span class="line">      <span class="comment"># 不同服务器地址不同</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">oss-cn-xxxxxx.aliyuncs.com</span></span><br><span class="line">      <span class="attr">keyid:</span> <span class="string">******</span></span><br><span class="line">      <span class="attr">keysecret:</span> <span class="string">******</span></span><br><span class="line">      <span class="comment"># bucket可以在控制台创建, 也可以使用java代码创建</span></span><br><span class="line">      <span class="attr">bucketname:</span> <span class="string">xxxxxx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复制 logback-spring.xml</p>
</li>
<li><p>创建启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.horsen&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OssApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目</p>
</li>
</ol>
<h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h3><p>启动项目报错</p>
<ul>
<li><p>原因</p>
<p>spring boot 会默认加载<code>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</code>这个类， 而<code>DataSourceAutoConfiguration</code>类使用了<code>@Configuration</code>注解向 spring 注入了 dataSource bean，又因为项目（oss 模块）中并没有关于 dataSource 相关的配置信息，所以当 spring 创建 dataSource bean 时因缺少相关的信息就会报错。</p>
</li>
<li><p>解决方法</p>
<p>启动类添加注解<code>@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</code></p>
</li>
</ul>
<h3 id="4-实现文件上传"><a href="#4-实现文件上传" class="headerlink" title="4. 实现文件上传"></a>4. 实现文件上传</h3><ol>
<li><p>创建 service 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OssService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传头像到阿里云</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">uploadAvatar</span><span class="params">(MultipartFile file)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssServiceImpl</span> <span class="keyword">implements</span> <span class="title">OssService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传头像到阿里云</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadAvatar</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取阿里云存储相关常量</span></span><br><span class="line">        String endPoint = ConstantPropertiesUtil.END_POINT;</span><br><span class="line">        String accessKeyId = ConstantPropertiesUtil.ACCESS_KEY_ID;</span><br><span class="line">        String accessKeySecret = ConstantPropertiesUtil.ACCESS_KEY_SECRET;</span><br><span class="line">        String bucketName = ConstantPropertiesUtil.BUCKET_NAME;</span><br><span class="line">        String uploadUrl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建OSS实例</span></span><br><span class="line">            OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endPoint, accessKeyId,</span><br><span class="line">                    accessKeySecret);</span><br><span class="line">            <span class="comment">// 获取上传文件流</span></span><br><span class="line">            InputStream inputStream = file.getInputStream();</span><br><span class="line">            <span class="comment">// 构建日期路径</span></span><br><span class="line">            String datePath = <span class="keyword">new</span> DateTime().toString(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">            String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            String fileName = uuid + file.getOriginalFilename();</span><br><span class="line">            <span class="comment">// avatar/2020/09/17/文件名</span></span><br><span class="line">            String fileUrl = <span class="string">&quot;avatar/&quot;</span> + datePath + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line">            <span class="comment">// 文件上传至阿里云</span></span><br><span class="line">            ossClient.putObject(bucketName, fileUrl, inputStream);</span><br><span class="line">            <span class="comment">// 关闭OSSClient</span></span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">            <span class="comment">// 获取url地址</span></span><br><span class="line">            uploadUrl = <span class="string">&quot;http://&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endPoint + <span class="string">&quot;/&quot;</span> + fileUrl;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uploadUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller，一定要加<code>@CrossOrigin</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/edu/fileoss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OssController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OssService ossService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OssController</span><span class="params">(OssService ossService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ossService = ossService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传头像方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 获取上传的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">uploadOssFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String url = ossService.uploadAvatar(file);</span><br><span class="line">        <span class="keyword">return</span> R.success().setData(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Swagger 测试</p>
</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>环境搭建</tag>
        <tag>谷粒学院</tag>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>21_使用 Nginx 配置后台多服务器 API</title>
    <url>/posts/212e680.html</url>
    <content><![CDATA[<h3 id="1-安装-Nginx"><a href="#1-安装-Nginx" class="headerlink" title="1. 安装 Nginx"></a>1. 安装 Nginx</h3><ol>
<li><p>下载</p>
<blockquote>
<p><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
</blockquote>
</li>
<li><p>解压</p>
</li>
<li><p>打开 cmd，输入<code>nginx.exe</code>启动</p>
</li>
<li><p><code>nginx.exe -s stop</code>停止</p>
</li>
<li><p><code>nginx.exe -s stop</code>重启</p>
</li>
</ol>
<h3 id="2-配置nginx代理"><a href="#2-配置nginx代理" class="headerlink" title="2. 配置nginx代理"></a>2. 配置nginx代理</h3><ol>
<li><p>修改 conf/nginx.conf</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ......</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">81</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">9001</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location ~ /edu/ &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//localhost:8001;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location ~ /oss/ &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//localhost:8002;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 config/dev.env.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> prodEnv = <span class="built_in">require</span>(<span class="string">&#x27;./prod.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">  <span class="comment">//BASE_API: &#x27;&quot;https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin&quot;&#x27;,</span></span><br><span class="line">  BASE_API: <span class="string">&#x27;&quot;http://localhost:9001&quot;&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>23_使用 EasyExcel 读写 Excel</title>
    <url>/posts/c7189fa1.html</url>
    <content><![CDATA[<h3 id="1-Excel-导入导出的应用场景"><a href="#1-Excel-导入导出的应用场景" class="headerlink" title="1. Excel 导入导出的应用场景"></a>1. Excel 导入导出的应用场景</h3><ol>
<li>数据导入：减轻录入工作量</li>
<li>数据导出：统计信息归档</li>
<li>数据传输：异构系统之间数据传输</li>
</ol>
<h3 id="2-EasyExcel-简介"><a href="#2-EasyExcel-简介" class="headerlink" title="2. EasyExcel 简介"></a>2. EasyExcel 简介</h3><ul>
<li>Java 领域解析、生成 Excel 比较有名的框架有 Apache poi、jxl等。但它们都存在一个严重的问题——非常的耗内存。如果你的系统并发量不大的话可能还行，但是一旦并发上来后一定会OOM 或者 JVM 频繁的 full gc。</li>
<li>EasyExcel 是阿里巴巴开源的一个 Excel 处理框架，以<strong>使用简单、节省内存</strong>著称。EasyExcel 能大大减 少占用内存的主要原因是在解析 Excel 时没有将文件数据一次性全部加载到内存中，而是从磁盘上一 行行读取数据，逐个解析。</li>
<li>EasyExcel 采用一行一行的解析模式，并将一行的解析结果以观察者的模式通知处理 （AnalysisEventListener）。</li>
</ul>
<a id="more"></a>

<h3 id="3-Excel-写"><a href="#3-Excel-写" class="headerlink" title="3. Excel 写"></a>3. Excel 写</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- EasyExcel(需要poi配合使用) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ExcelProperty</span> 设置excel表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;学生编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sno;</span><br><span class="line">    <span class="meta">@ExcelProperty(&quot;学生姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEasyExcel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置写入文件夹地址和excel文件名称</span></span><br><span class="line">        String filename = <span class="string">&quot;E:\\File_My\\write.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">// 调用EasyExcel的方法实现写操作</span></span><br><span class="line">        EasyExcel.write(filename, DemoData.class).sheet(&quot;学生列表&quot;).doWrite(getData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动生成数据 测试用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;DemoData&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;DemoData&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            DemoData data = <span class="keyword">new</span> DemoData();</span><br><span class="line">            data.setSno(i);</span><br><span class="line">            data.setSname(<span class="string">&quot;Horsen&quot;</span> + i);</span><br><span class="line">            list.add(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-Excel-读"><a href="#4-Excel-读" class="headerlink" title="4. Excel 读"></a>4. Excel 读</h3><ol>
<li><p>创建实体类，标记对应关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ExcelProperty</span> 设置excel表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;学生编号&quot;,index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sno;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;学生姓名&quot;,index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">DemoData</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一行一行读取excel内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(DemoData demoData, AnalysisContext analysisContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;|&quot;</span>+demoData.getSno()+<span class="string">&quot;\t\t|&quot;</span>+demoData.getSname()+<span class="string">&quot;|&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取表头内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;|&quot;</span>+headMap.get(<span class="number">0</span>)+<span class="string">&quot;|&quot;</span>+headMap.get(<span class="number">1</span>)+<span class="string">&quot;|&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;|-------|-------|&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取完成后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String fileName = <span class="string">&quot;E:\\File_My\\write.xlsx&quot;</span>;</span><br><span class="line">    <span class="comment">// 从Excel表中读数据, 对读出的数据的操作封装在listener中</span></span><br><span class="line">    EasyExcel.read(fileName, DemoData.class, <span class="keyword">new</span> ExcelListener()).sheet().doRead();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>22_讲师_上传头像</title>
    <url>/posts/d2d0eef8.html</url>
    <content><![CDATA[<ol>
<li><p>复制头像上传组件</p>
<ul>
<li><p>vue-element-admin/src/components/ImageCropper</p>
</li>
<li><p>vue-element-admin/src/components/PanThumb</p>
</li>
</ul>
</li>
<li><p>添加上传头像组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;讲师头像&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 头像缩略图 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pan-thumb</span> <span class="attr">:image</span>=<span class="string">&quot;teacher.avatar&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 文件上传按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">&quot;el-icon-upload&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;imageCropperShow=true&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>更换头像<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    v-show：是否显示上传组件</span></span><br><span class="line"><span class="comment">    :key：类似于id，如果一个页面多个图片上传控件，可以</span></span><br><span class="line"><span class="comment">    :url：后台上传的url地址</span></span><br><span class="line"><span class="comment">    @close：关闭上传组件</span></span><br><span class="line"><span class="comment">    @crop-upload-success：上传成功后的回调</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image-cropper</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-show</span>=<span class="string">&quot;imageCropperShow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:width</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:height</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;imageCropperKey&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:url</span>=<span class="string">&quot;BASE_API+&#x27;/oss/file&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">field</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">close</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">crop-upload-success</span>=<span class="string">&quot;cropSuccess&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>引入并声明组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ImageCropper <span class="keyword">from</span> <span class="string">&#x27;@/components/ImageCropper&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> PanThumb <span class="keyword">from</span> <span class="string">&#x27;@/components/PanThumb&#x27;</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123; ImageCropper, PanThumb &#125;,</span><br><span class="line">  data() &#123;&#125;,</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关闭上传弹窗</span></span><br><span class="line">close() &#123;</span><br><span class="line">  <span class="built_in">this</span>.imageCropperShow = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//上传组件初始化</span></span><br><span class="line">  <span class="built_in">this</span>.imageCropperKey = <span class="built_in">this</span>.imageCropperKey + <span class="number">1</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 上传成功方法</span></span><br><span class="line">cropSuccess(data) &#123;</span><br><span class="line">  <span class="comment">// 上传之后接口返回图片地址</span></span><br><span class="line">  <span class="built_in">this</span>.teacher.avatar = data.url;</span><br><span class="line">  <span class="built_in">this</span>.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置默认头像</p>
<p>config/dev.env.js 中添加阿里云 oss bucket地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">OSS_PATH: <span class="string">&#x27;&quot;https://guli-file-horsen.oss-cn-beijing.aliyuncs.com&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>组件设置默认头像地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultForm = &#123; </span><br><span class="line">    ......</span><br><span class="line">    avatar: process.env.OSS_PATH + <span class="string">&#x27;/avatar/default_avatar.jpg&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>24_课程分类_从 Excel 添加课程</title>
    <url>/posts/cb45f637.html</url>
    <content><![CDATA[<ol>
<li><p>引入 EasyExcel 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- EasyExcel(需要poi配合使用) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用代码生成器生成课程分类相关包、类</p>
<p><strong>注意：</strong></p>
<ul>
<li>实体类中添加注解指定数据库表名</li>
<li>id 字段注意数据类型<code>@TableId(value = &quot;id&quot;, type = IdType.ID_WORKER_STR)</code></li>
</ul>
</li>
<li><p>创建实体类和 Excel 表对应关系</p>
<p>model 中新建 excel 包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectData</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;一级分类&quot;, index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String oneSubjectName;</span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;二级分类&quot;, index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String twoSubjectName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>编写监听器</p>
<p>新建 listener 包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectExcelListener</span> <span class="keyword">extends</span> <span class="title">AnalysisEventListener</span>&lt;<span class="title">SubjectData</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> SubjectService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubjectExcelListener</span><span class="params">(SubjectService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一行一行读数据, 做判断, 添加到数据库表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(SubjectData subjectData, AnalysisContext analysisContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (subjectData == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(<span class="number">20001</span>, <span class="string">&quot;文件数据为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查找一个一级分类, 如果为空, 说明表里没有这个一级分类, 则添加到表中</span></span><br><span class="line">        Subject oneSubject = queryOneSubject(subjectData.getOneSubjectName());</span><br><span class="line">        <span class="keyword">if</span> (oneSubject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            oneSubject = <span class="keyword">new</span> Subject();</span><br><span class="line">            oneSubject.setParentId(<span class="string">&quot;0&quot;</span>).setTitle(subjectData.getOneSubjectName());</span><br><span class="line">            service.save(oneSubject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查找一个二级分类, 如果为空, 说明表里没有这个一级分类, 则添加到表中</span></span><br><span class="line">        Subject twoSubject = queryTwoSubject(subjectData.getTwoSubjectName(), oneSubject.getId());</span><br><span class="line">        <span class="keyword">if</span> (twoSubject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            twoSubject = <span class="keyword">new</span> Subject();</span><br><span class="line">            twoSubject.setParentId(oneSubject.getId()).setTitle(subjectData.getTwoSubjectName());</span><br><span class="line">            service.save(twoSubject);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过课程名查找一级分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Subject <span class="title">queryOneSubject</span><span class="params">(String subjectName)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;Subject&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;title&quot;</span>, subjectName);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;parent_id&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> service.getOne(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过课程名查找二级分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Subject <span class="title">queryTwoSubject</span><span class="params">(String subjectName, String pid)</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;Subject&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;title&quot;</span>, subjectName);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;parent_id&quot;</span>, pid);</span><br><span class="line">        <span class="comment">// 查找一个二级分类, 如果不为空, 说明表里已经存在这个二级分类了, 返回true</span></span><br><span class="line">        <span class="keyword">return</span> service.getOne(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterAllAnalysed</span><span class="params">(AnalysisContext analysisContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SubjectService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Subject</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加课程分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveSubject</span><span class="params">(MultipartFile file)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">SubjectMapper</span>, <span class="title">Subject</span>&gt; <span class="keyword">implements</span> <span class="title">SubjectService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加课程分类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSubject</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = file.getInputStream();</span><br><span class="line">            EasyExcel.read(is, SubjectData.class, <span class="keyword">new</span> SubjectExcelListener(<span class="keyword">this</span>)).sheet().doRead();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GuliException(<span class="number">20002</span>, <span class="string">&quot;添加课程分类失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;课程分类管理&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/edu/subject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubjectService subjectService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubjectController</span><span class="params">(SubjectService subjectService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjectService = subjectService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 添加课程分类</span></span><br><span class="line"><span class="comment">        * 获取上传过来的文件, 把文件内容提取出来</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;Excel批量导入&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">addSubject</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 上传过来的excel文件</span></span><br><span class="line">        subjectService.saveSubject(file);</span><br><span class="line">        <span class="keyword">return</span> R.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Spring Boot</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>25_课程分类_添加课程前端实现</title>
    <url>/posts/f8960b65.html</url>
    <content><![CDATA[<h3 id="1-Excel-模板"><a href="#1-Excel-模板" class="headerlink" title="1. Excel 模板"></a>1. Excel 模板</h3><ol>
<li>编写模板</li>
<li>上传到阿里云 OSS</li>
</ol>
<h3 id="2-配置路由"><a href="#2-配置路由" class="headerlink" title="2. 配置路由"></a>2. 配置路由</h3><ol>
<li><p>添加路由</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 课程分类管理</span></span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/edu/subject&#x27;</span>,</span><br><span class="line">  component: Layout,</span><br><span class="line">  redirect: <span class="string">&#x27;/edu/subject/list&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Subject&#x27;</span>,</span><br><span class="line">  meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;课程分类管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;nested&#x27;</span> &#125;,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;EduSubjectList&#x27;</span>,</span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/subject/list&#x27;</span>),</span><br><span class="line">      meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;课程分类列表&#x27;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;EduSubjectImport&#x27;</span>,</span><br><span class="line">      component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/edu/subject/import&#x27;</span>),</span><br><span class="line">      meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;导入课程分类&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 vue 组件</p>
 

</li>
</ol>
<a id="more"></a>

<h3 id="3-编写-import-vue"><a href="#3-编写-import-vue" class="headerlink" title="3. 编写 import.vue"></a>3. 编写 import.vue</h3><ol>
<li><p>定义数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    BASE_API: process.env.BASE_API, <span class="comment">// 接口API地址</span></span><br><span class="line">    OSS_PATH: process.env.OSS_PATH, <span class="comment">// 阿里云OSS地址</span></span><br><span class="line">    fileUploadBtnText: <span class="string">&#x27;上传到服务器&#x27;</span>, <span class="comment">// 按钮文字</span></span><br><span class="line">    importBtnDisabled: <span class="literal">false</span>, <span class="comment">// 按钮是否禁用</span></span><br><span class="line">    loading: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;信息描述&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>Excel 模版说明<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tag</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-download&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;OSS_PATH+&#x27;/excel/example.xlsx&#x27;&quot;</span>&gt;</span>点击下载模版<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;选择Excel&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      ref 唯一标识 类似html标签中的id</span></span><br><span class="line"><span class="comment">      limit 限制每次文件上传的数量</span></span><br><span class="line"><span class="comment">      accept 限制上传文件的格式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-success</span>=<span class="string">&quot;fileUploadSuccess&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-error</span>=<span class="string">&quot;fileUploadError&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">&quot;importBtnDisabled&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:action</span>=<span class="string">&quot;BASE_API+&#x27;/edu/subjects/&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">accept</span>=<span class="string">&quot;.xls,.xlsx&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">&quot;trigger&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>选取文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;success&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;submitUpload&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>上传到服务器<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 上传文件到接口</span></span><br><span class="line">  submitUpload() &#123;</span><br><span class="line">    <span class="built_in">this</span>.fileUploadBtnText = <span class="string">&#x27;正在上传...&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.importBtnDisabled = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.loading = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 相当于js原生代码: document.getElementById(&quot;upload&quot;).submit();</span></span><br><span class="line">    <span class="built_in">this</span>.$refs.upload.submit();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传成功</span></span><br><span class="line">  fileUploadSuccess(response) &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.success === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.fileUploadBtnText = <span class="string">&#x27;上传成功&#x27;</span>;</span><br><span class="line">      <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">        type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        message: response.message</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 上传失败</span></span><br><span class="line">  fileUploadError() &#123;</span><br><span class="line">    <span class="built_in">this</span>.fileUploadBtnText = <span class="string">&#x27;上传失败&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.loading = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">      type: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      message: <span class="string">&#x27;上传失败&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Vue</tag>
        <tag>vue-router</tag>
        <tag>element-ui</tag>
        <tag>OSS</tag>
      </tags>
  </entry>
  <entry>
    <title>26_课程分类_分类列表显示</title>
    <url>/posts/fa622485.html</url>
    <content><![CDATA[<h3 id="1-前端"><a href="#1-前端" class="headerlink" title="1. 前端"></a>1. 前端</h3><ol>
<li><p>创建 api，新建 subject.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> api_name = <span class="string">&#x27;/edu/subjects/&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 树形结构显示课程分类</span></span><br><span class="line">  getNestedTreeList() &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: api_name,</span><br><span class="line">      method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 list.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;el-input</span><br><span class="line">      v-model&#x3D;&quot;filterText&quot;</span><br><span class="line">      placeholder&#x3D;&quot;Filter keyword&quot;</span><br><span class="line">      style&#x3D;&quot;margin-bottom:30px;&quot;</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">    &lt;el-tree</span><br><span class="line">      ref&#x3D;&quot;subjectTree&quot;</span><br><span class="line">      :data&#x3D;&quot;subjectList&quot;</span><br><span class="line">      :props&#x3D;&quot;defaultProps&quot;</span><br><span class="line">      :filter-node-method&#x3D;&quot;filterNode&quot;</span><br><span class="line">      class&#x3D;&quot;filter-tree&quot;</span><br><span class="line">      default-expand-all</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import subject from &#39;@&#x2F;api&#x2F;edu&#x2F;subject&#39;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      filterText: &#39;&#39;,</span><br><span class="line">      subjectList: [],</span><br><span class="line">      defaultProps: &#123;</span><br><span class="line">        children: &#39;children&#39;,</span><br><span class="line">        label: &#39;title&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    filterText(val) &#123;</span><br><span class="line">      this.$refs.subjectTree.filter(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.fetchNodeList();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetchNodeList() &#123;</span><br><span class="line">      subject.getNestedTreeList().then(response &#x3D;&gt; &#123;</span><br><span class="line">        if (response.success &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">          this.subjectList &#x3D; response.data.items;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    filterNode(value, data) &#123;</span><br><span class="line">      if (!value) &#123;</span><br><span class="line">        return true;</span><br><span class="line">      &#125;</span><br><span class="line">      return data.title.indexOf(value) !&#x3D;&#x3D; -1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-后端"><a href="#2-后端" class="headerlink" title="2. 后端"></a>2. 后端</h3><ol>
<li><p>创建 vo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一级分类</span></span><br><span class="line"><span class="comment"> * 一个一级分类中有多个二级分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneSubject</span> </span>&#123;</span><br><span class="line">    String id;</span><br><span class="line">    String title;</span><br><span class="line">    List&lt;TwoSubject&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二级分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSubject</span> </span>&#123;</span><br><span class="line">    String id;</span><br><span class="line">    String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树形结构显示课程分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;OneSubject&gt; <span class="title">nestedList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树形结构显示课程分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OneSubject&gt; <span class="title">nestedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最终得到的数据列表</span></span><br><span class="line">    ArrayList&lt;OneSubject&gt; oneSubjectFinalList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 获取一级分类数据记录</span></span><br><span class="line">    QueryWrapper&lt;Subject&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;parent_id&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    wrapper.orderByAsc(<span class="string">&quot;sort&quot;</span>, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;Subject&gt; oneSubjectList = baseMapper.selectList(wrapper);</span><br><span class="line">    <span class="comment">// 获取二级分类数据记录</span></span><br><span class="line">    QueryWrapper&lt;Subject&gt; wrapper2 = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper2.ne(<span class="string">&quot;parent_id&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    wrapper2.orderByAsc(<span class="string">&quot;sort&quot;</span>, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;Subject&gt; twoSubjectList = baseMapper.selectList(wrapper2);</span><br><span class="line">    <span class="comment">// 填充一级分类vo数据</span></span><br><span class="line">    <span class="keyword">for</span> (Subject oneSubject : oneSubjectList) &#123;</span><br><span class="line">        <span class="comment">// 创建一级分类vo对象</span></span><br><span class="line">        OneSubject oneSubjectVo = <span class="keyword">new</span> OneSubject();</span><br><span class="line">        BeanUtils.copyProperties(oneSubject, oneSubjectVo);</span><br><span class="line">        <span class="comment">// 填充二级分类vo数据</span></span><br><span class="line">        ArrayList&lt;TwoSubject&gt; twoSubjectFinalList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Subject twoSubject : twoSubjectList) &#123;</span><br><span class="line">            <span class="comment">// 如果二级分类的pid等于一级分类的id</span></span><br><span class="line">            <span class="keyword">if</span> (oneSubject.getId().equals(twoSubject.getParentId())) &#123;</span><br><span class="line">                <span class="comment">// 创建二级分类vo对象</span></span><br><span class="line">                TwoSubject twoSubjectVo = <span class="keyword">new</span> TwoSubject();</span><br><span class="line">                BeanUtils.copyProperties(twoSubject, twoSubjectVo);</span><br><span class="line">                twoSubjectFinalList.add(twoSubjectVo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在一级分类中添加二级分类</span></span><br><span class="line">        oneSubjectVo.setChildren(twoSubjectFinalList);</span><br><span class="line">        oneSubjectFinalList.add(oneSubjectVo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oneSubjectFinalList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树形结构显示课程分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;课程分类列表(树形)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">nestedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;OneSubject&gt; oneSubjectList = subjectService.nestedList();</span><br><span class="line">    <span class="keyword">return</span> R.success().setData(<span class="string">&quot;items&quot;</span>, oneSubjectList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>谷粒学院</tag>
        <tag>Spring Boot</tag>
        <tag>Vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Maven 配置</title>
    <url>/posts/40682306.html</url>
    <content><![CDATA[<h3 id="1-下载压缩包"><a href="#1-下载压缩包" class="headerlink" title="1. 下载压缩包"></a>1. 下载压缩包</h3><p><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p>
<img src="/posts/40682306/1.png" class>

<h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h3><table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">变量值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">MAVEN_HOME</td>
<td align="left">D:\Environment\apache-maven-3.6.3</td>
</tr>
<tr>
<td align="left">M2_HOME</td>
<td align="left">D:\Environment\apache-maven-3.6.3\bin</td>
</tr>
<tr>
<td align="left">Path中添加</td>
<td align="left">%MAVEN_HOME%\bin</td>
</tr>
</tbody></table>
<h3 id="3-验证安装"><a href="#3-验证安装" class="headerlink" title="3. 验证安装"></a>3. 验证安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="4-修改镜像源"><a href="#4-修改镜像源" class="headerlink" title="4. 修改镜像源"></a>4. 修改镜像源</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-建立本地仓库"><a href="#5-建立本地仓库" class="headerlink" title="5. 建立本地仓库"></a>5. 建立本地仓库</h3><ul>
<li>maven 目录下新建文件夹 maven-repo</li>
</ul>
<img src="/posts/40682306/image-20200704225515234.png" class>

<ul>
<li>配置文件 <settings> 标签中添加</settings></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-在-IDEA-中使用"><a href="#6-在-IDEA-中使用" class="headerlink" title="6. 在 IDEA 中使用"></a>6. 在 IDEA 中使用</h3><h4 id="6-1-创建-MavenWeb-项目"><a href="#6-1-创建-MavenWeb-项目" class="headerlink" title="6.1 创建 MavenWeb 项目"></a>6.1 创建 MavenWeb 项目</h4><img src="/posts/40682306/image-20200704230404473.png" class>

<img src="/posts/40682306/image-20200704230944123.png" class>

<img src="/posts/40682306/image-20200705003522875.png" class>

<h4 id="6-2-设置-Maven"><a href="#6-2-设置-Maven" class="headerlink" title="6.2 设置 Maven"></a>6.2 设置 Maven</h4><p><em>每次新建项目都检查一下这部分</em></p>
<img src="/posts/40682306/image-20200705002910260.png" class>

<h4 id="6-3-补全项目文件"><a href="#6-3-补全项目文件" class="headerlink" title="6.3 补全项目文件"></a>6.3 补全项目文件</h4><ul>
<li>在 main 文件夹中新建两个文件夹</li>
</ul>
<img src="/posts/40682306/image-20200704233517122.png" class>

<ul>
<li>标记 java 文件夹</li>
</ul>
<img src="/posts/40682306/image-20200704233654214.png" class>

<h4 id="6-4-配置-Tomcat"><a href="#6-4-配置-Tomcat" class="headerlink" title="6.4 配置 Tomcat"></a>6.4 配置 Tomcat</h4><img src="/posts/40682306/image-20200704234448579.png" class>

<img src="/posts/40682306/image-20200704234427105.png" class>

<img src="/posts/40682306/image-20200705005555056.png" class>

<img src="/posts/40682306/image-20200705005420950.png" class>

<h3 id="7-pom-xml"><a href="#7-pom-xml" class="headerlink" title="7. pom.xml"></a>7. pom.xml</h3><ul>
<li><p>文件详解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Maven版本和头文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自己配置的GAV --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaWeb_01_Maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Package: 项目的打包方式</span></span><br><span class="line"><span class="comment">    java: Java应用</span></span><br><span class="line"><span class="comment">    war: JavaWeb应用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目的默认构建编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 编码版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 具体依赖的jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目构建用的东西 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>JavaWeb_01_Maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 build 中配置 resources，来防止我们资源导出失败的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Java Web</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>02_Tomcat 配置</title>
    <url>/posts/d111b2f.html</url>
    <content><![CDATA[<h3 id="1-下载压缩包"><a href="#1-下载压缩包" class="headerlink" title="1. 下载压缩包"></a>1. 下载压缩包</h3><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p>
<img src="/posts/d111b2f/image-20200704235009423.png" class>

<h3 id="2-遇到的问题"><a href="#2-遇到的问题" class="headerlink" title="2. 遇到的问题"></a>2. 遇到的问题</h3><h4 id="2-1-启动时乱码"><a href="#2-1-启动时乱码" class="headerlink" title="2.1 启动时乱码"></a>2.1 启动时乱码</h4><p>修改配置文件 D:\Environment\apache-tomcat-9.0.36\conf\logging.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">java.util.logging.ConsoleHandler.encoding = GBK</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Java Web</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>03_初识 Servlet</title>
    <url>/posts/d139c628.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>开发 Servlet 程序步骤</p>
<ul>
<li><p>编写一个类，实现 Servlet 接口</p>
</li>
<li><p>把开发好的 Java 类部署到 web 服务器中</p>
</li>
</ul>
<a id="more"></a>

<h3 id="2-新建-Servlet-项目"><a href="#2-新建-Servlet-项目" class="headerlink" title="2. 新建 Servlet 项目"></a>2. 新建 Servlet 项目</h3><ul>
<li><p>新建一个普通的 Maven 项目</p>
</li>
<li><p>删掉里面的src目录，以后的学习就在这个项目中建立 Moudel，这个空的工程就是 Maven 主工程</p>
</li>
<li><p>导入依赖</p>
<p>从官方 Maven 仓库找 <a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-新建一个-Model"><a href="#3-新建一个-Model" class="headerlink" title="3. 新建一个 Model"></a>3. 新建一个 Model</h3><img src="/posts/d139c628/image-20200705115303339.png" class> 

<ul>
<li><p>关于 Maven 父子工程的理解：</p>
<ul>
<li><p>父项目 pom.xml 中会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>Servlet_01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>子项目 pom.xml 中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaWeb_02_Servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父项目中的 java 子项目可以直接使用父项目中的依赖</p>
</li>
</ul>
</li>
<li><p>修改 src\main\webapp\WEB-INF\web.xml 的头文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以直接修改模板，一劳永逸</p>
<img src="/posts/d139c628/image-20200705121416451.png" class>
</li>
<li><p>在 main 文件夹中添加 java 和 resource 两个文件夹（详见Maven配置）</p>
</li>
<li><p>新建包 com.horsen.servlet</p>
</li>
</ul>
<h3 id="4-编写-Servlet-程序"><a href="#4-编写-Servlet-程序" class="headerlink" title="4. 编写 Servlet 程序"></a>4. 编写 Servlet 程序</h3><ul>
<li><p>编写一个普通类</p>
</li>
<li><p>实现 Servlet 接口，这里直接继承HttpServlet，重写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于get或post知识请求实现的不同方式, 可以互相调用, 业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 响应流</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;Hello, Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Servlet 的映射</p>
<p>为什么？因为我们写的是 Java 程序，但是要通过浏览器访问，而浏览器需要连接 web 服务器，所以我们需要在 web 服务中注册我们写的 Servlet，还需要给它一个浏览器能够访问的路径。</p>
<p>在 web.xml 中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.horsen.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Tomcat（详见 Maven 配置）</p>
</li>
<li><p>启动 Tomcat</p>
</li>
</ul>
<h3 id="5-Mapping-问题"><a href="#5-Mapping-问题" class="headerlink" title="5. Mapping 问题"></a>5. Mapping 问题</h3><ul>
<li><p>一个 Servlet 可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个 Servlet 可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个 Servlet 可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优先级问题</p>
<p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求。</p>
<p>举个例子，自己定义一个错误页面，作为默认的映射路径。当找不到指定的映射路径时，它就会派上用场。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 404 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.horsen.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet的请求路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>04_ServletContext 应用</title>
    <url>/posts/f32ab6ae.html</url>
    <content><![CDATA[<p>web 容器在启动的时候，它会为每个 web 程序都创建一个对应的 ServletContext 对象，它代表了当前的 web 应用。</p>
<h3 id="1-共享数据"><a href="#1-共享数据" class="headerlink" title="1. 共享数据"></a>1. 共享数据</h3><p>在一个 Servlet 中保存的数据，可以在另一个 Servlet 中拿到。举例：</p>
<ul>
<li><p>第一个 Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = <span class="string">&quot;Horsen&quot;</span>;</span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<ul>
<li><p>第二个 Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;用户名: &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.horsen.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.horsen.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-获取初始化参数"><a href="#2-获取初始化参数" class="headerlink" title="2. 获取初始化参数"></a>2. 获取初始化参数</h3><ul>
<li><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一些web应用初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().println(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3. 请求转发"></a>3. 请求转发</h3><ul>
<li><p>Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">// getRequestDispatcher 获取请求转发 调用forward实现请求转发</span></span><br><span class="line">        context.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-获取资源文件"><a href="#4-获取资源文件" class="headerlink" title="4. 获取资源文件"></a>4. 获取资源文件</h3><p>在 java 目录下新建 properties 或在 resources 目录下新建 properties，都会被打包到同一个路径 classes 下，俗称这个路径为 classpath</p>
<ul>
<li><p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234356</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        resp.getWriter().println(user + <span class="string">&quot;: &quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>05_HttpServletResponse 应用</title>
    <url>/posts/9f3b37e7.html</url>
    <content><![CDATA[<p>web 服务器接收到客户端的 http 请求，针对这个请求，分别创建一个代表请求的HttpServletRequest 对象，和一个代表响应的 HttpServletResponce 对象</p>
<ul>
<li>如果要获取客户端请求的参数，找HttpServletRequest</li>
<li>如果要给客户端响应一些信息，找 HttpServletResponce</li>
</ul>
<h3 id="1-简单分类"><a href="#1-简单分类" class="headerlink" title="1. 简单分类"></a>1. 简单分类</h3><ul>
<li><p>负责向浏览器发送数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">  </span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>

<ul>
<li><p>负责向浏览器发送响应头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>响应的状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>请求响应成功</td>
</tr>
<tr>
<td>302</td>
<td>请求重定向（url会发生变化）</td>
</tr>
<tr>
<td>307</td>
<td>请求转发（url不会发生变化）</td>
</tr>
<tr>
<td>4xx</td>
<td>找不到资源</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器代码错误</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-常见应用"><a href="#2-常见应用" class="headerlink" title="2. 常见应用"></a>2. 常见应用</h3><ul>
<li><p>向浏览器输出消息</p>
</li>
<li><p>下载文件</p>
<ol>
<li><p>要获取下载文件的路径</p>
</li>
<li><p>获取下载的文件名</p>
</li>
<li><p>想办法让浏览器能够支持下载（遇到中文文件名，需要转换编码格式）</p>
</li>
<li><p>获取下载文件的输入流</p>
</li>
<li><p>创建缓冲区</p>
</li>
<li><p>获取 OutputStream 对象</p>
</li>
<li><p>将 FileOutputStream 写入到 buffer 缓冲区</p>
</li>
<li><p>使用 OutputStream 将缓冲区中的数据输出到客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">// 1. 要获取下载文件的路径</span></span><br><span class="line">     String realPath = <span class="string">&quot;E:\\Proj_Java\\JavaWeb_02_Servlet\\Response\\src\\main\\resources\\img.jpg&quot;</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;文件路径: &quot;</span> + realPath);</span><br><span class="line">     <span class="comment">// 2. 获取下载的文件名</span></span><br><span class="line">     String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">     <span class="comment">// 3. 想办法让浏览器能够支持下载</span></span><br><span class="line">     resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class="line">     <span class="comment">// 4. 获取下载文件的输入流</span></span><br><span class="line">     FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">     <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">     <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">     <span class="comment">// 6. 获取 OutputStream 对象</span></span><br><span class="line">     ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">     <span class="comment">// 7. 将 FileOutputStream 写入到 buffer 缓冲区  8. 使用 OutputStream 将缓冲区中的数据输出到客户端</span></span><br><span class="line">     <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">     &#125;</span><br><span class="line">     in.close();</span><br><span class="line">     out.close();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h3 id="3-验证码功能"><a href="#3-验证码功能" class="headerlink" title="3. 验证码功能"></a>3. 验证码功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 如何让浏览器3秒刷新一次</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">// 在内存中创建图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">45</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">// 得到一支笔</span></span><br><span class="line">        Graphics2D pen = (Graphics2D) image.getGraphics();</span><br><span class="line">        <span class="comment">//设置图片背景颜色 从(0,0)填充到(80,20)</span></span><br><span class="line">        pen.setColor(Color.white);</span><br><span class="line">        pen.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 给图片写数据 画随机数</span></span><br><span class="line">        pen.setColor(Color.blue);</span><br><span class="line">        pen.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">        pen.drawString(makeRandomNumber(), <span class="number">0</span>, <span class="number">17</span>);</span><br><span class="line">        <span class="comment">// 告诉浏览器这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">// 网站存在缓存 所以要禁止浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">// 把图片写给浏览器</span></span><br><span class="line">        <span class="keyword">boolean</span> write = ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 随机数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeRandomNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 生成一个0-9999的随机数</span></span><br><span class="line">        String num = random.nextInt(<span class="number">9999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// 前面补0 补成四位数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> - num.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString() + num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-实现重定向"><a href="#4-实现重定向" class="headerlink" title="4. 实现重定向"></a>4. 实现重定向</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        resp.setHeader(&quot;Location&quot;,&quot;/Response/img&quot;);</span></span><br><span class="line"><span class="comment">        resp.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/Response/img&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面试题：请你聊聊重定向和转发的区别</p>
<ul>
<li><p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
</li>
<li><p>不同点</p>
<ul>
<li>请求转发的时候，url 地址栏不会发生变化</li>
<li>重定向的时候，url 地址栏会发生变化</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
        <tag>Servlet</tag>
        <tag>Response</tag>
      </tags>
  </entry>
  <entry>
    <title>06_HttpServletRequest 应用</title>
    <url>/posts/355bc455.html</url>
    <content><![CDATA[<h3 id="1-获取前端传递的参数"><a href="#1-获取前端传递的参数" class="headerlink" title="1. 获取前端传递的参数"></a>1. 获取前端传递的参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免后台接收出现中文乱码</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">// 避免浏览器出现中文乱码</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">String[] hobbies = req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2. 请求转发"></a>2. 请求转发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过请求转发 (请求转发是项目内部资源的事情 不需要加上下文或项目的路径)</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req, resp);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
        <tag>Servlet</tag>
        <tag>Request</tag>
      </tags>
  </entry>
  <entry>
    <title>07_Session 和 Cookie</title>
    <url>/posts/d1747fc.html</url>
    <content><![CDATA[<h3 id="1-什么是-Session"><a href="#1-什么是-Session" class="headerlink" title="1. 什么是 Session"></a>1. 什么是 Session</h3><ul>
<li><p><strong>Session（会话）</strong>：用户打开了一个浏览器，点击了很多超链接，访问多个 web 资源，关闭浏览器。</p>
</li>
<li><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学曾经来过。</p>
</li>
</ul>
<h3 id="2-保存会话的两种技术"><a href="#2-保存会话的两种技术" class="headerlink" title="2. 保存会话的两种技术"></a>2. 保存会话的两种技术</h3><ul>
<li><strong>Cookie</strong>：客户端技术（响应、请求）</li>
<li><strong>Session</strong> ：服务器技术。利用这个技术，可以保存用户的会话信息。我们可以把信息或数据放在Session中</li>
</ul>
<a id="more"></a>

<h3 id="3-Cookie"><a href="#3-Cookie" class="headerlink" title="3. Cookie"></a>3. Cookie</h3><ol>
<li><p>从请求中拿到 Cookie 信息</p>
</li>
<li><p>服务器响应给客户端</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器端从客户端获取Cookie</span></span><br><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line"><span class="comment">// 获取Cookie的名字</span></span><br><span class="line">cookie.getName();</span><br><span class="line"><span class="comment">// 获取Cookie的值</span></span><br><span class="line">cookie.getValue()</span><br><span class="line"><span class="comment">// 服务器给客户端响应一个Cookie</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 设置Cookie有效期为1天</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"><span class="comment">// 响应给客户端一个Cookie</span></span><br><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>删除 Cookie：设置有效期为0</p>
</li>
<li><p>传递中文数据时，为了防止乱码，最好存入时编码，取出时解码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编码</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, URLEncoder.encode(<span class="string">&quot;你好&quot;</span>, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line"> out.println(URLDecoder.decode(cookies[i].getValue(), <span class="string">&quot;utf-8&quot;</span>));</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-Session"><a href="#4-Session" class="headerlink" title="4. Session"></a>4. Session</h3><ul>
<li><p>服务器给每一个用户（浏览器）创建一个 Session 对象</p>
</li>
<li><p>一个 Session 独占一个浏览器，只要浏览器没有关闭，这个 Session 就存在</p>
</li>
<li><p>使用场景</p>
<ul>
<li>保存一个用户的登录信息</li>
<li>购物车信息</li>
<li>保存在整个网站中经常会使用多个数据</li>
</ul>
</li>
</ul>
<ol>
<li><p>向 Session 中存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo_01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 解决乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">// 给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;person&quot;</span>, <span class="keyword">new</span> Person(<span class="string">&quot;刘昊鑫&quot;</span>, <span class="number">100</span>));</span><br><span class="line">        <span class="comment">// 获取Session的ID</span></span><br><span class="line">        String id = session.getId();</span><br><span class="line">        <span class="comment">// 判断Session是不是新创建的</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew()) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功, ID: &quot;</span> + id);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session已经在服务器中, ID: &quot;</span> + id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 Session 中获得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo_02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 解决乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">// 获取Session中存的东西</span></span><br><span class="line">        Person person = (Person) session.getAttribute(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注销 Session</p>
<p>3.1 手动注销</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo_03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        <span class="comment">// 手动注销Session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.2 设置失效时间</p>
<p>在 web.xml 中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置Session默认的失效时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- x分钟后Session自动失效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-区别"><a href="#5-区别" class="headerlink" title="5. 区别"></a>5. 区别</h3><ul>
<li>Cookie 把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）。</li>
<li>Session 把用户的数据写到用户独占的 Session 中，服务器保存（只保存重要的信息，减少服务器资源的浪费）。</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
        <tag>Session</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>01_JVM 探究</title>
    <url>/posts/41f149cf.html</url>
    <content><![CDATA[<h3 id="1-JVM-的位置"><a href="#1-JVM-的位置" class="headerlink" title="1. JVM 的位置"></a>1. JVM 的位置</h3><p>JVM 是运行在操作系统之上的，它与硬件没有直接的交互</p>
<img src="/posts/41f149cf/image-20200921084310282.png" class>

<h3 id="2-JVM-体系结构图"><a href="#2-JVM-体系结构图" class="headerlink" title="2. JVM 体系结构图"></a>2. JVM 体系结构图</h3><p>只有方法区和堆中会存在垃圾，所谓 JVM 调优，其实就是在调方法区和堆，而 99% 的情况下都在调堆。</p>
<img src="/posts/41f149cf/image-20200921084557808.png" class>

<a id="more"></a>

<p><strong>再来一个详细图</strong></p>
<img src="/posts/41f149cf/JVM%E8%AF%A6%E7%BB%86%E5%9B%BE.png" class>

]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>02_类加载器 Class Loader</title>
    <url>/posts/ab1b346.html</url>
    <content><![CDATA[<p>一个类加载到 JVM 的基本结构</p>
<img src="/posts/ab1b346/image-20200921095207296.png" class>

<p>在如下几种情况下，JVM 会结束生命周期</p>
<ul>
<li>执行了 System.exit() 方法</li>
<li>程序正常执行结束</li>
<li>程序在执行过程中遇到了异常或者错误而异常终止</li>
<li>由于操作系统出现错误导致 JVM 终止</li>
</ul>
<a id="more"></a>

<h3 id="1-类的加载、连接和初始化"><a href="#1-类的加载、连接和初始化" class="headerlink" title="1. 类的加载、连接和初始化"></a>1. 类的加载、连接和初始化</h3><p>在 Java 代码中，Class 的加载、连接与初始化过程都是在程序运行期间（Runtime）完成的。</p>
<ul>
<li><p>加载： 查找并加载类的二进制数据</p>
<blockquote>
<p>类的加载指的是将类的 .class 文件中二进制数据读入到内存中，将其放在运行时数据区内的方法区内，然后在内存中创建一个 java.lang.Class 对象用来封装类在方法区内的数据结构。</p>
<p>对于静态字段来说，只有直接定义了该字段的类才会被初始化。</p>
<p>当一个类在初始化时，要求其父类全部都已经初始化完毕了。</p>
<p>所有 JVM 实现必须在每个类或者接口被 Java 程序“首次主动使用”时才初始化它们。</p>
</blockquote>
</li>
<li><p>连接</p>
<ul>
<li><p>验证：确保被加载的类的正确性</p>
</li>
<li><p>准备：为类的静态变量分配内存，并将其初始化为默认值</p>
</li>
<li><p>解析：把类中的符号引用转换为直接引用</p>
<blockquote>
<p>在编译的时候一个每个 Java 类都会被编译成一个 class 文件，但在编译的时候虚拟机并不知道所引用类的地址，多以就用符号引用来代替，而在这个解析阶段就是为了把这个符号引用转化 、成为真正的地址的阶段。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>初始化：为类的静态变量赋予正确的初始值</p>
</li>
</ul>
<p>用代码来理解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class test&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 程序中给定的是 public static int a = 1;</span></span><br><span class="line"><span class="comment"> * 但是在加载过程中的步骤如下:</span></span><br><span class="line"><span class="comment"> * 1. 加载阶段</span></span><br><span class="line"><span class="comment"> *    编译文件为.class文件, 然后通过类加载, 加载到JVM</span></span><br><span class="line"><span class="comment"> * 2. 连接阶段</span></span><br><span class="line"><span class="comment"> *    2.1 验证: 确保Class类文件没问题</span></span><br><span class="line"><span class="comment"> *    2.2 准备: 先初始化为a=0(因为int类型的初始值为0)</span></span><br><span class="line"><span class="comment"> *    2.3 解析: 建议用转换为直接应用</span></span><br><span class="line"><span class="comment"> * 3. 初始化阶段</span></span><br><span class="line"><span class="comment"> *    把1赋值为变量a</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Class-Loader-分类"><a href="#2-Class-Loader-分类" class="headerlink" title="2. Class Loader 分类"></a>2. Class Loader 分类</h3><p>有两种类型的类加载器</p>
<ol>
<li><p>Java虚拟机自带的加载器</p>
<ul>
<li><p><strong>根类加载器</strong>（BootStrap、BootClassLoader） </p>
<p>sun.boot.class.path，加载系统的包，包含jdk核心库里的类</p>
</li>
<li><p><strong>标准扩展类加载器</strong>（Extension、ExtClassLoader）</p>
<p>java.ext.dirs，加载扩展jar包中的类</p>
</li>
<li><p><strong>系统（应用）类加载器</strong>（System、AppClassLoader）</p>
<p>java.class.path，加载用户编写的，编译后的类</p>
</li>
</ul>
</li>
<li><p>用户自定义的类加载器 </p>
<ul>
<li>Java.long.ClassLoader 的子类（继承），用户可以定制类的加载方式</li>
</ul>
</li>
</ol>
<img src="/posts/ab1b346/image-20200921104743926.png" class>

<h3 id="3-双亲委派机制"><a href="#3-双亲委派机制" class="headerlink" title="3. 双亲委派机制"></a>3. 双亲委派机制</h3><p>双亲委派机制的工作原理：</p>
<ol>
<li>类加载器收到类加载的请求</li>
<li>把这个请求委托给父加载器去完成，一直向上委托，直到启动类加载器（Bootstrap Class Loader）</li>
<li>启动类加载器检查能不能加载（使用findClass()方法），能就加载（结束），否则抛出异常，通知子加载器进行加载</li>
<li>重复步骤 3.</li>
</ol>
<img src="/posts/ab1b346/image-20200921135727317.png" class>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>04_栈 Stack</title>
    <url>/posts/a62f080d.html</url>
    <content><![CDATA[<h3 id="1-什么是栈"><a href="#1-什么是栈" class="headerlink" title="1. 什么是栈"></a>1. 什么是栈</h3><p>先进后出，后进先出</p>
<p><strong>栈管理程序运行</strong>，存储一些基本类型的值、对象的引用、方法等。 </p>
<p>栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。 </p>
<p>说明：</p>
<ol>
<li>栈也叫栈内存，主管 Java 程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放。</li>
<li><strong>对于栈来说不存在垃圾回收问题</strong>，只要线程一旦结束，该栈就 Over，生命周期和线程一致，是线程私有的。</li>
<li>方法自己调自己就会导致栈溢出（递归死循环测试）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-栈运行原理"><a href="#2-栈运行原理" class="headerlink" title="2. 栈运行原理"></a>2. 栈运行原理</h3><p>Java 栈的组成元素：<strong>栈帧</strong></p>
<p>栈帧是一种用于帮助虚拟机执行方法调用与方法执行的数据结构。它是独立于线程的，一个线程有自己的一个栈帧。封装了方法的局部变量表、动态链接信息、方法的返回地址以及操作数栈等信息。</p>
<p><strong>每执行一个方法都会产生一个栈帧</strong>，保存到栈顶，顶部栈就是当前的方法，该方法执行完毕后会自动将此栈帧出栈。</p>
<p>比方说，第一个方法从调用开始到执行完成，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。当一个方法 A 被调用时就产生了一个栈帧 F1，并被压入到栈中，A 方法又调用了 B 方法，于是产生了栈帧 F2也被压入栈中，B 方法又调用了 C 方法，于是产生栈帧 F3 也被压入栈中。执行完毕后，先弹出 F3， 然后弹出 F2，再弹出 F1。</p>
<h3 id="3-堆、栈、方法区的交互关系"><a href="#3-堆、栈、方法区的交互关系" class="headerlink" title="3. 堆、栈、方法区的交互关系"></a>3. 堆、栈、方法区的交互关系</h3><blockquote>
<p><a href="https://blog.csdn.net/ycd500756/article/details/80739531">https://blog.csdn.net/ycd500756/article/details/80739531</a></p>
</blockquote>
<img src="/posts/a62f080d/image-20200921212840119.png" class>

<ul>
<li>堆区：存放的是使用 new 关键字创建的类或者数组的（含成员变量）</li>
<li>栈区：存放的是局部变量（注：形参也是局部变量的一中）和对象的声明引用</li>
<li>方法区（常量池）：存放的是字符串常量，其他基本数据类型的常量，类和接口全限定名，属性和方法名，描述符</li>
<li>静态域：静态变量</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AppMain类</span></span><br><span class="line"><span class="comment"> * 运行时, JVM把AppMain的信息都放入方法区 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppMain</span> </span>&#123;</span><br><span class="line">    <span class="comment">// main方法本身放入方法区</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// new一个Sample实例后, 引用放入栈区, 对象放入堆</span></span><br><span class="line">        Sample test1 = <span class="keyword">new</span> Sample(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        test1.printName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sample类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Sample</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// printName方法本身放入方法区</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/posts/a62f080d/20180619214704117.png" class>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>03_Native 方法、程序计数器和方法区</title>
    <url>/posts/51063091.html</url>
    <content><![CDATA[<h3 id="1-Native-方法"><a href="#1-Native-方法" class="headerlink" title="1. Native 方法"></a>1. Native 方法</h3><p><strong>JNI：Java Native Interface （Java 本地方法接口）</strong> </p>
<p>凡是带了<code>native</code>关键字的，说明 Java 的作用范围达不到，去调用底层 C 语言的库，这些方法会进入本地方法栈。</p>
<p><strong>Native Method Stack 本地方法栈</strong></p>
<p>本地接口的作用是<strong>融合不同的编程语言为 Java 所用</strong>，它的初衷是融合 C/C++ 程序，Java 在诞生的时候是 C/C++ 横行的时候，想要立足，必须有调用 C、C++ 的程序，于是就在内存中专门开辟了一块区域处理标记为 native 的代码，它的具体做法是在 Native Method Stack 中登记 native 方法，在执行引擎（Execution Engine）执行的时候加载Native Libraies。</p>
<p>目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过 Java 程序驱动打印机或者 Java 系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间通信很发达，比如可以使用 Socket 通信，也可以使用 Web Service 等等。</p>
<a id="more"></a>

<h3 id="2-程序计数器-Program-Counter-Register"><a href="#2-程序计数器-Program-Counter-Register" class="headerlink" title="2. 程序计数器 Program Counter Register"></a>2. 程序计数器 Program Counter Register</h3><p>每个线程都有一个程序计数器，是线程私有的。</p>
<p>程序计数器是一块较小的内存空间，它的作用可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
<p>是一个非常小的内存空间，几乎可以忽略不计。</p>
<h3 id="3-方法区-Method-Area"><a href="#3-方法区-Method-Area" class="headerlink" title="3. 方法区 Method Area"></a>3. 方法区 Method Area</h3><p>是 Java 虚拟机规范中定义的运行时数据区域之一，它与堆（heap）一样在线程之间共享。</p>
<p>Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p>
<p>==静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关。==</p>
<hr>
<p>JDK7 之前，永久代用于存储已被虚拟机加载的类信息、常量、字符串常量、类静态变量、即时编译器编译后的代码等数据。每当一个类初次被加载的时候，它的元数据都会被放到永久代中。永久代大小有限制，如果加载的类太多，很可能导致永久代内存溢出，即 <code>java.lang.OutOfMemoryError: PermGen</code>。</p>
<hr>
<p>JDK8 彻底将永久代移除出 HotSpot JVM，将其原有的数据迁移至 Java Heap 或 Native Heap（Metaspace），取代它的是另一个内存区域被称为元空间（Metaspace）。</p>
<p>元空间是方法区的在 HotSpot JVM 中的实现，方法区主要用于存储类信息、常量池、方法数据、方法代码、符号引用等。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实 现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。</p>
<p>可以通过<code>-XX:MetaspaceSize</code>和<code>-XX:MaxMetaspaceSize</code>配置内存大小。</p>
<p>如果 Metaspace 的空间占用达到了设定的最大值，那么就会触发GC来收集死亡对象和类的加载器。</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>05_堆 Heap</title>
    <url>/posts/d9304f42.html</url>
    <content><![CDATA[<p>Java 7 之前</p>
<p>Heap 堆，<strong>一个 JVM 实例只存在一个堆内存</strong>，堆内存的大小是可以调节的，类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行，堆内存分为三部分：</p>
<ul>
<li>新生区（Young Generation Space）Young/New</li>
<li>养老区（Tenure generation space）Old/Tenure</li>
<li>永久区（PermanentSpace）Perm</li>
</ul>
<p>堆内存<strong>逻辑上</strong>分为三部分：新生，养老，永久（元空间 : Java 8 以后名称）</p>
<p><strong>GC 垃圾回收主要是在新生区和养老区</strong>，又分为轻 GC 和重 GC，如果内存不够，或者存在死循环，就会导致<code>java.lang.OutOfMemoryError: Java heap space</code></p>
<a id="more"></a>

<h3 id="1-新生区"><a href="#1-新生区" class="headerlink" title="1. 新生区"></a>1. 新生区</h3><p>新生区是类诞生，成长，消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。</p>
<p>新生区又分为两部分：伊甸区（Eden Space）和幸存者区（Survivor Space），所有的类都是在伊甸区被 new 出来的，幸存区有两个：0 区和 1 区，当伊甸园的空间用完时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（Minor GC）。将伊甸园中的剩余对象移动到幸存 0 区，若幸存 0 区也满了，再对该区进行垃圾回收，然后移动到 1 区（这里幸存 0 区和 1 区是一个互相交替的过程）。</p>
<h3 id="2-养老区"><a href="#2-养老区" class="headerlink" title="2. 养老区"></a>2. 养老区</h3><p>如果 1 区也满了，再移动到养老区，若养老区也满了，那么这个时候将产生 MajorGC（Full GC），进行养老区的内存清理，若养老区执行了 Full GC 后发现依然无法进行对象的保存，就会产生 OOM 异常<code>OutOfMemoryError</code>。 </p>
<p>如果出现<code>java.lang.OutOfMemoryError: java heap space</code>异常，说明 Java 虚拟机的堆内存不够，原因如下： </p>
<ol>
<li>Java虚拟机的堆内存设置不够，可以通过参数 -Xms（初始值大小），-Xmx（最大大小）来调整。 </li>
<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）或者死循环.</li>
</ol>
<h3 id="3-永久区"><a href="#3-永久区" class="headerlink" title="3. 永久区"></a>3. 永久区</h3><p>永久存储区是一个常驻内存区域，用于存放 JDK 自身所携带的 Class，Interface 的元数据，也就是说<strong>它存储的是运行环境必须的类信息</strong>，被装载进此区域的数据是<strong>不会被垃圾回收器回收掉</strong>的，关闭 JVM 才会释放此区域所占用的内存。</p>
<p>如果出现<code>java.lang.OutOfMemoryError: PermGen space</code>，说明是 Java 虚拟机对永久代 Perm 内存设置不够。一般出现这种情况，都是程序启动需要加载大量的第三方 jar 包，例如：在一个 Tomcat 下部署 了太多的应用。或者大量动态反射生成的类不断被加载，最终导致 Perm 区被占满。</p>
<p><strong>注意：</strong></p>
<ul>
<li>JDK 1.6 之前： 有永久代，<strong>常量池在方法区</strong></li>
<li>JDK 1.7： 有永久代，但是已经逐步“去永久代”，常量池在堆</li>
<li>JDK 1.8 及之后：无永久代，<strong>常量池在元空间</strong></li>
</ul>
<hr>
<p>实际而言，方法区（Method Area）和堆一样，是各个线程共享的内存区域，它用于存储虚拟机加载的<strong>类信息 + 普通常量 + 静态常量 + 编译器</strong>编译后的代码，虽然 JVM 规范将方法区描述为堆的一个逻辑部 分，但它却还有一个别名，叫做 Non-Heap（非堆），目的就是要和堆分开。</p>
<p>对于 HotSpot 虚拟机，很多开发者习惯将方法区称之为“永久代（Parmanent Gen）”，但严格本质上说 两者不同，或者说使用永久代实现方法区而已，永久代是方法区（相当于是一个接口）的一个实现，JDK 1.7 的版本中，已经将原本放在永久代的字符串常量池移走。</p>
<p>常量池（Constant Pool）是方法区的一部分，Class 文件除了有类的版本、字段、方法、接口描述信息外，还有一项信息就是常量池，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<img src="/posts/d9304f42/image-20200921221011928.png" class>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>06_GC 详解</title>
    <url>/posts/5c68b0b8.html</url>
    <content><![CDATA[<h3 id="0-常见面试题"><a href="#0-常见面试题" class="headerlink" title="0. 常见面试题"></a>0. 常见面试题</h3><ol>
<li>JVM 内存模型以及分区，需要详细到每个区放什么</li>
<li>堆里面的分区：Eden，Survival from to，老年代，各自的特点。</li>
<li>GC 的三种收集方法：标记清除，标记整理，复制算法的原理与特点，分别用在什么地方</li>
<li>Minor GC 与 Full GC 分别在什么时候发生</li>
</ol>
<h3 id="1-GC-算法总体概述"><a href="#1-GC-算法总体概述" class="headerlink" title="1. GC 算法总体概述"></a>1. GC 算法总体概述</h3><p>一个对象的历程</p>
<img src="/posts/5c68b0b8/image-20200922082947515.png" class>

<p><strong>JVM 在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代</strong></p>
<p>因此 GC 按照回收的区域又分了两种类型，一种是普通的 GC（minor GC），一种是全局 GC （major GC or Full GC）</p>
<ul>
<li>普通 GC：只针对新生代区域的 GC</li>
<li>全局 GC：针对老年代的 GC，偶尔伴随对新生代的 GC 以及对永久代的 GC</li>
</ul>
<a id="more"></a>

<h3 id="2-GC-四大算法"><a href="#2-GC-四大算法" class="headerlink" title="2. GC 四大算法"></a>2. GC 四大算法</h3><h4 id="2-1-引用计数法"><a href="#2-1-引用计数法" class="headerlink" title="2.1 引用计数法"></a>2.1 引用计数法</h4><img src="/posts/5c68b0b8/image-20200922083137251.png" class>

<p>每个对象有一个引用计数器，当对象被引用一次则计数器加 1，当对象引用失效一次，则计数器减 1，计数器为 0 的对象意味着是垃圾对象，可以被 GC 回收。</p>
<p>目前虚拟机基本都是采用<strong>可达性算法</strong>，从 GC Roots 作为起点开始搜索，那么整个连通图中的对象边都是活对象，对于 GC Roots 无法到达的对象变成了垃圾回收对象，随时可被 GC 回收。</p>
<p>缺点：</p>
<ul>
<li>每次对对象赋值时均要维护引用计数器，且计数器本身也有一定的消耗。</li>
<li>较难处理循环引用</li>
</ul>
<p><strong>JVM 的实现一般不采用这种方式</strong></p>
<h4 id="2-2-复制算法-Copying"><a href="#2-2-复制算法-Copying" class="headerlink" title="2.2 复制算法 Copying"></a>2.2 复制算法 Copying</h4><p><strong>年轻代中使用的 Minor GC，采用的就是复制算法（Copying）</strong></p>
<p>Minor GC 会把 Eden 中的所有活的对象都移到 Survivor 区域中，如果 Survivor 区中放不下，那么剩下的活的对象就被移动到 Old Generation 中，也就是说，<strong>一旦收集后，Eden 就是变成空的了。</strong></p>
<p>当对象在 Eden（包括一个 Survivor 区域，这里假设是 From 区域）出生，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳 （To 区域 ，即 To 区域有足够的内存空间来存储 Eden 和 From 区域中存活的对象），则使用复制算法将这些仍然还活着的对象复**制到另外一块 **Survivor 区域（To 区域）中，然后清理所使用过的 Eden 以及 Survivor 区域（Form 区域），并且将这些对象的年龄设置为 1。</p>
<p>以后对象在 Survivor 区，每熬过一次 Minor GC，就将这个对象的年龄 + 1，当这个对象的年龄达到某一个值的时候（默认是15岁，通过<code>XX:MaxTenuringThreshold</code>设定参数）这些对象就会成为老年代。</p>
<p>面试题：如何判断哪个是 To 区呢？一句话：<strong>谁空谁是 To</strong></p>
<hr>
<p>复制算法的思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。</p>
<img src="/posts/5c68b0b8/image-20200922085159717.png" class>

<ul>
<li>优点<ul>
<li>不会产生内存碎片。</li>
</ul>
</li>
<li>缺点<ul>
<li>浪费了一半的内存，这太要命了；</li>
<li>如果对象的存活率很高，我们可以极端一点，假设是100%存活，那么我们需要将所有对象都复制一 遍，并将所有引用地址重置一遍。复制这一工作所花费的时间，在对象存活率达到一定程度时，将会变的不可忽视，所以从以上描述不难看出。复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%的内存浪费。</li>
</ul>
</li>
</ul>
<h4 id="2-3-标记清除法-Mark-Sweep"><a href="#2-3-标记清除法-Mark-Sweep" class="headerlink" title="2.3 标记清除法 Mark-Sweep"></a>2.3 标记清除法 Mark-Sweep</h4><p><strong>老年代一般是由标记清除或者是标记清除与标记整理的混合实现</strong></p>
<p>当堆中的有效内存空间被耗尽的时候，就会停止整个程序（也被称为 stop the world），然后进行两项工作，第一项则是标记，第二项则是清除。</p>
<img src="/posts/5c68b0b8/image-20200922090752833.png" class>

<ul>
<li><p>标记：从引用根节点开始标记所有被引用的对象，标记的过程其实就是遍历所有的 GC Roots ，然后将所有 GC Roots 可达的对象，标记为存活的对象。</p>
</li>
<li><p>清除： 遍历整个堆，把未标记的对象清除。 </p>
</li>
</ul>
<p>缺点：</p>
<ol>
<li>效率比较低（递归与全堆对象遍历），而且在进行 GC 的时候，需要停止应用程序，这会导致用户体验非常差劲；</li>
<li>这种方式清理出来的空闲内存是不连续的。这点不难理解，我们的死亡对象都是随机的出现在内存的各个角落，现在把他们清除之后，内存的布局自然乱七八糟，而为了应付 这一点，JVM 就不得不维持一个内存空间的空闲列表，这又是一种开销。而且在分配数组对象的时候，寻找连续的内存空间会不太好找。</li>
</ol>
<h4 id="2-3-标记压缩法-Mark-Compact"><a href="#2-3-标记压缩法-Mark-Compact" class="headerlink" title="2.3 标记压缩法 Mark-Compact"></a>2.3 标记压缩法 Mark-Compact</h4><p>在整理压缩阶段，不再对标记的对象作回收，而是通过所有存活对象都像一端移动，然后直接清除边界以外的内存。</p>
<img src="/posts/5c68b0b8/image-20200922091120493.png" class>

<p>可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉，如此一来，当我们需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p>
<p>标记、整理算法不仅可以弥补标记、清除算法当中内存区域分散的缺点，也消除了复制算法当中，内存减半的高额代价。</p>
<h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h3><p>内存效率：复制算法 &gt; 标记清除算法 &gt; 标记整理算法 （时间复杂度） </p>
<p>内存整齐度：复制算法 = 标记整理算法 &gt; 标记清除算法</p>
<p>内存利用率：标记整理算法 = 标记清除算法 &gt; 复制算法</p>
<p>可以看出，效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存，而为了尽量兼顾上面所提到的三个指标，标记整理算法相对来说更平滑一些，但是效率上依然不尽如人意，它比复制算法多了一个标记的阶段，又比标记清除多了一个整理内存的过程。</p>
<p>所以 GC 算法其实是<strong>分代收集算法</strong></p>
<p><strong>年轻代：（Young Gen）</strong> </p>
<p>年轻代特点是区域相对老年代较小，对象存活低。</p>
<p>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因而很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过 hotspot 中的两个 survivor 的设计得到缓解。</p>
<p><strong>老年代：（Tenure Gen）</strong></p>
<p>老年代的特点是区域较大，对象存活率高。</p>
<p>这种情况，存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记清除或者是标记清除与标记整理的混合实现。</p>
<p>Mark 阶段的开销与存活对象的数量成正比，这点来说，对于老年代，标记清除或者标记整理有一些不符，但可以通过多核多线程利用，对并发，并行的形式提标记效率。</p>
<p>Sweep 阶段的开销与所管理里区域的大小相关，但 Sweep “就地处决”的 特点，回收的过程没有对象的移动。使其相对 其他有对象移动步骤的回收算法，仍然是是效率最好的，但是需要解决内存碎片的问题。</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>IO 流</title>
    <url>/posts/4d66dff8.html</url>
    <content><![CDATA[<h3 id="1-四大家族"><a href="#1-四大家族" class="headerlink" title="1. 四大家族"></a>1. 四大家族</h3><table>
<thead>
<tr>
<th>类名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>java.io.InputStream</td>
<td>字节输入流</td>
</tr>
<tr>
<td>java.io.OutputStream</td>
<td>字节输出流</td>
</tr>
<tr>
<td>java.io.Reader</td>
<td>字符输入流</td>
</tr>
<tr>
<td>java.io.Writer</td>
<td>字符输出流</td>
</tr>
</tbody></table>
<p><em>注：类名以 Stream 结尾都是字节流，以 Reader/Writer 结尾都是字符流</em></p>
<a id="more"></a>

<h3 id="2-cloth-和-flush"><a href="#2-cloth-和-flush" class="headerlink" title="2. cloth() 和 flush()"></a>2. cloth() 和 flush()</h3><ul>
<li>所有流用完后记得调用 close() 方法关闭</li>
<li>所有输出流用完后记得调用 flush() 方法清空管道</li>
</ul>
<h3 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h3><ul>
<li>文件专属<ul>
<li>java.io.FileInputStream（掌握）</li>
<li>java.io.FileOutputStream（掌握）</li>
<li>java.io.FileReader</li>
<li>java.io.FileWriter</li>
</ul>
</li>
<li>转换流：将字节流转换成字符流<ul>
<li>java.io.InputStreamReader</li>
<li>java.io.OutputStreamWriter</li>
</ul>
</li>
<li>缓冲流专属<ul>
<li>java.io.BufferedReader</li>
<li>java.io.BufferedWriter</li>
<li>java.io.BufferedInputStream</li>
<li>java.io.BufferedOutputStream</li>
</ul>
</li>
<li>数据流专属<ul>
<li>java.io.DataInputStrea</li>
<li>java.io.DataOutputStream</li>
</ul>
</li>
<li>标准输出流<ul>
<li>java.io.PrintWrite</li>
<li>java.io.PrintStream（掌握）</li>
</ul>
</li>
<li>对象专属<ul>
<li>java.io.ObjectInputStrea（掌握）</li>
<li>java.io.ObjectOutputStream（掌握）</li>
</ul>
</li>
</ul>
<h3 id="4-FileInputStream"><a href="#4-FileInputStream" class="headerlink" title="4. FileInputStream"></a>4. FileInputStream</h3><p>可以读取任何形式的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 相对路径 根目录为工程目录</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\temp.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// available()获取文件总字节数量</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(buffer, <span class="number">0</span>, len));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally语句中确保流一定关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 关闭流的前提是流不为空 如果为空就没必要关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-FileOutputStream"><a href="#5-FileOutputStream" class="headerlink" title="5. FileOutputStream"></a>5. FileOutputStream</h3><p>可以写入任何形式的文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 以追加的方式在文件末尾写入</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\output.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">            String str=<span class="string">&quot;字符串&quot;</span>;</span><br><span class="line">            <span class="comment">// 字符串转换成byte数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = str.getBytes();</span><br><span class="line">            fos.write(buffer);</span><br><span class="line">            fos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally语句中确保流一定关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 关闭流的前提是流不为空 如果为空就没必要关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-文件复制"><a href="#6-文件复制" class="headerlink" title="6. 文件复制"></a>6. 文件复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\output.txt&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\output_copy.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 一次最多拷贝1M</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            fos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 分开try catch 否则其中一个出现已成 可能会影响到另一个流的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-FileReader"><a href="#7-FileReader" class="headerlink" title="7. FileReader"></a>7. FileReader</h3><p>只能读取普通文本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileReader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> FileReader(<span class="string">&quot;src\\temp.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 一次读一个字符 只能读普通文本</span></span><br><span class="line">            <span class="keyword">while</span> ((length = reader.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(cbuf, <span class="number">0</span>, length));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-FileWriter"><a href="#8-FileWriter" class="headerlink" title="8. FileWriter"></a>8. FileWriter</h3><p>只能写入普通文本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 只能写普通文本</span></span><br><span class="line">            writer = <span class="keyword">new</span> FileWriter(<span class="string">&quot;src\\out.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span>[] cbuf = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>&#125;;</span><br><span class="line">            writer.write(cbuf,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-BufferedReader"><a href="#9-BufferedReader" class="headerlink" title="9. BufferedReader"></a>9. BufferedReader</h3><ul>
<li>自带缓冲，不需要自定义 byte 或 char 数组</li>
<li>当一个流的构造方法中需要另一个流的时候，这个作为参数的流叫做：节点流<br>外部复杂包装的流叫做: 包装流，或者叫处理流<br>例如：FileReader 是节点流，BufferedReader 叫做包装流/处理流</li>
</ul>
<p><em>注意：节点流在包装流关闭时会自动关闭</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;src\\temp.txt&quot;</span>));</span><br><span class="line">            String str = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 读取一行 但不包括换行符</span></span><br><span class="line">            <span class="keyword">while</span> ((str = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-BufferedWriter"><a href="#10-BufferedWriter" class="headerlink" title="10. BufferedWriter"></a>10. BufferedWriter</h3><p>自带缓冲，不需要自定义 byte 或 char 数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;src\\buffer.txt&quot;</span>));</span><br><span class="line">            String str = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">            writer.write(str);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="11-InputStreamReader"><a href="#11-InputStreamReader" class="headerlink" title="11. InputStreamReader"></a>11. InputStreamReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 字节流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\temp.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 通过转换流转换 将字节流转换成字符流</span></span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            String str = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 读取一行 但不包括换行符</span></span><br><span class="line">            <span class="keyword">while</span> ((str = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-OutputStreamWriter"><a href="#12-OutputStreamWriter" class="headerlink" title="12. OutputStreamWriter"></a>12. OutputStreamWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamWriterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 字节流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\buffer.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 通过转换流转换 将字节流转换成字符流</span></span><br><span class="line">            OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(fos);</span><br><span class="line">            writer = <span class="keyword">new</span> BufferedWriter(osw);</span><br><span class="line">            String str = <span class="string">&quot;Java真好&quot;</span>;</span><br><span class="line">            writer.write(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-DataInputStream"><a href="#13-DataInputStream" class="headerlink" title="13. DataInputStream"></a>13. DataInputStream</h3><p>DataOutputStream 写的文件，只能用 DataInputStream 来读，并且读的时候需要知道写入的顺序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataInputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建数据专属的字节输入流</span></span><br><span class="line">            dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\data&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span> b = dis.readByte();</span><br><span class="line">            <span class="keyword">short</span> s = dis.readShort();</span><br><span class="line">            <span class="keyword">int</span> i = dis.readInt();</span><br><span class="line">            <span class="keyword">long</span> l = dis.readLong();</span><br><span class="line">            <span class="keyword">float</span> f = dis.readFloat();</span><br><span class="line">            <span class="keyword">double</span> d = dis.readDouble();</span><br><span class="line">            <span class="keyword">boolean</span> bol = dis.readBoolean();</span><br><span class="line">            <span class="keyword">char</span> c = dis.readChar();</span><br><span class="line"></span><br><span class="line">            System.out.println(b);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            System.out.println(l);</span><br><span class="line">            System.out.println(f);</span><br><span class="line">            System.out.println(d);</span><br><span class="line">            System.out.println(bol);</span><br><span class="line">            System.out.println(c);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-DataOutputStream"><a href="#14-DataOutputStream" class="headerlink" title="14. DataOutputStream"></a>14. DataOutputStream</h3><p>可以将数据连同数据类型一并写入文件，这个文件不是普通文本文档，记事本打不开</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataOutputStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建数据专属的字节输出流</span></span><br><span class="line">            dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\data&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">short</span> s = <span class="number">200</span>;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">300</span>;</span><br><span class="line">            <span class="keyword">long</span> l = <span class="number">400L</span>;</span><br><span class="line">            <span class="keyword">float</span> f = <span class="number">3.0F</span>;</span><br><span class="line">            <span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br><span class="line">            <span class="keyword">boolean</span> bol = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="comment">// 将数据类型和数据一起写到文件中</span></span><br><span class="line">            dos.writeByte(b);</span><br><span class="line">            dos.writeShort(s);</span><br><span class="line">            dos.writeInt(i);</span><br><span class="line">            dos.writeLong(l);</span><br><span class="line">            dos.writeFloat(f);</span><br><span class="line">            dos.writeDouble(d);</span><br><span class="line">            dos.writeBoolean(bol);</span><br><span class="line">            dos.writeChar(c);</span><br><span class="line"></span><br><span class="line">            dos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15-PrintStream"><a href="#15-PrintStream" class="headerlink" title="15. PrintStream"></a>15. PrintStream</h3><p>标准的字节输出流，默认输出到控制台，不需要手动关闭</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrintStream printStream = System.out;</span><br><span class="line">        printStream.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 标准输出流不再指向控制台, 指向log文件</span></span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\log&quot;</span>));</span><br><span class="line">            System.setOut(ps);</span><br><span class="line">            System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;hello lhx&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;hello someone&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java 基础</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda 表达式</title>
    <url>/posts/9fa75fc1.html</url>
    <content><![CDATA[<p>当需要定义一个匿名内部类来为实现一个函数式接口的对象时，可以使用 Lambda 表达式简化代码</p>
<p><em>函数式接口：只有一个方法的接口</em></p>
<p>Lambda 表达式可以通过以下这样一步一步简化来理解</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3. 静态内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;this is lambda, too&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILike iLike = <span class="keyword">new</span> Like();</span><br><span class="line">        iLike.lambda();</span><br><span class="line"></span><br><span class="line">        iLike = <span class="keyword">new</span> Like2();</span><br><span class="line">        iLike.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 4. 局部内部类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;this is lambda, three&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        iLike = <span class="keyword">new</span> Like3();</span><br><span class="line">        iLike.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 5. 匿名内部类 没有类的名称, 必须借助接口或者父类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        iLike = <span class="keyword">new</span> ILike() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;this is lambda, four&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        iLike.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. lambda表达式</span></span><br><span class="line">        iLike = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;this is lambda, five&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        iLike.lambda();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 函数式接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2. 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是有参方法，也没问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILove iLove = (<span class="keyword">int</span> a) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i love you &quot;</span> + a);</span><br><span class="line">        &#125;;</span><br><span class="line">        iLove.love(<span class="number">520</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILove</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且可以简化成这个样子。简化了括号，参数类型，花括号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ILove iLove = <span class="keyword">null</span>;</span><br><span class="line">iLove = a -&gt; System.out.println(<span class="string">&quot;i love you &quot;</span> + a);</span><br><span class="line">iLove.love(<span class="number">520</span>);</span><br></pre></td></tr></table></figure>

<p>但是如果方法中不止一行代码，就不能简化掉花括号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ILove iLove = a -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i love you &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;i love you, too &quot;</span> + a);</span><br><span class="line">&#125;;</span><br><span class="line">iLove.love(<span class="number">520</span>);</span><br></pre></td></tr></table></figure>

<p>但是如果方法不止一个参数，还是可以简化掉参数类型的，但是括号就得写上了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ILove iLove = (a, b) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i love you &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;i love you, too &quot;</span> + b) ;</span><br><span class="line">&#125;;</span><br><span class="line">iLove.love(<span class="number">520</span>, <span class="number">521</span>);</span><br></pre></td></tr></table></figure>

<p>常用的地方是线程中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Date date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(date));</span><br><span class="line">                    date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java 基础</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/posts/d366874c.html</url>
    <content><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Java 集合主要有 3 种重要的类型：</p>
<ul>
<li>List：是一个<strong>有序</strong>集合，可以放重复的数据</li>
<li>Set：是一个<strong>无序</strong>集合，不允许放重复的数据</li>
<li>Map：是一个<strong>无序</strong>集合，集合中包含一个键对象，一个值对象，键对象不允许重复，值对象可以重复</li>
</ul>
<img src="/posts/d366874c/image-20201005182552114.png" class>

<a id="more"></a>

<h3 id="2-Collection-和-Iterator"><a href="#2-Collection-和-Iterator" class="headerlink" title="2. Collection 和 Iterator"></a>2. Collection 和 Iterator</h3><p>Collection 是 List 和 Set 的父接口，在 Collection 中定义了一些主要方法</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td><code>add(E o)</code></td>
<td>确保此 collection 包含指定的元素（可选操作）</td>
</tr>
<tr>
<td>boolean</td>
<td><code>addAll(Collection&lt;? extends E&gt; c)</code></td>
<td>将指定 collection 中的所有元素都添加到此 collection 中（可选操作）</td>
</tr>
<tr>
<td>void</td>
<td><code>clear()</code></td>
<td>移除此 collection 中的所有元素（可选操作）</td>
</tr>
<tr>
<td>boolean</td>
<td><code>contains(Object o)</code></td>
<td>如果此 collection 包含指定的元素，则返回 true</td>
</tr>
<tr>
<td>boolean</td>
<td><code>containsAll(Collection&lt;?&gt; c)</code></td>
<td>如果此 collection 包含指定 collection 中的所有 元素，则返回 true</td>
</tr>
<tr>
<td>boolean</td>
<td><code>equals(Object o)</code></td>
<td>比较此 collection 与指定对象是否相等</td>
</tr>
<tr>
<td>int</td>
<td><code>hashCode()</code></td>
<td>返回此 collection 的哈希码值</td>
</tr>
<tr>
<td>boolean</td>
<td><code>isEmpty()</code></td>
<td>如果此 collection 不包含元素，则返回 true</td>
</tr>
<tr>
<td>Iterator<E></E></td>
<td><code>iterator()</code></td>
<td>返回在此 collection 的元素上进行迭代的迭代器</td>
</tr>
<tr>
<td>boolean</td>
<td><code>remove(Object o)</code></td>
<td>从此 collection 中移除指定元素的单个实例，如果存 在的话（可选操作）</td>
</tr>
<tr>
<td>boolean</td>
<td><code>removeAll(Collection&lt;?&gt; c)</code></td>
<td>移除此 collection 中那些也包含在指定 collection 中的所有元素（可选操作）</td>
</tr>
<tr>
<td>boolean</td>
<td><code>retainAll(Collection&lt;?&gt; c)</code></td>
<td>仅保留此 collection 中那些也包含在指定 collection 的元素（可选操作）</td>
</tr>
<tr>
<td>int</td>
<td><code>size()</code></td>
<td>返回此 collection 中的元素数</td>
</tr>
<tr>
<td>Object[]</td>
<td><code>toArray()</code></td>
<td>返回包含此 collection 中所有元素的数组</td>
</tr>
<tr>
<td><T> T[]</T></td>
<td><code>toArray(T[] a)</code></td>
<td>返回包含此 collection 中所有元素的数组；返回数组 的运行时类型与指定数组的运行时类型相同</td>
</tr>
</tbody></table>
<h3 id="3-List-接口"><a href="#3-List-接口" class="headerlink" title="3. List 接口"></a>3. List 接口</h3><h4 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h4><p>List 接口下面主要有两个实现 ArrayList 和 LinkedList，他们都是有顺序的，也就是放进去是什么顺序，取出来还是什么顺序，也就是基于线性存储，可以看作是一个可变数组</p>
<ul>
<li><p>ArrayList：查询数据比较快，添加和删除数据比较慢（基于可变数组）</p>
</li>
<li><p>LinkedList：查询数据比较慢，添加和删除数据比较快（基于链表数据结构）</p>
</li>
<li><p>Vector：已经不建议使用，Vector 中的方法都是同步的，效率慢，<strong>已经被 ArrayList 取代</strong></p>
</li>
<li><p>Stack：继承 Vector 实现了一个栈，栈结构是后进先出，目前<strong>已经被 LinkedList 取代</strong></p>
</li>
</ul>
<h4 id="3-2-ArrayList"><a href="#3-2-ArrayList" class="headerlink" title="3.2 ArrayList"></a>3.2 ArrayList</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        list.remove(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 增强for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用Iterator遍历 while循环</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用Iterator遍历 for循环</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Integer&gt; iterator1 = list.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.contains(<span class="number">3</span>));</span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line">        Object[] array = list.toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-LinkedList"><a href="#3-3-LinkedList" class="headerlink" title="3.3 LinkedList"></a>3.3 LinkedList</h4><p>和 ArrayList 一样</p>
<h3 id="4-Set-接口"><a href="#4-Set-接口" class="headerlink" title="4. Set 接口"></a>4. Set 接口</h3><h4 id="4-1-哈希表"><a href="#4-1-哈希表" class="headerlink" title="4.1 哈希表"></a>4.1 哈希表</h4><p>哈希表是一种数据结构，哈希表能够提供快速存取操作。哈希表是基于数组的，所以也存在缺点，数组一旦创建将不能扩展。</p>
<p>正常的数组，如果需要查询某个值，需要对数组进行遍历，只是一种线性查找，查找的速度比较慢。如果数组中的元素值和下标能够存在明确的对应关系，那么通过数组元素的值就可以换算出数据元素的下标，通过下标就可以快数定位数组元素，这样的数组就是哈希表。</p>
<h4 id="4-2-HashSet"><a href="#4-2-HashSet" class="headerlink" title="4.2 HashSet"></a>4.2 HashSet</h4><p>HashSet 中的数据是<strong>无序的不可重复的</strong>。HashSet 按照哈希算法存取数据的，具有非常好性能，它的工作原理是这样的，当向 HashSet 中插入数据的时候，他会调用对象的 hashCode() 得到该对象的哈希码，然后根据哈希码计算出该对象插入到集合中的位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-equals-和-hashCode"><a href="#4-3-equals-和-hashCode" class="headerlink" title="4.3 equals 和 hashCode"></a>4.3 equals 和 hashCode</h4><ul>
<li><p>两个对象 equals 相等，那么它的 hashCode 相等</p>
</li>
<li><p>两个对象 equals 不相等，那么它的 hashCode 并不要求它不相等，但一般建议不相等</p>
</li>
<li><p>hashCode 相等不代表两个对象相等（采用 equals 比较）</p>
</li>
</ul>
<p><strong>向 HashSet 或 HashMap 中加入数据时必须同时覆盖 equals 和 hashCode 方法，应该养成一种习惯，覆盖 equals 的同时最好同时覆盖 hashCode</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashCodeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Person&gt; people = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        people.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        people.add(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">30</span>));</span><br><span class="line">        people.add(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>, <span class="number">40</span>));</span><br><span class="line">        people.add(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">40</span>));</span><br><span class="line">        <span class="keyword">for</span> (Person person : people) &#123;</span><br><span class="line">            System.out.println(person.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(((Person) o).name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (name == <span class="keyword">null</span>) ? <span class="number">0</span> : name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-TreeSet"><a href="#4-4-TreeSet" class="headerlink" title="4.4 TreeSet"></a>4.4 TreeSet</h4><p>TreeSet 可以对 Set 集合进行排序，默认自然排序（即升序），但也可以做客户化的排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Set&lt;String&gt; set=<span class="keyword">new</span> TreeSet();</span><br><span class="line">        set.add(<span class="string">&quot;Horsen&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;Liu&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;LHX&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-实现-Comparable-接口完成排序"><a href="#4-5-实现-Comparable-接口完成排序" class="headerlink" title="4.5 实现 Comparable 接口完成排序"></a>4.5 实现 Comparable 接口完成排序</h4><p>对象放到 TreeSet 中 TreeSet 会对其进行排序，那么对象的类必须实现 Comparable 接口，如：基本类型的包装类和 String 他们都是可以排序的，他们都实现 Comparable 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">        <span class="comment">// 升序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age - ((Person) o).age;</span><br><span class="line">        <span class="comment">// 降序</span></span><br><span class="line">        <span class="comment">// return ((Person) o).age - this.age;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;非法参数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-6-实现-Comparator-接口完成排序"><a href="#4-6-实现-Comparator-接口完成排序" class="headerlink" title="4.6 实现 Comparator 接口完成排序"></a>4.6 实现 Comparator 接口完成排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o1 != <span class="keyword">null</span> &amp;&amp; o2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.age - o2.age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;非法参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="4-7-Comparable-和-Comparator的区别"><a href="#4-7-Comparable-和-Comparator的区别" class="headerlink" title="4.7 Comparable 和 Comparator的区别"></a>4.7 Comparable 和 Comparator的区别</h4><p>一个类实现了 Camparable 接口则表明这个类的对象之间是可以相互比较的，这个类对象组成 的集合就可以直接使用 sort 方法排序。</p>
<p>Comparator可以看成一种算法的实现，将算法和数据分离，Comparator 也可以在下面两种环境 下使用：</p>
<ol>
<li>类的没有考虑到比较问题而没有实现 Comparable，可以通过 Comparator 来实现排序而不必改变对象本身</li>
<li>可以使用多种排序标准，比如升序、降序等</li>
</ol>
<h3 id="5-Map-接口"><a href="#5-Map-接口" class="headerlink" title="5. Map 接口"></a>5. Map 接口</h3><p>Map 中可以放置<strong>键值对</strong>，也就是每一个元素都包含键对象和值对象，Map 实现较常用的为 HashMap，HashMap 对键对象的存取和 HashSet 一样，仍然采用的是哈希算法，所以如果使用<br>自定类作为 Map 的键对象，必须复写 equals 和 hashCode 方法。</p>
<h4 id="5-1-HashMap"><a href="#5-1-HashMap" class="headerlink" title="5.1 HashMap"></a>5.1 HashMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        map.put(<span class="number">1002</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        map.put(<span class="number">1003</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        map.put(<span class="number">1004</span>, <span class="string">&quot;Horsen&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        <span class="comment">// 使用entrySet遍历Map(最常用)</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;,&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用keySet</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用lambda表达式</span></span><br><span class="line">        map.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot;,&quot;</span> + value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-TreeMap"><a href="#5-2-TreeMap" class="headerlink" title="5.2 TreeMap"></a>5.2 TreeMap</h4><p>treeMap 可以对 Map 中的 key 进行排序，如果 map 中的 key 采用的是自定类那么需要实现 Comaprable 或Comparator 接口完成排序</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java 基础</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Mybatis-Plus 概述</title>
    <url>/posts/a471f418.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>用来简化 JDBC 操作</p>
<blockquote>
<p>官网：<a href="https://baomidou.com/">https://baomidou.com/</a></p>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
</blockquote>
<ul>
<li><p>润物无声</p>
<p>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑。</p>
</li>
<li><p>效率至上</p>
<p>只需简单配置，即可快速进行单表 CRUD 操作，从而节省大量时间。</p>
</li>
<li><p>丰富功能</p>
<p>代码生成、物理分页、性能分析等功能一应俱全。</p>
</li>
</ul>
<h3 id="2-特性"><a href="#2-特性" class="headerlink" title="2. 特性"></a>2. 特性</h3><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CRUD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis-Plus</category>
      </categories>
      <tags>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>02_快速入门</title>
    <url>/posts/ebe1fb83.html</url>
    <content><![CDATA[<blockquote>
<p>参考：<a href="https://baomidou.com/guide/quick-start.html">https://baomidou.com/guide/quick-start.html</a></p>
</blockquote>
<h3 id="1-快速开始"><a href="#1-快速开始" class="headerlink" title="1. 快速开始"></a>1. 快速开始</h3><ol>
<li><p>创建数据库 mybatis_plus</p>
</li>
<li><p>创建数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">USER</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> (<span class="keyword">id</span>, <span class="keyword">NAME</span>, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>新建 Spring Boot 项目</p>
</li>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong>使用 mybatis-plus 可以节省大量的代码，尽量不要同时导入 mybatis 和 mybatis-plus</p>
</li>
<li><p>连接数据库</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类和 Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对应的Mapper要继承BaseMapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来，所有的 CRUD 就编写好了，不需要写 XML 文件了</p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承了BaseMapper, 所有的方法都来自己父类</span></span><br><span class="line"><span class="comment">     * 也可以编写自己的扩展方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MybatisPlusApplicationTests</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数是一个Wrapper 条件构造器</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-配置日志"><a href="#2-配置日志" class="headerlink" title="2. 配置日志"></a>2. 配置日志</h3><p>所有的 sql 语句现在是不可见的，想要希望知道它是怎么执行的，必须要看日志</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置日志    </span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<img src="/posts/ebe1fb83/image-20200903093040864.png" class>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis-Plus</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>03_CRUD 扩展</title>
    <url>/posts/b8cf374c.html</url>
    <content><![CDATA[<h3 id="1-插入操作"><a href="#1-插入操作" class="headerlink" title="1. 插入操作"></a>1. 插入操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">&quot;Horsen&quot;</span>).setAge(<span class="number">3</span>).setEmail(<span class="string">&quot;horsenliu@qq.com&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.insert(user);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>数据库插入的 id 的默认值为全局唯一的 id</p>
<img src="/posts/b8cf374c/image-20200903094356315.png" class>

<a id="more"></a>

<h3 id="2-主键生成策略"><a href="#2-主键生成策略" class="headerlink" title="2. 主键生成策略"></a>2. 主键生成策略</h3><blockquote>
<p>分布式系统唯一 id 生成：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p>
</blockquote>
<h4 id="2-1-雪花算法"><a href="#2-1-雪花算法" class="headerlink" title="2.1 雪花算法"></a>2.1 雪花算法</h4><p>SnowFlake 是 Twitter 开源的分布式 ID 生成算法，结果是一个 long 型的 ID。</p>
<p>其核心思想是：使用 41bit 作为毫秒数，10bit 作为机器的 ID（5bit 是数据中心，5bit 是机器 ID），12bit 作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。可以保证几乎全球唯一。</p>
<h4 id="2-2-主键自增"><a href="#2-2-主键自增" class="headerlink" title="2.2 主键自增"></a>2.2 主键自增</h4><ol>
<li><p>实体类字段上添加<code>@TableId(type = IdType.AUTO)</code></p>
</li>
<li><p>数据库字段设置自增</p>
<img src="/posts/b8cf374c/image-20200903095142600.png" class>

</li>
</ol>
<table>
<thead>
<tr>
<th>IdType 的值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>AUTO(0)</code></td>
<td>数据库ID自增</td>
</tr>
<tr>
<td><code>NONE(1)</code></td>
<td>该类型为未设置主键类型</td>
</tr>
<tr>
<td><code>INPUT(2)</code></td>
<td>用户输入ID，该类型可以通过自己注册自动填充插件进行填充</td>
</tr>
<tr>
<td><em>以下3种类型只有当插入对象 ID 为空，才自动填充</em></td>
<td></td>
</tr>
<tr>
<td><code>ID_WORKER(3)</code></td>
<td>全局唯一ID (idWorker)</td>
</tr>
<tr>
<td><code>UUID(4)</code></td>
<td>全局唯一ID (UUID)</td>
</tr>
<tr>
<td><code>ID_WORKER_STR(5)</code></td>
<td>字符串全局唯一ID (idWorker 的字符串表示)</td>
</tr>
</tbody></table>
<h3 id="2-更新操作"><a href="#2-更新操作" class="headerlink" title="2. 更新操作"></a>2. 更新操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">6L</span>).setName(<span class="string">&quot;HorsenLiu&quot;</span>).setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="comment">// 注意参数是一个对象</span></span><br><span class="line">    <span class="keyword">int</span> i = userMapper.updateById(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/posts/b8cf374c/image-20200903151932495.png" class>

<p>会自动拼接动态 SQL</p>
<h3 id="3-自动填充"><a href="#3-自动填充" class="headerlink" title="3. 自动填充"></a>3. 自动填充</h3><blockquote>
<p>《阿里巴巴开发手册》：</p>
<p>【强制】表必备三字段：id, gmt_create, gmt_modified。 </p>
<p>说明：其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新。</p>
</blockquote>
<h4 id="3-1-方式一：数据库级别（工作中不建议使用）"><a href="#3-1-方式一：数据库级别（工作中不建议使用）" class="headerlink" title="3.1 方式一：数据库级别（工作中不建议使用）"></a>3.1 方式一：数据库级别（工作中不建议使用）</h4><ol>
<li><p>在表中新增字段 create_time, update_time</p>
<img src="/posts/b8cf374c/image-20200903153540552.png" class>
</li>
<li><p>修改实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Date createTime; </span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-2-方式二：代码级别"><a href="#3-2-方式二：代码级别" class="headerlink" title="3.2 方式二：代码级别"></a>3.2 方式二：代码级别</h4><ol>
<li><p>删除默认值</p>
</li>
<li><p>在实体类字段上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建 handler 包，编写处理器来处理这个注解，不要忘记<code>@Component</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时的填充策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insert fill......&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时的填充策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start update fill......&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-乐观锁"><a href="#4-乐观锁" class="headerlink" title="4. 乐观锁"></a>4. 乐观锁</h3><p><strong>悲观锁</strong>：当要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制。</p>
<p><strong>乐观锁</strong>：乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。</p>
<p><strong>乐观锁实现方式</strong>：</p>
<ul>
<li>取出记录时，获取当前 version</li>
<li>更新时，带上这个 version</li>
<li>执行更新时，<code>set version = newVersion where version = oldVersion</code></li>
<li>如果 version 不对，就更新失败</li>
</ul>
<hr>
<ol>
<li><p>数据库添加 version 字段</p>
<img src="/posts/b8cf374c/image-20200903175551301.png" class>
</li>
<li><p>修改实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建 config 包，注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户信息</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">// 更新用户信息</span></span><br><span class="line">    user.setName(<span class="string">&quot;Horsen&quot;</span>).setEmail(<span class="string">&quot;123@123.com&quot;</span>);</span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 线程1</span></span><br><span class="line">    User user1 = userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">    user1.setName(<span class="string">&quot;Horsen1&quot;</span>).setEmail(<span class="string">&quot;899879@98798.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另一个线程插队</span></span><br><span class="line">    User user2 = userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">    user2.setName(<span class="string">&quot;Horsen2&quot;</span>).setEmail(<span class="string">&quot;123312@123321.com&quot;</span>);</span><br><span class="line">    userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">    userMapper.updateById(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个测试成功，第二个测试被另一个线程给插队了</p>
</li>
</ol>
<h3 id="5-查询操作"><a href="#5-查询操作" class="headerlink" title="5. 查询操作"></a>5. 查询操作</h3><ol>
<li><p>批量查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按条件查询，使用 map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Horsen&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="6-分页查询（常用）"><a href="#6-分页查询（常用）" class="headerlink" title="6. 分页查询（常用）"></a>6. 分页查询（常用）</h3><ol>
<li><p>配置组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 参数1:当前页 参数2:页面大小</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;总行数: &quot;</span>+page.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="7-删除操作"><a href="#7-删除操作" class="headerlink" title="7. 删除操作"></a>7. 删除操作</h3><ol>
<li><p>通过 ID 删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">13013347232116L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>批量删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userMapper.deleteBatchIds(Arrays.asList(<span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 map 删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Horsen&quot;</span>);</span><br><span class="line">    userMapper.deleteByMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="8-逻辑删除"><a href="#8-逻辑删除" class="headerlink" title="8. 逻辑删除"></a>8. 逻辑删除</h3><p><strong>物理删除</strong>：从数据库中直接移除</p>
<p><strong>逻辑删除</strong>：在数据库中没有被移除，而是通过一个变量来让它失效（deleted = 0 –&gt; deleted = 1）</p>
<p>管理员可以查看被删除的记录，防止数据的丢失，类似于回收站</p>
<ol>
<li><p>增加 deleted 字段</p>
<img src="/posts/b8cf374c/image-20200903223318212.png" class>
</li>
<li><p>修改实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic()</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逻辑删除组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 配置逻辑删除</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis-Plus</category>
      </categories>
      <tags>
        <tag>CRUD</tag>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>04_性能分析插件</title>
    <url>/posts/a687917b.html</url>
    <content><![CDATA[<ol>
<li><p>设置运行环境</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注入插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SQL执行效率插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PerformanceInterceptor <span class="title">performanceInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PerformanceInterceptor performanceInterceptor = <span class="keyword">new</span> PerformanceInterceptor();</span><br><span class="line">    <span class="comment">// 设置SQL的最大执行时间, 超过时间就不执行</span></span><br><span class="line">    performanceInterceptor.setMaxTime(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 开启SQL语句格式化</span></span><br><span class="line">    performanceInterceptor.setFormat(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 参数是一个Wrapper 条件构造器</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<img src="/posts/a687917b/image-20200904082443079.png" class>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis-Plus</category>
      </categories>
      <tags>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>05_条件构建器 Wrapper</title>
    <url>/posts/a0afe8d9.html</url>
    <content><![CDATA[<blockquote>
<p>使用方法：<a href="https://baomidou.com/guide/wrapper.html">https://baomidou.com/guide/wrapper.html</a></p>
</blockquote>
<ol>
<li><p>查询用户名不为空且邮箱不为空的用户, 年龄 &gt;= 12</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>查询名字是 Horsen 的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Horsen&quot;</span>);</span><br><span class="line">    User user = userMapper.selectOne(wrapper);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询年龄在 20-30 之间的人数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">    Integer count = userMapper.selectCount(wrapper);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>模糊查询，查询名字中不包含 e 且邮箱是 t 开头的（结果存放在 map 中）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">/* WHERE ...</span></span><br><span class="line"><span class="comment">     * AND name NOT LIKE &#x27;%e%&#x27;</span></span><br><span class="line"><span class="comment">     * AND email LIKE &#x27;t%&#x27;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    wrapper.notLike(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;e&quot;</span>)</span><br><span class="line">        .likeRight(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">/* WHERE ...</span></span><br><span class="line"><span class="comment">     * AND id IN (</span></span><br><span class="line"><span class="comment">     *  select</span></span><br><span class="line"><span class="comment">     *      id </span></span><br><span class="line"><span class="comment">     *  from</span></span><br><span class="line"><span class="comment">     *      user</span></span><br><span class="line"><span class="comment">     *  where</span></span><br><span class="line"><span class="comment">     *      id&lt;3</span></span><br><span class="line"><span class="comment">     *  )</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id&lt;3&quot;</span>);</span><br><span class="line">    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">    objects.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 id 降序排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis-Plus</category>
      </categories>
      <tags>
        <tag>CRUD</tag>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>06_代码自动生成器</title>
    <url>/posts/766c47c2.html</url>
    <content><![CDATA[<p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、 Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
<blockquote>
<p>参考文档：<a href="https://baomidou.com/guide/generator.html">https://baomidou.com/guide/generator.html</a></p>
</blockquote>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horsen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置策略</span></span><br><span class="line">        <span class="comment">// 1. 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Horsen&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成后是否打开资源管理器</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        <span class="comment">// 主键策略</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">        <span class="comment">// 定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        <span class="comment">//开启Swagger2模式</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 设置数据源</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/[YourDataBaseName]?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 包的配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;your_module_name&quot;</span>);</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.horsen&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;model&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// 设置要映射的表名</span></span><br><span class="line">        strategy.setInclude(<span class="string">&quot;edu_teacher&quot;</span>);</span><br><span class="line">        <span class="comment">// 数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// 生成实体时去掉表前缀</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="comment">// 数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// restful api风格控制器</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        <span class="comment">// 自动填充配置</span></span><br><span class="line">        TableFill gmtCreate = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_create&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        TableFill gmtModified = <span class="keyword">new</span> TableFill(<span class="string">&quot;gmt_modified&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(gmtCreate);</span><br><span class="line">        tableFills.add(gmtModified);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">// 乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis-Plus</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Mybatis 简介</title>
    <url>/posts/f3d2b7ed.html</url>
    <content><![CDATA[<h3 id="1-什么是-Mybatis"><a href="#1-什么是-Mybatis" class="headerlink" title="1. 什么是 Mybatis"></a>1. 什么是 Mybatis</h3><img src="/posts/f3d2b7ed/1569633932712.png" class>

<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持定制化 SQL、存储过程以及高级映射</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>，2010年这个项目由 apache software foundation 迁移到了 google code，并且改名为 MyBatis </li>
<li>2013年11月迁移到 Github</li>
</ul>
<a id="more"></a>

<h3 id="2-如何获得-Mybatis"><a href="#2-如何获得-Mybatis" class="headerlink" title="2. 如何获得 Mybatis"></a>2. 如何获得 Mybatis</h3><ul>
<li><p>maven 仓库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Github ： <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h3 id="3-数据持久化"><a href="#3-数据持久化" class="headerlink" title="3. 数据持久化"></a>3. 数据持久化</h3><ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库（JDBC），io 文件持久化</li>
<li>生活：冷藏、罐头</li>
</ul>
<p><strong>为什么需要持久化？</strong></p>
<ul>
<li><p>有一些对象，不能让他丢掉</p>
</li>
<li><p>内存太贵了</p>
</li>
</ul>
<h3 id="4-持久层"><a href="#4-持久层" class="headerlink" title="4. 持久层"></a>4. 持久层</h3><p>Dao 层，Service 层，Controller 层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h3 id="5-为什么需要-Mybatis？"><a href="#5-为什么需要-Mybatis？" class="headerlink" title="5. 为什么需要 Mybatis？"></a>5. 为什么需要 Mybatis？</h3><ul>
<li>帮助程序猿将数据存入到数据库中</li>
<li>方便</li>
<li>传统的 JDBC 代码太复杂了，使用框架简化操作，达到自动化的效果</li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>SQL 和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的 orm 字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供 xml 标签，支持编写动态 SQL</li>
</ul>
</li>
</ul>
<p><strong>最重要的一点：使用的人多！</strong></p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>02_第一个 Mybatis 程序</title>
    <url>/posts/420fd3f9.html</url>
    <content><![CDATA[<h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h3><h4 id="1-1-创建数据库"><a href="#1-1-创建数据库" class="headerlink" title="1.1 创建数据库"></a>1.1 创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`mybatis`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`mybatis`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>(</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`pwd`</span>) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;狂神&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123890&#x27;</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="1-2-新建项目"><a href="#1-2-新建项目" class="headerlink" title="1.2 新建项目"></a>1.2 新建项目</h4><ol>
<li><p>新建一个普通的 maven 项目</p>
</li>
<li><p>删除 src 目录</p>
</li>
<li><p>导入 maven 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-创建一个模块"><a href="#2-创建一个模块" class="headerlink" title="2. 创建一个模块"></a>2. 创建一个模块</h3><ol>
<li><p>编写 mybatis 的核心配置文件，在 resources 文件夹下创建 mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">          <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">          <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=false&amp;characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 mybatis 工具类，在 utils 包中新建 MybatisUtils 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-编写代码"><a href="#3-编写代码" class="headerlink" title="3. 编写代码"></a>3. 编写代码</h3><ol>
<li><p>实体类，在 pojo 包下新建 User 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dao接口，在 mapper 包下新建  UserMapper 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口实现类由原来的 UserDaoImpl 转变为一个 Mapper 配置文件，UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace=绑定一个对应的Dao/Mapper接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select查询语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.horsen.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Mybatis 核心配置文件中注册这个 Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 每一个Mapper.xml都需要在Mybatis核心配置文件中注册 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/horsen/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>在 test/java 下新建 mapper 包，编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">// 方式一: getMapper获得接口</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 方式二: 直接调用dao接口的getUserList()方法</span></span><br><span class="line"><span class="comment">        List&lt;User&gt; userList = sqlSession.selectList(&quot;com.horsen.mapper.UserMapper.getUserList&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>遇到的问题：</strong></p>
<ol>
<li><p>报错：</p>
<blockquote>
<p>org.apache.ibatis.binding.BindingException: Type interface com.horsen.dao.UserDao is not known to the MapperRegistry.</p>
</blockquote>
<p> 解决方法：在 Mybatis 核心配置文件中注册 Mapper.xml</p>
</li>
<li><p>报错：</p>
<blockquote>
<p># The error may exist in com/horsen/dao/UserMapper.xml</p>
</blockquote>
<p>解决方法：参考 Maven 配置中最后一部分“资源导出失败的问题”</p>
</li>
<li><p>报错：</p>
<blockquote>
<p>Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</p>
</blockquote>
<p>解决方法：useSSL=true 改为 useSSL=false</p>
<p>（可能是由于 JDBC 版本和 MySQL 版本不兼容的问题）</p>
</li>
</ol>
<p><strong>还可能会遇到的问题：</strong></p>
<ol>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>03_CRUD</title>
    <url>/posts/5d4676a0.html</url>
    <content><![CDATA[<p><strong>CRUD 操作都在 Mapper.xml 中编写，即 Mapper 接口的实现类（通过配置文件实现）</strong></p>
<p><em>注意：增删改操作需要提交事务</em></p>
<p><code>sqlSession.commit();</code></p>
<h3 id="1-namespace"><a href="#1-namespace" class="headerlink" title="1. namespace"></a>1. namespace</h3><p>namespace 中的包名要和 mapper 接口的包名一致</p>
<a id="more"></a>

<h3 id="2-Select"><a href="#2-Select" class="headerlink" title="2. Select"></a>2. Select</h3><p>选择，查询语句</p>
<ul>
<li><p>id : 就是对应的 namespace 中的方法名</p>
</li>
<li><p>resultType：Sql 语句执行的返回值</p>
</li>
<li><p>parameterType ： 参数类型</p>
</li>
</ul>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的 mapper 中的 sql 语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.horsen.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-Insert"><a href="#3-Insert" class="headerlink" title="3. Insert"></a>3. Insert</h3><ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入一个用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的 mapper 中的 sql 语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象中的属性可以直接取出来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.horsen.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增删改需要提交事务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="keyword">int</span> res = mapper.addUser(<span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;123123&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (res &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-Update"><a href="#4-Update" class="headerlink" title="4. Update"></a>4. Update</h3><ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的 mapper 中的 sql 语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.horsen.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.updateUser(<span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;heihei&quot;</span>, <span class="string">&quot;999999&quot;</span>));</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-Delete"><a href="#5-Delete" class="headerlink" title="5. Delete"></a>5. Delete</h3><ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的 mapper 中的 sql 语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="6-万能-Map"><a href="#6-万能-Map" class="headerlink" title="6. 万能 Map"></a>6. 万能 Map</h3><p>如果实体类或者数据库中的表的字段，或者参数过多，应当考虑使用 Map</p>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的 mapper 中的 sql 语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传递map中的key --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;userId&#125;,#&#123;userName&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userId&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;22223333&quot;</span>);</span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Map 传递参数，直接在 sql 中取出 key 即可 <code>parameterType=&quot;map&quot;</code></p>
<p>对象传递参数，直接在 sql 中取对象的属性即可<code>parameterType=&quot;Object&quot;</code></p>
<p>只有一个基本类型参数的情况下，可以直接在 sql 中取到</p>
<p>多个参数用Map，<strong>或者注解</strong></p>
<h3 id="7-模糊查询"><a href="#7-模糊查询" class="headerlink" title="7. 模糊查询"></a>7. 模糊查询</h3><ol>
<li><p>方式一：在 Java 代码执行的时候，传递通配符%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二：在 sql 语句中添加通配符%</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mybatis.user <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">&quot;%&quot;</span><span class="comment">#&#123;value&#125;&quot;%&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>CRUD</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>04_配置解析</title>
    <url>/posts/96d9daef.html</url>
    <content><![CDATA[<h3 id="1-核心配置文件"><a href="#1-核心配置文件" class="headerlink" title="1. 核心配置文件"></a>1. 核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</p>
<ul>
<li><p>properties（属性）</p>
</li>
<li><p>settings（设置）</p>
</li>
<li><p>typeAliases（类型别名）</p>
</li>
<li><p>typeHandlers（类型处理器）</p>
</li>
<li><p>objectFactory（对象工厂）</p>
</li>
<li><p>plugins（插件）</p>
</li>
<li><p>environments（环境配置）</p>
<ul>
<li>environment（环境变量）<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li><p>databaseIdProvider（数据库厂商标识）</p>
</li>
<li><p>mappers（映射器）</p>
</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h3 id="2-environments（环境配置）"><a href="#2-environments（环境配置）" class="headerlink" title="2. environments（环境配置）"></a>2. <strong>environments（环境配置）</strong></h3><ul>
<li><p>MyBatis 可以配置成适应多种环境</p>
</li>
<li><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</strong></p>
<p><code>&lt;environments default=&quot;development&quot;&gt;</code></p>
</li>
<li><p>Mybatis 默认的事务管理器是 JDBC</p>
<p> <code>&lt;transactionManager type=&quot;JDBC&quot;/&gt;</code></p>
</li>
<li><p>默认的数据源是连接池：POOLED</p>
<p><code>&lt;dataSource type=&quot;POOLED&quot;&gt;</code></p>
</li>
</ul>
<h3 id="3-属性（properties）"><a href="#3-属性（properties）" class="headerlink" title="3. 属性（properties）"></a>3. 属性（properties）</h3><ul>
<li><p>我们可以通过 properties 属性来实现引用配置文件</p>
</li>
<li><p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件（db.properties）中配置，亦可通过 properties 元素的子元素来传递</p>
</li>
</ul>
<ol>
<li><p>编写一个配置文件 db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在核心配置文件中引入，注意 xml 标签的顺序是有要求的</p>
 <img src="/posts/96d9daef/image-20200727143249703.png" class>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p> 代码就要修改为</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>结论：</strong></p>
<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的</li>
</ul>
<h3 id="4-类型别名（typeAliases）"><a href="#4-类型别名（typeAliases）" class="headerlink" title="4. 类型别名（typeAliases）"></a>4. 类型别名（typeAliases）</h3><ul>
<li><p>类型别名是为 Java 类型设置一个短的名字</p>
</li>
<li><p>存在的意义仅在于用来减少类完全限定名的冗余。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.horsen.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.horsen.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  扫描实体类的包，它的默认别名就为这个类的类名（首字母小写）</p>
</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li><p>在实体类比较少的时候，使用第一种方式。</p>
</li>
<li><p>如果实体类十分多，建议使用第二种。</p>
</li>
<li><p>第一种可以自定义别名，第二种则不行，如果非要改，需要在实体上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-设置（setting）"><a href="#5-设置（setting）" class="headerlink" title="5. 设置（setting）"></a>5. 设置（setting）</h3><blockquote>
<p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p>
</blockquote>
<h3 id="6-其他配置"><a href="#6-其他配置" class="headerlink" title="6. 其他配置"></a>6. 其他配置</h3><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li>
<li>plugins插件<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用 mapper</li>
</ul>
</li>
</ul>
<h3 id="7-映射器（mappers）"><a href="#7-映射器（mappers）" class="headerlink" title="7. 映射器（mappers）"></a>7. 映射器（mappers）</h3><p>MapperRegistry：注册绑定  Mapper 文件；</p>
<p>方式一：【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/horsen/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用 class 文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式三：使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.horsen.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>注意点：</em></p>
<ul>
<li><em>接口和其 Mapper 配置文件必须同名</em></li>
<li><em>接口和其 Mapper 配置文件必须在同一个包下（同一个包名）</em></li>
</ul>
<h3 id="8-生命周期和作用域"><a href="#8-生命周期和作用域" class="headerlink" title="8. 生命周期和作用域"></a>8. 生命周期和作用域</h3><p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong></p>
<ul>
<li><p><strong>SqlSessionFactoryBuilder</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
</li>
<li><p><strong>SqlSessionFactory</strong></p>
<ul>
<li><p>说白了就是可以想象为数据库连接池</p>
</li>
<li><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong></p>
</li>
<li><p>因此 SqlSessionFactory 的最佳作用域是应用作用域 </p>
</li>
<li><p>最简单的就是使用<strong>单例模式</strong>或者静态单例模式</p>
</li>
</ul>
</li>
<li><p><strong>SqlSession</strong></p>
</li>
<li><p>连接到连接池的一个请求</p>
<ul>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li>
<li>用完之后需要赶紧关闭，否则资源被占用</li>
<li>SqlSession 得到的每一个 Mapper ，就代表一个具体的业务</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>07_分页</title>
    <url>/posts/37a4ae47.html</url>
    <content><![CDATA[<h3 id="1-Limit-分页"><a href="#1-Limit-分页" class="headerlink" title="1. Limit 分页"></a>1. Limit 分页</h3><ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    HashMap&lt;String, Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-RowBounds-分页"><a href="#2-RowBounds-分页" class="headerlink" title="2. RowBounds 分页"></a>2. RowBounds 分页</h3><ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">// 设定一个RowBounds作为参数传进selectList()方法</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.horsen.mapper.UserMapper.getUserByRowBounds&quot;</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-分页插件-PageHelper"><a href="#3-分页插件-PageHelper" class="headerlink" title="3. 分页插件 PageHelper"></a>3. 分页插件 PageHelper</h3><blockquote>
<p><a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>PageHelper</tag>
      </tags>
  </entry>
  <entry>
    <title>08_使用注解</title>
    <url>/posts/9a64e8a2.html</url>
    <content><![CDATA[<h3 id="1-面向接口编程"><a href="#1-面向接口编程" class="headerlink" title="1. 面向接口编程"></a>1. 面向接口编程</h3><ul>
<li>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程。</li>
<li>根本原因 :  ==解耦== ，可拓展 ，提高复用 。分层开发中 ，上层不用管具体的实现 ，大家都遵守共同的标准 ，使得开发变得容易，规范性更好。</li>
<li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的，对系统设计人员来讲就不那么重要了。</li>
<li>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</li>
</ul>
<a id="more"></a>

<hr>
<p><strong>关于接口的理解</strong></p>
<ul>
<li>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离</li>
<li>接口的本身反映了系统设计人员对系统的抽象理解</li>
<li>接口应有两类：<ul>
<li>第一类是对一个个体的抽象，它可对应为一个抽象体（abstract class）</li>
<li>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）</li>
</ul>
</li>
<li>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</li>
</ul>
<hr>
<p><strong>三个面向区别</strong></p>
<ul>
<li>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法</li>
<li>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 </li>
<li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题。更多的体现就是对系统整体的架构</li>
</ul>
<h3 id="2-使用注解开发"><a href="#2-使用注解开发" class="headerlink" title="2. 使用注解开发"></a>2. 使用注解开发</h3><ul>
<li><p>本质是通过反射机制实现</p>
</li>
<li><p>底层是动态代理</p>
</li>
</ul>
<ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取全部用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在核心配置文件中绑定接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.mapper.UserMapper&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-Mybatis-详细的执行流程"><a href="#3-Mybatis-详细的执行流程" class="headerlink" title="3. Mybatis 详细的执行流程"></a>3. Mybatis 详细的执行流程</h3><img src="/posts/9a64e8a2/image-20200731222352481.png" class>

<h3 id="4-CRUD"><a href="#4-CRUD" class="headerlink" title="4. CRUD"></a>4. CRUD</h3><p>可以在工具类创建的时候实现自动提交事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写接口，增加注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>关于@Param() 注解</strong></p>
<ul>
<li>基本类型的参数或 String 类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议加上</li>
<li>在SQL中引用的就是这里的 @Param() 中设定的属性名</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>09_多对一和一对多</title>
    <url>/posts/4690bb73.html</url>
    <content><![CDATA[<p>举个例子，多个学生对应一个老师</p>
<ul>
<li>对于学生而言，多个学生<strong>关联</strong>一个老师，但一个学生只有一个老师。这是<strong>多对一</strong></li>
<li>对于老师而言，学生是<strong>集合</strong>，即一个老师有很多学生。这是<strong>一对多</strong></li>
</ul>
<img src="/posts/4690bb73/image-20200728164901431.png" class>

<h3 id="0-环境搭建"><a href="#0-环境搭建" class="headerlink" title="0. 环境搭建"></a>0. 环境搭建</h3><ol>
<li>导入 Lombok</li>
<li>新建实体类 Teacher，Student</li>
<li>建立 Mapper 接口</li>
<li>建立 Mapper.xml 文件</li>
<li>在核心配置文件中绑定注册 Mapper 接口或者文件（方式很多，随心选）</li>
<li>测试查询是否能够成功</li>
</ol>
<a id="more"></a>

<p><strong>从这个模块开始采用新的项目结构，以后就按照这个规范了：</strong></p>
<ul>
<li><p>父包名为 ==com.horsen==</p>
</li>
<li><p>实体类包名为 ==model==</p>
</li>
<li><p>接口包名为 ==mapper==</p>
</li>
<li><p>工具类包名为 ==utils==</p>
</li>
<li><p>实现接口的 xml 放在 ==resources== 目录下，包名与接口一致</p>
</li>
<li><p>配置文件放在 ==resources== 目录下</p>
</li>
<li><p>测试类包名也与接口一致</p>
</li>
</ul>
<img src="/posts/4690bb73/image-20200728234043828.png" class>

<h3 id="1-多对一"><a href="#1-多对一" class="headerlink" title="1. 多对一"></a>1. 多对一</h3><h4 id="1-1-按照查询嵌套处理（目的是完善-sql-语句）"><a href="#1-1-按照查询嵌套处理（目的是完善-sql-语句）" class="headerlink" title="1.1 按照查询嵌套处理（目的是完善 sql 语句）"></a>1.1 按照查询嵌套处理（目的是完善 sql 语句）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 思路:</span></span><br><span class="line"><span class="comment"> 1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment"> 2. 根据查询出来的学生的tid, 寻找对应的老师</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     复杂的属性就不能用&lt;result&gt;了</span></span><br><span class="line"><span class="comment">     需要单独处理 使用</span></span><br><span class="line"><span class="comment">     对象: association</span></span><br><span class="line"><span class="comment">     集合: collection</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from teacher</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-按照结果嵌套处理-（目的是完善查询结果）"><a href="#1-2-按照结果嵌套处理-（目的是完善查询结果）" class="headerlink" title="1.2 按照结果嵌套处理 （目的是完善查询结果）"></a>1.2 按照结果嵌套处理 （目的是完善查询结果）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname</span><br><span class="line">    from student s,</span><br><span class="line">         teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-一对多"><a href="#2-一对多" class="headerlink" title="2. 一对多"></a>2. 一对多</h3><p>修改实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-按照查询嵌套处理"><a href="#2-1-按照查询嵌套处理" class="headerlink" title="2.1 按照查询嵌套处理"></a>2.1 按照查询嵌套处理</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getTeacher&quot; resultMap=&quot;TeacherStudent&quot;&gt;</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> teacher</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;tid&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">&lt;resultMap <span class="keyword">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="keyword">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span><br><span class="line">    &lt;!<span class="comment">--</span></span><br><span class="line">     注意:</span><br><span class="line">     这里需要写javaType=<span class="string">&quot;ArrayList&quot;</span>, 而下面的方法中不需要</span><br><span class="line">     因为这个方法查询出来的是集合, 而下面的方法查询出来内容已经和<span class="keyword">sql</span>语句对应了</span><br><span class="line">     可以理解为, 我们需要通过resultMap来补全<span class="keyword">sql</span>语句</span><br><span class="line">    <span class="comment">--&gt;</span></span><br><span class="line">    &lt;<span class="keyword">result</span> property=<span class="string">&quot;id&quot;</span> <span class="keyword">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;students&quot;</span> javaType=<span class="string">&quot;ArrayList&quot;</span> ofType=<span class="string">&quot;Student&quot;</span> <span class="keyword">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="keyword">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> resultType=<span class="string">&quot;Student&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> student s</span><br><span class="line">    <span class="keyword">where</span> tid = <span class="comment">#&#123;tid&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-按照结果嵌套处理"><a href="#2-2-按照结果嵌套处理" class="headerlink" title="2.2 按照结果嵌套处理"></a>2.2 按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select t.id tid, t.name tname, s.id sid, s.name sname</span><br><span class="line">    from student s,</span><br><span class="line">         teacher t</span><br><span class="line">    where s.tid = t.id</span><br><span class="line">      and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     因为学生是一个集合 List&lt;Student&gt;</span></span><br><span class="line"><span class="comment">     所以不能用association了</span></span><br><span class="line"><span class="comment">     改用collection</span></span><br><span class="line"><span class="comment">     而javaType=&quot;&quot;指定一个具体的类型</span></span><br><span class="line"><span class="comment">     对于集合List 采用ofType=&quot;&quot;获取其中的泛型信息</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h3><ul>
<li><p><strong>多对一</strong>：关联<code>&lt;association&gt;</code> </p>
</li>
<li><p><strong>一对多</strong>：集合<code>&lt;collection&gt;</code></p>
</li>
<li><p><strong>javaType</strong>：用来指定实体类中属性的类型</p>
<p><code>private Teacher teacher;</code></p>
</li>
<li><p><strong>ofType</strong>：用来指定映射到 List 或者集合中的pojo类型，即泛型中的约束类型</p>
<p><code>private List&lt;Student&gt; students;</code></p>
</li>
<li><p>注意点：</p>
<ul>
<li>保证 SQL 的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题</li>
<li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis</tag>
        <tag>ResultMap</tag>
      </tags>
  </entry>
  <entry>
    <title>05_解决属性名和字段名不一致的问题</title>
    <url>/posts/fb52b402.html</url>
    <content><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><ul>
<li><p>属性名 password</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字段名 pwd</p>
<img src="/posts/fb52b402/image-20200727195842355.png" class>

</li>
</ul>
<p>测试结果：</p>
<p><code>User&#123;id=1, name=&#39;刘昊鑫&#39;, pwd=&#39;null&#39;&#125;</code></p>
<p>解决方法：</p>
<ol>
<li><p>起别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd as password</span><br><span class="line">    from mybatis.user</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 resultMap</p>
</li>
</ol>
<a id="more"></a>

<h3 id="2-结果集映射-resultMap"><a href="#2-结果集映射-resultMap" class="headerlink" title="2. 结果集映射 resultMap"></a>2. 结果集映射 resultMap</h3><p>用 <code>resultMap</code> 代替 <code>resultType</code>，编写 <code>resultMap</code> 使属性名和字段名形成映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结果集映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column数据库中的字段，property实体类中的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from mybatis.user</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li>ResultMap 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
<li>如果世界总是这么简单就好了</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>Mybatis</tag>
        <tag>ResultMap</tag>
      </tags>
  </entry>
  <entry>
    <title>10_动态 SQL</title>
    <url>/posts/91a89dbd.html</url>
    <content><![CDATA[<p><strong>动态 SQL 就是指根据不同的条件生成不同的SQL语句</strong></p>
<p>官方是这样介绍的：</p>
<blockquote>
<p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p>
<p>动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p>
</blockquote>
<a id="more"></a>

<h3 id="0-环境搭建"><a href="#0-环境搭建" class="headerlink" title="0. 环境搭建"></a>0. 环境搭建</h3><ol>
<li><p>准备数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`views`</span> <span class="built_in">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用 Java 代码插入数据</p>
<p>3.1 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> blog 博客</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure>

<p>3.2 Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    insert into blog (id, title, author, create_time, views)</span><br><span class="line">    values (#&#123;id&#125;, #&#123;title&#125;, #&#123;author&#125;, #&#123;createTime&#125;, #&#123;views&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.3 测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line"></span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Mybatis如此简单&quot;</span>);</span><br><span class="line">    blog.setAuthor(<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">    blog.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    blog.setViews(<span class="number">9999</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Java如此简单&quot;</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Spring如此简单&quot;</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IdUtils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;微服务如此简单&quot;</span>);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="1-if"><a href="#1-if" class="headerlink" title="1. if"></a>1. if</h3><p><strong>需求</strong>：当没有任何参数传入的时候，查询所有博客，当有标题或作者作为参数传入的时候，就根据传入的参数查找。</p>
<p>传统的做法是设计多个查询类，每一个类的参数对应不同的查询条件。</p>
<p>但是，使用<code>&lt;if&gt;</code>标签可以省去重载方法，用一个方法解决问题。</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询博客</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogIf</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <em>注意：这里还用了一个<code>&lt;where&gt;</code>标签</em></p>
<blockquote>
<p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p>
</blockquote>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogIf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">//map.put(&quot;title&quot;,&quot;Java如此简单&quot;);</span></span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-choose-when-otherwise"><a href="#2-choose-when-otherwise" class="headerlink" title="2. choose, when, otherwise"></a>2. choose, when, otherwise</h3><blockquote>
<p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p>
</blockquote>
<p>可以这样理解：==choose== 相当于 <code>swich</code>；==when== 相当于<code> case</code>；==otherwise== 相当于 <code>default</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-trim-where-set"><a href="#3-trim-where-set" class="headerlink" title="3. trim, where, set"></a>3. trim, where, set</h3><p>和之前的需求类似，为了在保证修改数据时，满足各种各样的传入的参数，动态的修改某一行数据的对应字段，就可以使用<code>&lt;set&gt;</code>标签，避免重载多个不同参数的插入方法。类似<code>&lt;where&gt;</code>，<code>&lt;set&gt;</code>会动态地在行首插入 SET 关键字，并会删掉额外的逗号。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-SQL-片段"><a href="#4-SQL-片段" class="headerlink" title="4. SQL 片段"></a>4. SQL 片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用</p>
<ol>
<li><p>使用<code>&lt;sql&gt;</code>标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要使用的地方使用<code>&lt;include&gt;</code>标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>最好基于单表来定义 SQL 片段</li>
<li>不要存在where标签</li>
</ul>
<h3 id="5-foreach"><a href="#5-foreach" class="headerlink" title="5. foreach"></a>5. foreach</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> blog</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>为了方便举例，使用这条有同样的效果 sql 语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> blog</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogForeach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    ArrayList&lt;String&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ids.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    ids.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    ids.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><ul>
<li>所谓动态 SQL，本质还是 SQL 语句， 知识我们可以在 SQL 层面去执行一个逻辑代码。</li>
<li>动态 SQL 就是在拼接 SQL 语句，只要保证 SQL 的正确性，按照 SQL 的格式去排列组合就可以了。</li>
<li>建议先写出完整的 SQL，再对应着修改为动态 SQL 实现通用。</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>CRUD</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>11_练习题</title>
    <url>/posts/20282767.html</url>
    <content><![CDATA[<h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><ol>
<li><p>接口</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过userCode获取User</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(<span class="meta">@Param(&quot;userCode&quot;)</span> String userCode)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过条件查询-userList</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRole</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(<span class="meta">@Param(&quot;userName&quot;)</span> String userName, <span class="meta">@Param(&quot;userRole&quot;)</span> Integer userRole,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="meta">@Param(&quot;from&quot;)</span> Integer currentPageNo, <span class="meta">@Param(&quot;pageSize&quot;)</span> Integer pageSize)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过条件查询-用户表记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userRole</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(<span class="meta">@Param(&quot;userName&quot;)</span> String userName, <span class="meta">@Param(&quot;userRole&quot;)</span> Integer userRole)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过userId删除user</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer delId)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">   </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过userId获取user</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">modify</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">   </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改当前用户密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;pwd&quot;)</span> String pwd)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getLoginUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from smbms_user</span><br><span class="line">        where userCode = #&#123;userCode&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        insert into smbms_user</span><br><span class="line">        (userCode, userName, userPassword, gender, birthday,</span><br><span class="line">         phone, address, userRole, createdBy, creationDate, modifyBy, modifyDate)</span><br><span class="line">        values (#&#123;userCode&#125;, #&#123;userName&#125;, #&#123;userPassword&#125;, #&#123;gender&#125;, #&#123;birthday&#125;,</span><br><span class="line">                #&#123;phone&#125;, #&#123;address&#125;, #&#123;userRole&#125;, #&#123;createdBy&#125;, #&#123;creationDate&#125;, #&#123;modifyBy&#125;, #&#123;modifyDate&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">        select u.*, r.roleName</span><br><span class="line">        from smbms_user u,</span><br><span class="line">        smbms_role r</span><br><span class="line">        where u.userRole = r.id</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userRole != null&quot;</span>&gt;</span></span><br><span class="line">            and u.userRole = #&#123;userRole&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            and userName like concat(&#x27;%&#x27;,#&#123;userName&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        limit #&#123;from&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userRoleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;roleName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Int&quot;</span>&gt;</span></span><br><span class="line">        select count(1) from smbms_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userRole != null&quot;</span>&gt;</span></span><br><span class="line">                userRole = #&#123;userRole&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">                and userName like concat(&#x27;%&#x27;,#&#123;userName&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from smbms_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">        select u.*, r.roleName</span><br><span class="line">        from smbms_user u,</span><br><span class="line">             smbms_role r</span><br><span class="line">        where u.id = #&#123;id&#125;</span><br><span class="line">          and u.userRole = r.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;modify&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update smbms_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span>userName = #&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userCode != null&quot;</span>&gt;</span>userCode = #&#123;userCode&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userPassword != null&quot;</span>&gt;</span>userPassword = #&#123;userPassword&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span>gender = #&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span>birthday = #&#123;birthday&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone = #&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null&quot;</span>&gt;</span>address = #&#123;address&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userRole != null&quot;</span>&gt;</span>userRole = #&#123;userRole&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;modifyBy != null&quot;</span>&gt;</span>modifyBy = #&#123;modifyBy&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;modifyDate != null&quot;</span>&gt;</span>modifyDate = #&#123;modifyDate&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePwd&quot;</span>&gt;</span></span><br><span class="line">        update smbms_user</span><br><span class="line">        set userPassword = #&#123;pwd&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horsen.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.horsen.model.User;</span><br><span class="line"><span class="keyword">import</span> com.horsen.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLoginUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = mapper.getLoginUser(<span class="string">&quot;sunlei&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.set(Calendar.YEAR, <span class="number">1999</span>);</span><br><span class="line">        calendar.set(Calendar.MONTH, <span class="number">4</span> - <span class="number">1</span>);</span><br><span class="line">        calendar.set(Calendar.DAY_OF_MONTH, <span class="number">3</span>);</span><br><span class="line">        Date birthday = calendar.getTime();</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">&quot;liuhorsen&quot;</span>, <span class="string">&quot;刘霍森&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">1</span>, birthday,</span><br><span class="line">                <span class="string">&quot;15252178585&quot;</span>, <span class="string">&quot;江苏徐州泉山区&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="keyword">new</span> java.util.Date(), <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        mapper.add(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList(<span class="string">&quot;&quot;</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">int</span> userCount = mapper.getUserCount(<span class="string">&quot;孙&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(userCount);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.deleteUserById(<span class="number">17</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = mapper.getUserById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUserPassword(<span class="string">&quot;2222222&quot;</span>);</span><br><span class="line">        mapper.modify(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePwd</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        mapper.updatePwd(<span class="number">1</span>,<span class="string">&quot;1122334&quot;</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h3><ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据RoleCode进行角色编码的唯一性验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roleCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">roleCodeIsExist</span><span class="params">(<span class="meta">@Param(&quot;roleCode&quot;)</span> String roleCode)</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;roleCodeIsExist&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Int&quot;</span>&gt;</span></span><br><span class="line">        select count(1)</span><br><span class="line">        from smbms_role</span><br><span class="line">        where roleCode = #&#123;roleCode&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roleCodeIsExist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);</span><br><span class="line">        <span class="keyword">int</span> count = mapper.roleCodeIsExist(<span class="string">&quot;SMBMS_ADMIN&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;角色编码唯一&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;角色编码不存在&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;角色编码不唯一&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Bill"><a href="#Bill" class="headerlink" title="Bill"></a>Bill</h3><ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据供应商ID查询订单数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> providerId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBillCountByProviderId</span><span class="params">(<span class="meta">@Param(&quot;providerId&quot;)</span> Integer providerId)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.BillMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBillCountByProviderId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Int&quot;</span>&gt;</span></span><br><span class="line">        select count(1)</span><br><span class="line">        from smbms_bill</span><br><span class="line">        where providerId = #&#123;providerId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BillMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roleCodeIsExist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        BillMapper mapper = sqlSession.getMapper(BillMapper.class);</span><br><span class="line">        <span class="keyword">int</span> count = mapper.getBillCountByProviderId(<span class="number">14</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>CRUD</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>06_日志</title>
    <url>/posts/25965bab.html</url>
    <content><![CDATA[<h3 id="1-日志工厂"><a href="#1-日志工厂" class="headerlink" title="1. 日志工厂"></a>1. 日志工厂</h3><p>如果一个数据库操作出现了异常，我们需要排错，那日志就是最好的助手</p>
<p>Mybatis 内置的日志工厂</p>
<ul>
<li>SLF4J </li>
<li>[LOG4J （掌握）](#3. Log4j)</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>[STDOUT_LOGGING （掌握）](#2. STDOUT_LOGGING)</li>
<li>NO_LOGGING</li>
</ul>
<p>具体使用哪一个，要在设置中设定</p>
<a id="more"></a>

<h3 id="2-STDOUT-LOGGING"><a href="#2-STDOUT-LOGGING" class="headerlink" title="2. STDOUT_LOGGING"></a>2. STDOUT_LOGGING</h3><p>在核心配置文件中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>日志效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 897074030.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@3578436e]</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: select * from mybatis.user where id &#x3D; ? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: id, name, pwd</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 1, 刘昊鑫, 123456</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">User&#123;id&#x3D;1, name&#x3D;&#39;刘昊鑫&#39;, pwd&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@3578436e]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@3578436e]</span><br><span class="line">Returned connection 897074030 to pool.</span><br></pre></td></tr></table></figure>

<h3 id="3-Log4j"><a href="#3-Log4j" class="headerlink" title="3. Log4j"></a>3. Log4j</h3><ul>
<li><p>Log4j 是 Apache 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</p>
</li>
<li><p>我们也可以控制每一条日志的输出格式</p>
</li>
<li><p>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</p>
</li>
<li><p>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</p>
</li>
</ul>
<ol>
<li><p>导入 log4j 的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 log4j 为日志的实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>简单使用：</strong></p>
<ol>
<li><p>在要使用 Log4j 的类中，导入包 </p>
<p><code>import org.apache.log4j.Logger;</code></p>
</li>
<li><p>声明日志对象，参数为当前类的 class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>Mybatis</tag>
        <tag>log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>控制器视图</title>
    <url>/posts/94aef121.html</url>
    <content><![CDATA[<h3 id="1-查询书籍功能"><a href="#1-查询书籍功能" class="headerlink" title="1. 查询书籍功能"></a>1. 查询书籍功能</h3><ol>
<li><p>编写视图 index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">  &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">    a &#123;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">      color: black;</span><br><span class="line">      font-size: <span class="number">18</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    h3 &#123;</span><br><span class="line">      width: <span class="number">180</span>px;</span><br><span class="line">      height: <span class="number">38</span>px;</span><br><span class="line">      margin: <span class="number">100</span>px auto;</span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: <span class="number">38</span>px;</span><br><span class="line">      background: deepskyblue;</span><br><span class="line">      border-radius: <span class="number">4</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">  &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>书籍展示页面 allBook.jsp</p>
<p>注意：<code>&lt;c:forEach&gt;</code>标签中属性<code>item</code>表示遍历的集合，这个集合可以是改请求对应的 Controller 中的方法在执行时放在 model 里的属性；<code>var</code>属性表示集合中的每一项。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;table thead th&#123;text-align: center;&#125;&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">            &lt;a class=&quot;btn btn-primary&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/book/tooAddBook&quot;&gt;新增&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.bookID&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.bookName&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.bookCounts&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.detail&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;%-- 在修改之前把对应的书的ID传给后端 --%&gt;</span><br><span class="line">                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook/$&#123;book.bookID&#125;&quot;&gt;更改&lt;/a&gt; |</span><br><span class="line">                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.bookID&#125;&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Controller层调用Service层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部书籍, 并且返回到一个书籍展示页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;Books&gt; list = bookService.queryAllBooks();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-添加书籍功能"><a href="#2-添加书籍功能" class="headerlink" title="2. 添加书籍功能"></a>2. 添加书籍功能</h3><ol>
<li><p>在 allBook.jsp 中增加【新增】按钮</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">           &lt;a class=&quot;btn btn-primary&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/book/tooAddBook&quot;&gt;新增&lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写视图 addBook.jsp</p>
<p>注意：表单中输入框的<code>name</code>属性要和实体类属性保持一致</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> required&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> required&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> required&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到增加书籍页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/tooAddBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一本书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">    bookService.addBook(book);</span><br><span class="line">    <span class="comment">// 重定向到一个请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-修改一本书"><a href="#3-修改一本书" class="headerlink" title="3. 修改一本书"></a>3. 修改一本书</h3><ol>
<li><p>在 allBook.jsp 中增加【修改】按钮</p>
<p>注意：为了在修改页面展示需要修改的书的原来的数据，要在请求时把对应的书的 ID 传给后端<code>$&#123;book.bookID&#125;</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook/$&#123;book.bookID&#125;&quot;&gt;修改&lt;/a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写视图 updateBook.jsp</p>
<p>注意：在<code>update</code>语句中需要传入书的ID，因此需要前端通过隐藏域将 ID 放在请求中，传给后端</p>
<p><code>&lt;input type=&quot;hidden&quot; name=&quot;bookID&quot; value=&quot;$&#123;book.bookID&#125;&quot;&gt;</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改书籍&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;修改书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;bookID&quot;</span> value=<span class="string">&quot;$&#123;book.bookID&#125;&quot;</span>&gt;</span><br><span class="line">        书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> value=<span class="string">&quot;$&#123;book.bookName&#125;&quot;</span> required&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> value=<span class="string">&quot;$&#123;book.bookCounts&#125;&quot;</span> required&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> value=<span class="string">&quot;$&#123;book.detail&#125;&quot;</span> required&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到修改页面, 在此之前通过前端提供的ID查询到该书的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdateBook/&#123;bookID&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdateBook</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> bookID, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据ID查到这本书</span></span><br><span class="line">    Books book = bookService.queryBookById(bookID);</span><br><span class="line">    <span class="comment">// 把这本书传回前端</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;book&quot;</span>, book);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改一本书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Books book,Model model)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;updateBook() =&gt; &quot;</span> + book);</span><br><span class="line">    bookService.updateBook(book);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-删除一本书"><a href="#4-删除一本书" class="headerlink" title="4.  删除一本书"></a>4.  删除一本书</h3><ol>
<li><p>在 allBook.jsp 中增加【删除】按钮</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/deleteBook/$&#123;book.bookID&#125;&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除一本书</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/deleteBook/&#123;bookID&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> bookID)</span> </span>&#123;</span><br><span class="line">    bookService.deleteBookById(bookID);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-模糊查询书籍"><a href="#5-模糊查询书籍" class="headerlink" title="5. 模糊查询书籍"></a>5. 模糊查询书籍</h3><ol>
<li><p>在 allBook.jsp 中增加搜索框</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-4 column col-md-offset-4&quot;</span>&gt;</span><br><span class="line">    &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span></span><br><span class="line">       style=&quot;float:right;margin-left: 4px&quot;&gt;显示所有&lt;/a&gt;</span><br><span class="line">    &lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-inline&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/queryBook&quot;</span> method=<span class="string">&quot;post&quot;</span> style=<span class="string">&quot;float:right&quot;</span>&gt;</span><br><span class="line">        &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> name=<span class="string">&quot;queryBookName&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;书籍名称&quot;</span> required/&gt;</span><br><span class="line">        &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-primary&quot;</span> type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Mapper 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模糊查询书籍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Books&gt; <span class="title">queryBook</span><span class="params">(<span class="meta">@Param(&quot;bookName&quot;)</span> String name)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模糊查询书籍 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from ssmbuild.books</span><br><span class="line">    where bookName like CONCAT(&#x27;%&#x27;, #&#123;bookName&#125;, &#x27;%&#x27;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Service 层</p>
<p>懒得写了，懂得都懂</p>
</li>
<li><p>编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询书籍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/queryBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryBook</span><span class="params">(String queryBookName, Model model)</span> </span>&#123;</span><br><span class="line">    List&lt;Books&gt; list = bookService.queryBook(queryBookName);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>SSM 框架整合</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Spring Boot 简介</title>
    <url>/posts/75cbabf2.html</url>
    <content><![CDATA[<h3 id="1-什么是-Spring"><a href="#1-什么是-Spring" class="headerlink" title="1. 什么是 Spring"></a>1. 什么是 Spring</h3><p>Spring 是一个开源框架，2003 年兴起的一个轻量级的 Java 开发框架，作者：Rod Johnson。</p>
<p><strong>Spring 是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></p>
<h3 id="2-Spring-如何简化-Java-开发"><a href="#2-Spring-如何简化-Java-开发" class="headerlink" title="2. Spring 如何简化 Java 开发"></a>2. Spring 如何简化 Java 开发</h3><p>为了降低 Java 开发的复杂性，Spring 采用了以下 4 种关键策略：</p>
<ol>
<li>基于 POJO 的轻量级和最小侵入性编程，所有东西都是 bean；</li>
<li>通过 IOC，依赖注入（DI）和面向接口实现松耦合；</li>
<li>基于切面（AOP）和惯例进行声明式编程；</li>
<li>通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</li>
</ol>
<a id="more"></a>

<h3 id="3-什么是-Spring-Boot"><a href="#3-什么是-Spring-Boot" class="headerlink" title="3. 什么是 Spring Boot"></a>3. 什么是 Spring Boot</h3><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置</strong>的核心思想，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它 集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p>
<p>简单来说就是 Spring Boot 其实不是什么新的框架，它默认配置了很多框架的使用方式，就像 maven 整合了所有的 jar 包，Spring Boot 整合了所有的框架 。</p>
<p><strong>Spring Boot 的主要优点：</strong></p>
<ul>
<li>为所有 Spring 开发者更快的入门</li>
<li>开箱即用，提供各种默认配置来简化项目配置</li>
<li>内嵌式容器简化 Web 项目</li>
<li>没有冗余代码生成和 XML 配置的要求</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>02_第一个 Spring Boot 程序</title>
    <url>/posts/9cb0c64d.html</url>
    <content><![CDATA[<h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><h4 id="1-1-方式一：通过网页"><a href="#1-1-方式一：通过网页" class="headerlink" title="1.1 方式一：通过网页"></a>1.1 方式一：通过网页</h4><ol>
<li>打开 <a href="https://start.spring.io/">https://start.spring.io/</a></li>
<li>填写项目信息</li>
<li>点击【Generate Project】按钮生成项目；下载此项目</li>
<li>解压项目包，用 IDEA 以 Maven 项目导入，一路下一步即可，直到项目导入完毕</li>
</ol>
<img src="/posts/9cb0c64d/image-20200817120702567.png" class>

<h4 id="1-2-方式二：IDEA-直接创建"><a href="#1-2-方式二：IDEA-直接创建" class="headerlink" title="1.2 方式二：IDEA 直接创建"></a>1.2 方式二：IDEA 直接创建</h4><ol>
<li><p>新建项目，选择 Spring Initalizr </p>
<img src="/posts/9cb0c64d/image-20200817120921742.png" class>
</li>
<li><p>填写项目信息</p>
<img src="/posts/9cb0c64d/image-20200817120926475.png" class>
</li>
<li><p>选择依赖</p>
<img src="/posts/9cb0c64d/image-20200817121800251.png" class>

</li>
</ol>
<a id="more"></a>

<h4 id="1-3-项目结构分析"><a href="#1-3-项目结构分析" class="headerlink" title="1.3 项目结构分析"></a>1.3 项目结构分析</h4><p>通过上面步骤完成了基础项目的创建，会自动生成以下文件：</p>
<ol>
<li>程序的主启动类 HelloApplication.java</li>
<li>一个 application.properties 配置文件</li>
<li>一个测试类</li>
<li>一个 pom.xml</li>
</ol>
<h4 id="1-4-卡在Reading……pom-xml的解决方法"><a href="#1-4-卡在Reading……pom-xml的解决方法" class="headerlink" title="1.4 卡在Reading……pom.xml的解决方法"></a>1.4 卡在<code>Reading……pom.xml</code>的解决方法</h4><p>如果创建项目之后，进度条一直显示</p>
<blockquote>
<p>Reading maven project 或者 Reading……pom.xml</p>
</blockquote>
<ol>
<li>移除工程目录/.mvn/wrapper/maven-wrapper.properties 文件，重新打开项目</li>
<li>如果还不行，检查 hosts 文件中是否有<code>127.0.0.1 localhost</code>且 127.0.0.1 不指向其他地址</li>
<li>cmd 输入<code>netsh winsock reset</code>回车，重启电脑</li>
</ol>
<h3 id="2-pom-xml-分析"><a href="#2-pom-xml-分析" class="headerlink" title="2. pom.xml 分析"></a>2. pom.xml 分析</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web场景启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 剔除依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-测试运行"><a href="#3-测试运行" class="headerlink" title="3. 测试运行"></a>3. 测试运行</h3><ol>
<li><p>在 xxxApplication.java 的同级目录下建包</p>
<img src="/posts/9cb0c64d/image-20200817154411532.png" class>
</li>
<li><p>编写一个 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行，访问<code>localhost:8080/hello</code></p>
</li>
</ol>
<h3 id="4-将项目打成-jar-包"><a href="#4-将项目打成-jar-包" class="headerlink" title="4. 将项目打成 jar 包"></a>4. 将项目打成 jar 包</h3><img src="/posts/9cb0c64d/image-20200817220602571.png" class>

<p>如果遇到错误，可以配置打包时跳过项目运行测试用例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    在工作中, 很多情况下打包是不想执行测试用例的</span></span><br><span class="line"><span class="comment">    可能是测试用例不完整, 或是测试用例会影响数据库数据</span></span><br><span class="line"><span class="comment">    跳过测试用例执行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 跳过项目运行测试用例 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>成功后生成一个 jar 包，可以通过<code>java -jar xxx.jar</code>运行</p>
<h3 id="5-修改端口号"><a href="#5-修改端口号" class="headerlink" title="5. 修改端口号"></a>5. 修改端口号</h3><p>在 application.properties 中添加<code>server.port=8081</code></p>
<h3 id="6-自定义-banner"><a href="#6-自定义-banner" class="headerlink" title="6. 自定义 banner"></a>6. 自定义 banner</h3><blockquote>
<p>生成 ascii 图案：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a></p>
</blockquote>
<p>在 resourvces 目录下新建 banner.txt，将图案拷贝进去，重启服务。</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>环境搭建</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>04_Spring Boot 配置</title>
    <url>/posts/3f2811cd.html</url>
    <content><![CDATA[<h3 id="1-YAML-注入配置文件"><a href="#1-YAML-注入配置文件" class="headerlink" title="1. YAML 注入配置文件"></a>1. YAML 注入配置文件</h3><ol>
<li><p>在项目 resources 目录下新建一个文件 application.yml</p>
</li>
<li><p>编写实体类 Cat，通过<code>@Value</code>注入赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;JOJO&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ConfigApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 自动注入</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(cat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>再编写一个复杂的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 yaml 配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">horsen</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1999</span><span class="string">/04/03</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gilr</span></span><br><span class="line">  <span class="attr">cat:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">JOJO</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>讲实体类注入到类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @ConfigurationProperties 作用：</span></span><br><span class="line"><span class="comment"> * 将yaml配置文件中配置的每一个属性的值, 映射到这个组件中</span></span><br><span class="line"><span class="comment"> * 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment"> * 参数prefix = &quot;person&quot;将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>IDEA 提示<code>未配置 Spring Boot 配置注解处理器</code>。查看文档，找到一个依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器, 配置文件进行绑定就会有提示, 需要重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ConfigApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-加载指定配置文件"><a href="#2-加载指定配置文件" class="headerlink" title="2. 加载指定配置文件"></a>2. 加载指定配置文件</h3><p>对比：</p>
<p><code>@PropertySource</code>：加载指定的配置文件</p>
<p><code>@ConfigurationProperties</code>：默认从全局配置文件中获取值</p>
<ol>
<li><p>新建一个 person.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">lhx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改实体类的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册bean</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:person.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-配置文件占位符"><a href="#3-配置文件占位符" class="headerlink" title="3. 配置文件占位符"></a>3. 配置文件占位符</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">horsen$&#123;random.uuid&#125;</span> <span class="comment"># 随机uuid</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span> <span class="comment"># 随机int</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">1999</span><span class="string">/04/03</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gilr</span></span><br><span class="line">  <span class="attr">cat:</span></span><br><span class="line">    <span class="comment"># 引用person.name的值, 如果不存在就用:后面的值, 即other，然后拼接上_JOJO</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.name:other&#125;_JOJO</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>03_YAML 语法学习</title>
    <url>/posts/73458b8e.html</url>
    <content><![CDATA[<h3 id="1-YAML-概述"><a href="#1-YAML-概述" class="headerlink" title="1. YAML 概述"></a>1. YAML 概述</h3><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。</p>
<p>在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p>
<p>==这种语言以数据做为中心，而不是以标记语言为重点==</p>
<p>传统 xml 配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>properties 配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure>

<p>yaml 配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-YAML-基础语法"><a href="#2-YAML-基础语法" class="headerlink" title="2. YAML 基础语法"></a>2. YAML 基础语法</h3><p>语法要求严格</p>
<ol>
<li>空格不能省略</li>
<li>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的</li>
<li>属性和值的大小写都是十分敏感的</li>
</ol>
<p><strong>普通值：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">horsen</span></span><br></pre></td></tr></table></figure>

<p><em>注意：</em></p>
<ul>
<li><p><code>&quot;&quot;</code> 双引号，不会转义字符串里面的特殊字符，特殊字符会作为本身想表示的意思</p>
<p>比如 ： <code>name: &quot;horsen \n horsen&quot;</code> 输出 ： horsen 换行 horsen</p>
</li>
<li><p><code>&#39;&#39;</code> 单引号，会转义特殊字符，特殊字符最终会变成和普通字符一样输出</p>
<p>比如 ： <code>name: &#39;horsen \n horsen&#39;</code> 输出 ： horsen \n horsen</p>
</li>
</ul>
<hr>
<p><strong>对象、Map（键值对）：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">horsen</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">horsen</span>,<span class="attr">age:</span> <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>数组（List、Set）：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>05_JSR303 数据校验</title>
    <url>/posts/956f6b63.html</url>
    <content><![CDATA[<p>Spring Boot 中可以用<code>@Validated</code>来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</p>
<ol>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写个注解让 name 只能支持 Email 格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，报错</p>
<img src="/posts/956f6b63/image-20200820110627705.png" class>

</li>
</ol>
<a id="more"></a>

<hr>
<p><strong>常见使用</strong></p>
<ul>
<li>空检查<ul>
<li><code>@Null</code> 验证对象是否为null</li>
<li><code>@NotNull</code> 验证对象是否不为 null，无法查检长度为0的字符串 </li>
<li><code>@NotBlank</code> 检查约束字符串是不是 null 还有被 Trim 的长度是否大于0，只对字符串，且会去掉前后空格</li>
<li><code>@NotEmpty</code> 检查约束元素是否为 null 或者是 empty</li>
</ul>
</li>
<li>Booelan检查 <ul>
<li><code>@AssertTrue</code> 验证 Boolean 对象是否为 true </li>
<li><code>@AssertFalse</code> 验证 Boolean 对象是否为 false</li>
</ul>
</li>
<li>长度检查 <ul>
<li><code>@Size(min=, max=</code> 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内 </li>
<li><code>@Length(min=, max=)</code> 包括最小值和最大值之间的字符串</li>
</ul>
</li>
<li>日期检查 <ul>
<li><code>@Past</code> 验证 Date 和 Calendar 对象是否在当前时间之前</li>
<li><code>@Future</code> 验证 Date 和 Calendar 对象是否在当前时间之后</li>
<li><code>@Pattern</code> 验证 String 对象是否符合正则表达式的规则</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>JSR303</tag>
      </tags>
  </entry>
  <entry>
    <title>06_多环境切换</title>
    <url>/posts/46c96805.html</url>
    <content><![CDATA[<p><code>profile</code>是 Spring 对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境</p>
<h3 id="1-多配置文件"><a href="#1-多配置文件" class="headerlink" title="1. 多配置文件"></a>1. 多配置文件</h3><p>在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml，用来指定多个环境版本</p>
<p>例如：</p>
<ul>
<li>application-test.properties 代表测试环境配置 </li>
<li>application-dev.properties 代表开发环境配置</li>
</ul>
<p>但是 Spring Boot 并不会直接启动这些配置文件，它默认使用 application.properties 主配置文件。我们需要通过一个配置来选择需要激活的环境：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比如在配置文件中指定使用dev环境, 可以通过设置不同的端口号进行测试</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-yml-的多文档块"><a href="#2-yml-的多文档块" class="headerlink" title="2. yml 的多文档块"></a>2. yml 的多文档块</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment"># 选择要激活哪个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#配置环境的名称</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>如果 yml 和 properties 同时都配置了端口，并且没有激活其他环境 ， 默认会使用 properties 配置文件的</p>
<h3 id="3-配置文件加载位置"><a href="#3-配置文件加载位置" class="headerlink" title="3. 配置文件加载位置"></a>3. 配置文件加载位置</h3><p>Spring Boot 启动会扫描以下位置的 application.properties 或者 application.yml 文件作为=默认配置文件：</p>
<ul>
<li>优先级1：项目路径下的 config 文件夹配置文件 </li>
<li>优先级2：项目路径下配置文件 </li>
<li>优先级3：资源路径下的 config 文件夹配置文件 </li>
<li>优先级4：资源路径下配置文件</li>
</ul>
<p><strong>扩展：</strong>指定位置加载配置文件</p>
<p>可以通过 <code>spring.config.location</code>来改变默认的配置文件位置项目打包好以后，使用命令行参数的形式，在启动项目时指定配置文件的新位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>07_集成 JDBC</title>
    <url>/posts/b2b5955c.html</url>
    <content><![CDATA[<h3 id="1-Spring-Data-简介"><a href="#1-Spring-Data-简介" class="headerlink" title="1. Spring Data 简介"></a>1. Spring Data 简介</h3><p>对于数据访问层，无论是 SQL（关系型数据库） 还是 NOSQL（非关系型数据库），Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p>
<p>Spring Data 也是 Spring 中 与 Spring Boot、Spring Cloud 等齐名的知名项目。 </p>
<blockquote>
<p>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a> </p>
<p>数据库相关的启动器：<a href="https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/htmlsingle/#using-boot-starter</a></p>
</blockquote>
<a id="more"></a>

<h3 id="2-集成-JDBC"><a href="#2-集成-JDBC" class="headerlink" title="2. 集成 JDBC"></a>2. 集成 JDBC</h3><ol>
<li><p>准备数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`springboot`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`department`</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`department`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> (<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;部门id&#x27;</span>,</span><br><span class="line">  <span class="string">`department_name`</span> <span class="built_in">VARCHAR</span> (<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;部门名字&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> AUTO_INCREMENT = <span class="number">106</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`department`</span> (<span class="string">`id`</span>, <span class="string">`department_name`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">101</span>, <span class="string">&#x27;技术部&#x27;</span>),</span><br><span class="line">    (<span class="number">102</span>, <span class="string">&#x27;销售部&#x27;</span>),</span><br><span class="line">    (<span class="number">103</span>, <span class="string">&#x27;售后部&#x27;</span>),</span><br><span class="line">    (<span class="number">104</span>, <span class="string">&#x27;后勤部&#x27;</span>),</span><br><span class="line">    (<span class="number">105</span>, <span class="string">&#x27;运营部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> (<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;雇员id&#x27;</span>,</span><br><span class="line">  <span class="string">`last_name`</span> <span class="built_in">VARCHAR</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">VARCHAR</span> (<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="string">`gender`</span> <span class="built_in">INT</span> (<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;性别1 男, 0 女&#x27;</span>,</span><br><span class="line">  <span class="string">`department`</span> <span class="built_in">INT</span> (<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;部门id&#x27;</span>,</span><br><span class="line">  <span class="string">`birth`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> AUTO_INCREMENT = <span class="number">1006</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee`</span> (<span class="string">`id`</span>,<span class="string">`last_name`</span>,<span class="string">`email`</span>,<span class="string">`gender`</span>,<span class="string">`department`</span>,<span class="string">`birth`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建项目，添加模块依赖</p>
</li>
<li><p>编写配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot05DataApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">// 获得连接</span></span><br><span class="line">        Connection connection =   dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-JdbcTemplate"><a href="#3-JdbcTemplate" class="headerlink" title="3. JdbcTemplate"></a>3. JdbcTemplate</h3><ol>
<li><p>有了数据源（com.zaxxer.hikari.HikariDataSource），然后可以拿到数据库连接（java.sql.Connection），有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p>
</li>
<li><p>即使不使用第三方第数据库操作框架，如 MyBatis 等，Spring 本身也对原生的 JDBC 做了轻量级的封装，即 JdbcTemplate。</p>
</li>
<li><p>数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p>
</li>
<li><p>Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p>
</li>
<li><p>JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p>
</li>
</ol>
<hr>
<p><strong>JdbcTemplate主要提供以下几类方法：</strong></p>
<ul>
<li>execute 方法：可以用于执行任何 SQL 语句，一般用于执行 DDL 语句；</li>
<li>update 方法及 batchUpdate 方法：update 方法用于执行新增、修改、删除等语句；batchUpdate 方法用于执行批处理相关语句；</li>
<li>query 方法及 queryForXXX 方法：用于执行查询相关语句；</li>
<li>call 方法：用于执行存储过程、函数相关语句。</li>
</ul>
<hr>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有员工并显示出来</span></span><br><span class="line"><span class="comment">     * 在没有实体类的情况下, 使用Map, 每一个Map表示一行数据</span></span><br><span class="line"><span class="comment">     * Map中的key代表字段名, value代表字段的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; userList() &#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from springboot.employee&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into springboot.employee(last_name, email, gender, department, birth) VALUES&quot;</span></span><br><span class="line">                + <span class="string">&quot;(&#x27;Horsen&#x27;,&#x27;horsenliu@qq.com&#x27;,&#x27;0&#x27;,&#x27;112&#x27;,&#x27;&quot;</span> + <span class="keyword">new</span> Date().toString() + <span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;add_OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update springboot.employee set last_name=?,email=? where id=&quot;</span> + id;</span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">        objects[<span class="number">0</span>] = <span class="string">&quot;lhx&quot;</span>;</span><br><span class="line">        objects[<span class="number">1</span>] = <span class="string">&quot;123@123.com&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, objects);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update_OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from springboot.employee where id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete_OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>08_集成 Druid</title>
    <url>/posts/88197051.html</url>
    <content><![CDATA[<h3 id="1-Druid-简介"><a href="#1-Druid-简介" class="headerlink" title="1. Druid 简介"></a>1. Druid 简介</h3><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p>
<p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p>
<p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p>
<p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p>
<p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。==（基本都是固定的）==</p>
<blockquote>
<p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p>
<p>中文文档：<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</a></p>
<p>配置属性列表：<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8</a></p>
</blockquote>
<a id="more"></a>

<h3 id="2-配置数据源"><a href="#2-配置数据源" class="headerlink" title="2. 配置数据源"></a>2. 配置数据源</h3><ol>
<li><p>添加 Druid 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切换数据源</p>
<p>之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以通过 spring.datasource.type 指定数据源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 切换数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 Druid 基本配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SpringBoot默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line"><span class="comment"># Druid数据源专有配置</span></span><br><span class="line"><span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line"><span class="comment"># 如果允许时报错 java.lang.ClassNotFoundException:org.apache.log4j.Priority</span></span><br><span class="line"><span class="comment"># 则导入log4j依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line"><span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>导入 Loganj 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>现在需要自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了。需要自己添加 DruidDataSource 组件到容器中，并绑定属性</p>
<p>新建包 config，新建类 DruidConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将自定义的Druid数据源添加到容器中, 不再让SpringBoot自动创建</span></span><br><span class="line"><span class="comment">     * 绑定全局配置文件中的Druid数据源属性到com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">     * `<span class="doctag">@ConfigurationProperties</span>(prefix=&quot;spring.datasource&quot;)`</span></span><br><span class="line"><span class="comment">     * 作用就是将全局配置文件中前缀为spring.datasource的属性值</span></span><br><span class="line"><span class="comment">     * 注入到com.alibaba.druid.pool.DruidDataSource的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot05DataApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">// 看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">// 获得连接</span></span><br><span class="line">        Connection connection =   dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        DruidDataSource druidDataSource = (DruidDataSource) dataSource;</span><br><span class="line">        System.out.println(<span class="string">&quot;druidDataSource 数据源最大连接数：&quot;</span> + druidDataSource.getMaxActive());</span><br><span class="line">        System.out.println(<span class="string">&quot;druidDataSource 数据源初始化连接数：&quot;</span> + druidDataSource.getInitialSize());</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-配置-Druid-数据源监控"><a href="#3-配置-Druid-数据源监控" class="headerlink" title="3. 配置 Druid 数据源监控"></a>3. 配置 Druid 数据源监控</h3><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装路由器时，提供的一个默认的 web 页面</p>
<ol>
<li><p>在 DruidConfig 中添加，设置 Druid 的后台管理页面，比如登录账号、密码等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置Druid监控管理后台的Servlet</span></span><br><span class="line"><span class="comment"> * 内置Servlet容器时没有web.xml文件, 所以使用SpringBoot的注册Servlet方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">    <span class="comment">/* 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet</span></span><br><span class="line"><span class="comment">     * 的父类com.alibaba.druid.support.http.ResourceServlet中找到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 后台管理界面的登录账号</span></span><br><span class="line">    initParams.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    <span class="comment">// 后台管理界面的登录密码</span></span><br><span class="line">    initParams.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">/* 后台允许谁可以访问</span></span><br><span class="line"><span class="comment">     * initParams.put(&quot;allow&quot;, &quot;localhost&quot;) 表示只有本机可以访问</span></span><br><span class="line"><span class="comment">     * initParams.put(&quot;allow&quot;, &quot;&quot;) 为空或者为null时, 表示允许所有访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    initParams.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">/* deny：Druid 后台拒绝谁访问</span></span><br><span class="line"><span class="comment">     * initParams.put(&quot;horsen&quot;, &quot;192.168.1.20&quot;) 表示禁止此ip访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//设置初始化参数</span></span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动主类，访问<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p>
</li>
</ol>
<h3 id="4-配置-Druid-web-监控-filter-过滤器"><a href="#4-配置-Druid-web-监控-filter-过滤器" class="headerlink" title="4. 配置 Druid web 监控 filter 过滤器"></a>4. 配置 Druid web 监控 filter 过滤器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置Druid web监控filter过滤器</span></span><br><span class="line"><span class="comment"> * WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">    <span class="comment">// exclusions：设置哪些请求进行过滤排除掉, 从而不进行统计</span></span><br><span class="line">    Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    initParams.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);</span><br><span class="line">    bean.setInitParameters(initParams);</span><br><span class="line">    <span class="comment">// &quot;/*&quot; 表示过滤所有请求</span></span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title>09_整合 Mybatis</title>
    <url>/posts/7bc9c482.html</url>
    <content><![CDATA[<blockquote>
<p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p>
</blockquote>
<h3 id="1-整合测试"><a href="#1-整合测试" class="headerlink" title="1. 整合测试"></a>1. 整合测试</h3><ol>
<li><p>导入依赖（把刚才说的的Druid也用上）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 切换数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># SpringBoot默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment"># Druid数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment"># 如果允许时报错 java.lang.ClassNotFoundException:org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment"># 则导入log4j依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>连接数据库，编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Mapper 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Horsen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span> 表示这个类是Mybatis的Mapper类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Repository</span> 表示这是mapper层的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Department&gt; <span class="title">queryDepartmentList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Department <span class="title">queryDepartmentById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDepartment</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateDepartment</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteDepartment</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Mapper 实现类，在 resources 目录下新建 mybatis 目录，统一存放 *.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.DepartmentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryDepartmentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Department&quot;</span>&gt;</span></span><br><span class="line">        select * from springboot.department</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryDepartmentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Department&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from springboot.department where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决资源导出问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将实体类和 mapper 的位置配置到 application.yml 中</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定mybatis的核心配置文件与Mapper映射文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 对应实体类的路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.horsen.model</span></span><br><span class="line">  <span class="comment"># 下划线转驼峰</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller 进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getDepartments&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.queryDepartmentList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getDepartment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.queryDepartmentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-再增加一个员工类"><a href="#2-再增加一个员工类" class="headerlink" title="2. 再增加一个员工类"></a>2. 再增加一个员工类</h3><ol>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> Integer gender;</span><br><span class="line">  <span class="keyword">private</span> Integer department;</span><br><span class="line">  <span class="keyword">private</span> Date birth;</span><br><span class="line">  <span class="comment">// 冗余设计</span></span><br><span class="line">  <span class="keyword">private</span> Department eDepartment;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String lastName, String email, Integer gender, Integer department, Date birth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="keyword">this</span>.department = department;</span><br><span class="line">    <span class="keyword">this</span>.birth = birth;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Employee&gt; <span class="title">queryEmployeeList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Employee <span class="title">queryEmployeeById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addEmployee</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteEmployee</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper 实现类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmployeeMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birth&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;eDepartment&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Department&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryEmployeeList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmployeeMap&quot;</span>&gt;</span></span><br><span class="line">        select e.id as eid, last_name, email, gender, birth, d.id as did, d.department_name as dname</span><br><span class="line">        from springboot.employee e,</span><br><span class="line">             springboot.department d</span><br><span class="line">        where e.department = d.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryEmployeeById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmployeeMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select e.id as eid, last_name, email, gender, birth, d.id as did, d.department_name as dname</span><br><span class="line">        from springboot.employee e,</span><br><span class="line">             springboot.department d</span><br><span class="line">        where e.department = d.id</span><br><span class="line">          and e.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmployee&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">        insert into springboot.employee (last_name, email, gender, department, birth)</span><br><span class="line">        values (#&#123;lastName&#125;, #&#123;email&#125;, #&#123;gender&#125;, #&#123;department&#125;, #&#123;birth&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">        update springboot.employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;lastName != null&quot;</span>&gt;</span>last_name = #&#123;lastName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email = #&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span>gender = #&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;department != null&quot;</span>&gt;</span>department = #&#123;department&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birth != null&quot;</span>&gt;</span>birth = #&#123;birth&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from springboot.employee</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getEmployees&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.queryEmployeeList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getEmployee/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.queryEmployeeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addEmployee&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.addEmployee(<span class="keyword">new</span> Employee(<span class="string">&quot;Horsen&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="number">0</span>, <span class="number">101</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateEmployee&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setId(<span class="number">1006</span>);</span><br><span class="line">        employee.setLastName(<span class="string">&quot;LHX&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.updateEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteEmployee/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.deleteEmployee(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>CRUD</tag>
        <tag>Spring Boot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>10_静态资源处理</title>
    <url>/posts/4aeb1189.html</url>
    <content><![CDATA[<h3 id="1-通过-webjars"><a href="#1-通过-webjars" class="headerlink" title="1. 通过 webjars"></a>1. 通过 webjars</h3><ol>
<li><p>访问网站 <a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
</li>
<li><p>添加依赖，试一试能不能拿到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目</p>
</li>
<li><p>在地址栏输入<code>http://localhost:8080/webjars/jquery/3.5.1/jquery.js</code></p>
</li>
</ol>
<a id="more"></a>

<h3 id="2-静态资源映射规则"><a href="#2-静态资源映射规则" class="headerlink" title="2. 静态资源映射规则"></a>2. 静态资源映射规则</h3><p>在 resources 目录下新建对应的文件夹，里面可以存放静态资源</p>
<ul>
<li>“classpath:/META-INF/resources/“ </li>
<li>“classpath:/resources/“ </li>
<li>“classpath:/static/“ </li>
<li>“classpath:/public/“</li>
</ul>
<p>如果访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> 就会自动在目录中寻找 1.js 这个文件</p>
<h3 id="3-自定义资源路径"><a href="#3-自定义资源路径" class="headerlink" title="3. 自定义资源路径"></a>3. 自定义资源路径</h3><p>在配置文件中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> <span class="string">classpath:/coding</span></span><br></pre></td></tr></table></figure>

<p>但是第二种方法就失效了，所以不推荐这么干</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>webjars</tag>
      </tags>
  </entry>
  <entry>
    <title>11_首页和图标定制</title>
    <url>/posts/cba71a6b.html</url>
    <content><![CDATA[<p>上一篇博客里提到的那些静态资源文件夹下的所有 index.html 页面，都会被 /** 映射成欢迎页，而 templates 文件夹下的资源，只能通过 Controller 配合模板引擎才能访问，下一篇博客讲。</p>
<ol>
<li><p>resources 目录下新建 public 目录，编写首页 index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 访问 localhost:8080</p>
</li>
<li><p>关闭默认图标<strong>（该方法在新版本中已经弃用）</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">favicon:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>放一个图标在静态资源目录下</p>
</li>
</ol>
<hr>
<p>关于新版本如何自定义图标，参见该博客：</p>
<blockquote>
<p><strong>SpringBoot 2.2.x版本 favicon.ico 图标设置</strong></p>
<p><a href="https://blog.csdn.net/qq_29757633/article/details/107350825?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-107350825.nonecase&amp;utm_term=springboot%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%9B%BE%E6%A0%87">https://blog.csdn.net/qq_29757633/article/details/107350825?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-107350825.nonecase&amp;utm_term=springboot%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%9B%BE%E6%A0%87</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>12_Thymeleaf 模板引擎</title>
    <url>/posts/6312513d.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>前端交给我们的页面是 html 页面。如果是以前开发，需要把他们转成 jsp 页面，jsp好处就是当我们查出一些数据转发到 jsp 页面以后，可以用 jsp 轻松实现数据的显示及交互。</p>
<p>Spring Boot 是以 jar 的方式，不是 war，所以<strong>现在默认是不支持 jsp</strong>。</p>
<p><strong>Spring Boot 推荐使用模板引擎</strong></p>
<img src="/posts/6312513d/image-20200821154931539.png" class>

<a id="more"></a>

<h3 id="2-引入-Thymeleaf"><a href="#2-引入-Thymeleaf" class="headerlink" title="2. 引入 Thymeleaf"></a>2. 引入 Thymeleaf</h3><blockquote>
<p>Thymeleaf官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p>
<p>Thymeleaf Github 主页：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h3><ol>
<li><p>编写请求，增加数据传输</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 存入数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello, Thymeleaf!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 html 中添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- th:text就是将div中的内容设置为指定的值, 和之前学习的Vue一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-语法学习"><a href="#3-语法学习" class="headerlink" title="3. 语法学习"></a>3. 语法学习</h3><blockquote>
<p>标签属性：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence</a></p>
<p>表达式：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax</a></p>
<p>工具类：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-b-expression-utility-objects">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-b-expression-utility-objects</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>02_IoC 理论推导</title>
    <url>/posts/c8270d99.html</url>
    <content><![CDATA[<p>不想写了，看狂神说的博客吧，写的挺好的</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_33369905/article/details/106647330">https://blog.csdn.net/qq_33369905/article/details/106647330</a></p>
</blockquote>
<a id="more"></a>

<p>这里放张图片方便查看（花式水博客）</p>
<img src="/posts/c8270d99/image-20200731001310978.png" class>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>01_Spring 概述</title>
    <url>/posts/f403b3d5.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Spring：春天 —&gt; 给软件行业带来了春天</p>
<p>2002年，Rod Jahnson 首次推出了 Spring 框架雏形 interface21 框架。</p>
<p>2004年3月24日，Spring 框架以 interface21 框架为基础，经过重新设计，发布了1.0正式版。</p>
<p>很难想象  Rod Johnson 的学历，他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</p>
<p><strong>Spring 理念：使现有技术更加实用。本身就是一个大杂烩，整合现有的框架技术</strong></p>
<blockquote>
<p>官网：<a href="http://spring.io/">http://spring.io/</a></p>
<p>官方下载地址：<a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p>
<p>GitHub：<a href="https://github.com/spring-projects">https://github.com/spring-projects</a></p>
</blockquote>
<a id="more"></a>

<hr>
<p><strong>需要的 maven 配置：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h3><ul>
<li>Spring 是一个开源免费的框架（容器）</li>
<li>Spring 是一个轻量级的、非侵入式的框架</li>
<li><strong>控制反转（IoC）、面向切面编程（AOP）</strong></li>
<li>支持事务的处理，支持对框架整合</li>
</ul>
<blockquote>
<p> <strong>总结：Spring 是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器（框架）</strong></p>
</blockquote>
<h3 id="3-组成"><a href="#3-组成" class="headerlink" title="3. 组成"></a>3. 组成</h3><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 </p>
<img src="/posts/f403b3d5/spring_7_parts.png" class>

<p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p>
<ul>
<li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转（IoC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP 的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li>
<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li>
<li><strong>Spring  Web  模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li>
<li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
</ul>
<h3 id="4-拓展"><a href="#4-拓展" class="headerlink" title="4. 拓展"></a>4. 拓展</h3><p><strong>Spring Boot 与 Spring Cloud</strong></p>
<ul>
<li>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于 Spring Boot 快速开发单个微服务</li>
<li>Spring Cloud 是基于Spring Boot 实现的</li>
<li>Spring Boot 专注于快速、方便集成的单个微服务个体，Spring Cloud 关注全局的服务治理框架</li>
<li>Spring Boot 使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置，Spring Cloud 很大的一部分是基于 Spring Boot 来实现，Spring Boot 可以离开 Spring Cloud 独立使用开发项目，但是 Spring Cloud 离不开 Spring Boot，属于依赖的关系</li>
<li>SpringBoot 在 SpringClound 中起到了承上启下的作用，如果你要学习 SpringCloud 必须要学习 SpringBoot</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>03_Hello Spring</title>
    <url>/posts/9f7f7750.html</url>
    <content><![CDATA[<h3 id="1-导入-jar-包"><a href="#1-导入-jar-包" class="headerlink" title="1. 导入 jar 包"></a>1. 导入 jar 包</h3><p><em>之前父工程导过了</em></p>
<h3 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2. 编写代码"></a>2. 编写代码</h3><ol>
<li><p>编写一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>编写 beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- bean就是java对象, 由Spring创建和管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解析beans.xml文件, 生成管理相应的Bean对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// getBean: 参数即为spring配置文件中bean的id</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-思考"><a href="#3-思考" class="headerlink" title="3. 思考"></a>3. 思考</h3><ul>
<li><p>hello 对象是谁创建的？</p>
<ul>
<li><p>Spring 创建了 hello 对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Hello&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Hello hello = new Hello(); --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>hello 对象的属性是怎么设置的？</p>
<ul>
<li><p>Spring 容器设置了 hello 的属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hello.setStr(&quot;Spring&quot;); --&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>这个过程就叫控制反转</strong></p>
<ul>
<li>控制：使用Spring后，对象是由Spring来创建的</li>
<li>反转：程序本身不创建对象，而变成被动的接收对象</li>
</ul>
<h3 id="4-IoC-创建对象的方式"><a href="#4-IoC-创建对象的方式" class="headerlink" title="4. IoC 创建对象的方式"></a>4. IoC 创建对象的方式</h3><h4 id="4-1-通过无参构造方法创建"><a href="#4-1-通过无参构造方法创建" class="headerlink" title="4.1 通过无参构造方法创建"></a>4.1 通过无参构造方法创建</h4><p>就是上面那个例子</p>
<h4 id="4-2-通过有参构造方法创建"><a href="#4-2-通过有参构造方法创建" class="headerlink" title="4.2 通过有参构造方法创建"></a>4.2 通过有参构造方法创建</h4><ol>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种 下标赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- User user; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Horsen&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- user = new User(&quot;Horsen&quot;); --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种 根据参数类型设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lhx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第三种 根据参数名字设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name指参数名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;liuhaoxin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
      </tags>
  </entry>
  <entry>
    <title>04_Spring 配置说明</title>
    <url>/posts/3b16e56b.html</url>
    <content><![CDATA[<h3 id="1-别名"><a href="#1-别名" class="headerlink" title="1. 别名"></a>1. 别名</h3><p><code>&lt;alias&gt;</code>设置别名 ，为 bean 设置别名，可以设置多个别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Bean-的配置"><a href="#2-Bean-的配置" class="headerlink" title="2. Bean 的配置"></a>2. Bean 的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id: bean的标识符, 要唯一, 如果没有配置id, name就是默认标识符</span></span><br><span class="line"><span class="comment">    class: bean的全限定名=包名+类名</span></span><br><span class="line"><span class="comment">    name: 别名, 可以设置多个别名, 可以用逗号, 分号, 空格隔开</span></span><br><span class="line"><span class="comment">    如果配置id, 又配置了name, 那么name是别名</span></span><br><span class="line"><span class="comment">    如果不配置id和name, 可以根据applicationContext.getBean(.class)获取对象;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello2 h2,h3;h4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Import"><a href="#3-Import" class="headerlink" title="3. Import"></a>3. Import</h3><p>团队的合作通过<code>&lt;import&gt;</code>来实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;&#123;path&#125;/beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>05_DI 依赖注入</title>
    <url>/posts/3218da84.html</url>
    <content><![CDATA[<h3 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1. 构造器注入"></a>1. 构造器注入</h3><p>前面说过了</p>
<blockquote>
<p><a href="https://horsenliu.github.io/posts/9f7f7750.html">https://horsenliu.github.io/posts/9f7f7750.html</a></p>
<ol start="4">
<li>IoC 创建对象的方式</li>
</ol>
</blockquote>
<h3 id="2-Set方式注入（重点）"><a href="#2-Set方式注入（重点）" class="headerlink" title="2.  Set方式注入（重点）"></a>2.  Set方式注入（重点）</h3><p>整一个复杂一点的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="2-1-常量注入"><a href="#2-1-常量注入" class="headerlink" title="2.1 常量注入"></a>2.1 常量注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lhx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-2-Bean-注入"><a href="#2-2-Bean-注入" class="headerlink" title="2.2  Bean 注入"></a>2.2  Bean 注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Student&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-3-数组注入"><a href="#2-3-数组注入" class="headerlink" title="2.3 数组注入"></a>2.3 数组注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-4-List-注入"><a href="#2-4-List-注入" class="headerlink" title="2.4 List 注入"></a>2.4 List 注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-5-Map-注入"><a href="#2-5-Map-注入" class="headerlink" title="2.5 Map 注入"></a>2.5 Map 注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;303030199904031234&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6217-0000-1111-2222-333&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-6-Set-注入"><a href="#2-6-Set-注入" class="headerlink" title="2.6 Set 注入"></a>2.6 Set 注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>OverWatch<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>PUBG<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-7-Null-注入"><a href="#2-7-Null-注入" class="headerlink" title="2.7 Null 注入"></a>2.7 Null 注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="2-8-Properties-注入"><a href="#2-8-Properties-注入" class="headerlink" title="2.8 Properties 注入"></a>2.8 Properties 注入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>lhx<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>06_Bean 的作用域</title>
    <url>/posts/8e797015.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>范围</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>（默认）为每个Spring IoC 容器将单个 bean 定义的作用域限定为单个对象实例</td>
</tr>
<tr>
<td>prototype</td>
<td>将单个 bean 定义的作用域限定为任意数量的对象实例</td>
</tr>
<tr>
<td>request</td>
<td>将单个 bean 定义的范围限定为单个HTTP请求的生命周期。也就是说，每个HTTP请求都有一个在单个 bean 定义后面创建的 bean 实例</td>
</tr>
<tr>
<td>session</td>
<td>将单个 bean 定义的范围限定为 HTTP <code>Session</code>的生命周期</td>
</tr>
<tr>
<td>application</td>
<td>将单个 bean 定义的作用域限定为<code>ServletContext</code>的生命周期</td>
</tr>
<tr>
<td>websocket</td>
<td>将单个 bean 定义的作用域限定为<code>WebSocket</code>的生命周期</td>
</tr>
</tbody></table>
<a id="more"></a>

<h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h3><p>当一个 bean 的作用域为 Singleton，那么 Spring IoC 容器中只会存在一个共享的 bean 实例，并且所有对 bean 的请求，只要 id 与该 bean 定义相匹配，则只会返回 bean 的同一实例。Singleton 是单例类型，就是在创建起容器时就同时自动创建了一个 bean 的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton 作用域是 Spring 中的缺省作用域。要在 XML 中将 bean 定义成 singleton，可以这样配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-原型模式"><a href="#2-原型模式" class="headerlink" title="2. 原型模式"></a>2. 原型模式</h3><p>当一个 bean 的作用域为 Prototype，表示一个 bean 定义对应多个对象实例。Prototype 作用域的 bean 会导致在每次对该 bean 请求（将其注入到另一个 bean中，或者以程序的方式调用容器的 getBean() 方法）时都会创建一个新的 bean 实例。Prototype 是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取 bean 的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。<strong>根据经验，对有状态的 bean 应该使用 prototype 作用域，而对无状态的 bean 则应该使用 singleton 作用域。</strong>在 XML 中将 bean 定义成 prototype，可以这样配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-其他的只能在-web-开发中使用"><a href="#3-其他的只能在-web-开发中使用" class="headerlink" title="3. 其他的只能在 web 开发中使用"></a>3. 其他的只能在 web 开发中使用</h3><p>就不多说了</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>07_Bean 的自动装配</title>
    <url>/posts/8da2424e.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><ul>
<li>自动装配是使用 Spring 满足 bean 依赖的一种方法</li>
<li>Spring 会在应用上下文中为某个 bean 寻找其依赖的 bean</li>
</ul>
<p>Spring 中 bean 有三种装配机制，分别是：</p>
<ol>
<li>在 xml 中显式配置</li>
<li>在 java 中显式配置</li>
<li><strong>隐式的 bean 发现机制和自动装配</strong></li>
</ol>
<hr>
<p>测试之前先整几个实体类：</p>
<p>比如，一个人有两个宠物</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-ByName-自动装配"><a href="#2-ByName-自动装配" class="headerlink" title="2. ByName 自动装配"></a>2. ByName 自动装配</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lhx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当一个 bean 节点带有<code>autowire=&quot;byName&quot;</code>的属性时</p>
<ol>
<li>将查找其类中所有的 set 方法名，例如 setCat()，获得将 set 去掉并且首字母小写的字符串，即 cat</li>
<li>去 spring 容器中寻找是否有此字符串名称 id 的对象</li>
<li>如果有，就取出注入；如果没有，就报空指针异常</li>
</ol>
<h3 id="3-ByType-自动装配"><a href="#3-ByType-自动装配" class="headerlink" title="3. ByType 自动装配"></a>3. ByType 自动装配</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lhx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>与 ByName 类似，ByType查找的是对象的属性类型而不是属性名，但是要保证<strong>同一类型的对象，在 spring 容器中唯一</strong>，如果增加一个<code>&lt;bean id=&quot;dog2&quot; class=&quot;com.horsen.model.Dog&quot;/&gt;</code>就会报错。</p>
<p><em>使用 ByType 时甚至可以省略 id</em></p>
<h3 id="4-使用注解实现自动装配"><a href="#4-使用注解实现自动装配" class="headerlink" title="4. 使用注解实现自动装配"></a>4. 使用注解实现自动装配</h3><h4 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h4><ol>
<li><p>在 beans.xml 配置文件中进入 context 文件头（添加第4、7、8行）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>或者直接输入<code>&lt;context:annotation-config/&gt;</code>，让 IDEA 帮你自动导入这些东西</em></p>
</li>
<li><p>开启属性注解支持</p>
<p><code>&lt;context:annotation-config/&gt;</code></p>
</li>
</ol>
<h4 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2 测试"></a>4.2 测试</h4><ol>
<li><p>在属性上添加<code>@Autowired</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：@Autowired 是按类型自动转配的，不支持 id 匹配</strong></p>
</li>
<li><p>配置文件里就很干净</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.model.People&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-3-拓展"><a href="#4-3-拓展" class="headerlink" title="4.3 拓展"></a>4.3 拓展</h4><ol>
<li><p><code>@Autowired(required = false)</code> </p>
<ul>
<li>false，对象可以为null</li>
<li>true，对象必须存对象，不能为null</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@Qualifier(value = &quot;cat2&quot;)</code></p>
<ul>
<li><p>@Autowired 是根据类型自动装配的，加上 @Qualifier 则可以根据 byName 的方式自动装配</p>
</li>
<li><p>@Qualifier 不能单独使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;cat2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;dog2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>@Resource</code></p>
<ul>
<li>@Resource 如有指定的 name 属性，先按该属性进行 byName 方式查找装配</li>
<li>其次再进行默认的 byName 方式进行装配</li>
<li>如果以上都不成功，则按 byType 的方式自动装配</li>
<li>都不成功，则报异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;cat2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h3><p><code>@Autowired</code>与<code>@Resource</code>异同：</p>
<ol>
<li><code>@Autowired</code>与<code>@Resource</code>都可以用来装配 bean。都可以写在字段上，或写在setter方法上。</li>
<li><code>@Autowired</code>默认按类型装配（属于 spring 规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的<code>required</code>属性为<code>false</code>，如：<code>@Autowired(required=false) </code>，如果我们想使用名称装配可以结合<code>@Qualifier</code>注解进行使用</li>
<li><code>@Resource</code>（属于J2EE复返），默认按照名称进行装配，名称可以通过<code>name</code>属性进行指定。如果没有指定<code>name</code>属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在 setter 方法上默认取属性名进行装配。当找不到与名称匹配的 bean 时才按照类型进行装配。<strong>但是需要注意的是，如果<code>name</code>属性一旦指定，就只会按照名称进行装配。</strong></li>
<li>它们的作用相同都是用注解方式注入对象，但执行顺序不同。<code>@Autowired</code>先 byType，<code>@Resource</code>先 byName。</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>Spring</tag>
        <tag>自动装配</tag>
      </tags>
  </entry>
  <entry>
    <title>08_使用注解开发</title>
    <url>/posts/53af2c28.html</url>
    <content><![CDATA[<h3 id="1-引入-AOP-的包"><a href="#1-引入-AOP-的包" class="headerlink" title="1. 引入 AOP 的包"></a>1. 引入 AOP 的包</h3><p>在 Spring4 之后，想要使用注解形式，必须得要引入 AOP 的包</p>
<img src="/posts/53af2c28/image-20200731191506807.png" class>

<p>在配置文件当中，还需要引入一个 context 约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-Bean-的实现"><a href="#2-Bean-的实现" class="headerlink" title="2. Bean 的实现"></a>2. Bean 的实现</h3><p>之前都是使用<code>&lt;bean&gt;</code>标签进行 bean 注入，但是实际开发中，一般都会使用注解</p>
<ol>
<li><p>配置文件增加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定注解扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.horsen.model&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类中使用<code>@Component(&quot;user&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;lhx&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于<code>&lt;bean id=&quot;user&quot; class=&quot;com.horsen.model.User&quot;/&gt;</code></p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-属性注入"><a href="#3-属性注入" class="headerlink" title="3. 属性注入"></a>3. 属性注入</h3><ol>
<li><p>如果没有 setter 方法，在属性名上加<code>@Value(&quot;xxx&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;liuhaoxin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果有 setter 方法，在setter 方法上加<code>@Value(&quot;xxx&quot;)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;liuhaoxin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>相当于<code>&lt;property name=&quot;name&quot; value=&quot;liuhaoxin&quot;/&gt;</code></p>
<h3 id="4-衍生注解"><a href="#4-衍生注解" class="headerlink" title="4. 衍生注解"></a>4. 衍生注解</h3><p><strong>@Component 三个衍生注解</strong></p>
<p>为了更好的进行分层，Spring 可以使用其它三个注解，功能一样，目前使用哪一个功能都一样</p>
<ul>
<li><code>@Controller</code>：web 层</li>
<li><code>@Service</code>：service 层</li>
<li><code>@Repository</code>：dao 层</li>
</ul>
<h3 id="5-自动装配注解"><a href="#5-自动装配注解" class="headerlink" title="5. 自动装配注解"></a>5. 自动装配注解</h3><p>前面说过了</p>
<blockquote>
<p><a href="https://horsenliu.github.io/posts/8da2424e.html">https://horsenliu.github.io/posts/8da2424e.html</a></p>
</blockquote>
<h3 id="6-作用域"><a href="#6-作用域" class="headerlink" title="6. 作用域"></a>6. 作用域</h3><p><code>@Scope</code></p>
<ul>
<li>singleton：默认的，Spring 会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁</li>
<li>prototype：多例模式。关闭工厂，所有的对象不会销毁。内部的垃圾回收机制会回收</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;liuhaoxin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h3><p><strong>XML 与注解比较</strong></p>
<ul>
<li>XML可以适用任何场景，结构清晰，维护方便</li>
<li>注解不是自己提供的类使用不了，开发简单方便</li>
</ul>
<hr>
<p><strong>推荐最佳实践：XML 与注解整合开发</strong> </p>
<ul>
<li>XML 管理 Bean</li>
<li>注解完成属性注入</li>
<li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li>
</ul>
<h3 id="8-新特性：JavaConfig"><a href="#8-新特性：JavaConfig" class="headerlink" title="8. 新特性：JavaConfig"></a>8. 新特性：JavaConfig</h3><p><strong>就是基于 Java 类进行配置，完全不需要 xml 文件</strong></p>
<p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p>
<ol>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;lhx&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个 config 配置包，编写一个 MyConfig 配置类</p>
<p>使用<code>@Configuration</code>和<code>@Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试（注意第一句话和以前不一样了）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取java配置类</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line">    <span class="comment">// 获取IOC容器中的对象</span></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">    System.out.println(user.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><strong>如何导入其他配置？</strong></p>
<ol>
<li><p>再写一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在之前的配置类中选择导入这个配置类</p>
<p>使用<code>@Import()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>关于这种 Java 类的配置方式，在之后的 Spring Boot 和 Spring Cloud 中还会大量看到。</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>Spring</tag>
        <tag>JavaConfig</tag>
      </tags>
  </entry>
  <entry>
    <title>09_代理模式</title>
    <url>/posts/308a33f9.html</url>
    <content><![CDATA[<h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h3><p><strong>静态代理角色分析</strong></p>
<ul>
<li>抽象角色：一般使用接口或者抽象类来实现</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，一般会做一些附属的操作</li>
<li>客户：使用代理角色来进行一些操作</li>
</ul>
<a id="more"></a>

<hr>
<p><strong>代码实现</strong></p>
<ol>
<li><p>抽象角色：比如平时的用户业务，抽象之后就是增删改查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>真实对象：完成增删改查操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代理角色：设置一个代理类，不改变原来的业务，增加日志功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USerServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserServiceImpl userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;delete&quot;</span>);</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        userService.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        userService.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成日志</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Debug] 使用了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        USerServiceProxy proxy = <span class="keyword">new</span> USerServiceProxy();</span><br><span class="line">        proxy.setUserService(service);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><strong>静态代理的优点：</strong></p>
<ul>
<li>可以使得真实角色更加纯粹，不再去关注一些公共的事情</li>
<li>公共的业务由代理来完成，实现了业务的分工</li>
<li>公共业务发生扩展时变得更加集中和方便</li>
</ul>
<p><strong>缺点 :</strong></p>
<ul>
<li>类多了，多了代理类，工作量变大了，开发效率降低</li>
</ul>
<p>==想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理==</p>
<h3 id="2-动态代理（重难点）"><a href="#2-动态代理（重难点）" class="headerlink" title="2. 动态代理（重难点）"></a>2. 动态代理（重难点）</h3><ul>
<li>动态代理的角色和静态代理的一样</li>
<li>动态代理的代理类是动态生成的，静态代理的代理类是我们提前写好的</li>
<li>动态代理分为两类：一类是基于<strong>接口</strong>动态代理 ，一类是基于<strong>类</strong>的动态代理<ul>
<li>基于接口的动态代理：JDK动态代理</li>
<li>基于类的动态代理：CGLib</li>
<li>现在用的比较多的是 JAVAsist 来生成动态代理</li>
<li>我们这里使用 JDK 的原生代码来实现，其余的道理都是一样的</li>
</ul>
</li>
</ul>
<hr>
<p><strong>JDK 的动态代理需要了解两个类</strong><code>InvocationHandler</code>和<code>Proxy</code></p>
<ol>
<li><p><code>InvocationHandler</code>：调用处理程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理代理实例上的方法调用并返回结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> proxy  代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> method 代理类的调用处理程序的方法对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">// 动态代理的本质, 就是使用反射机制实现</span></span><br><span class="line">    Object result = method.invoke(rent, args);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Proxy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成代理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), rent.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><strong>代码实现</strong></p>
<ol>
<li><p>抽象角色</p>
<p>不变</p>
</li>
<li><p>真实角色</p>
<p>不变</p>
</li>
<li><p>代理角色（万能的），后面增加日志功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于自动生成代理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Horsen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被代理的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成代理类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理代理实例上的方法调用并返回结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy  代理类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 代理类的调用处理程序的方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 动态代理的本质, 就是使用反射机制实现</span></span><br><span class="line">        log(method.getName());</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[log] 执行了&quot;</span> + msg + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>客户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 真实角色</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">// 代理实例的调用处理程序</span></span><br><span class="line">        ProxyInvocationHandler handler = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">// 设置要代理的对象</span></span><br><span class="line">        handler.setTarget(userService);</span><br><span class="line">        <span class="comment">// 动态生成代理类</span></span><br><span class="line">        UserService proxy = (UserService) handler.getProxy();</span><br><span class="line">        proxy.add();</span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><strong>动态代理的优点：</strong></p>
<ul>
<li>可以使得真实角色更加纯粹，不再去关注一些公共的事情</li>
<li>公共的业务由代理来完成，实现了业务的分工</li>
<li>公共业务发生扩展时变得更加集中和方便</li>
<li>一个动态代理，一般代理某一类业务</li>
<li>一个动态代理可以代理多个类，代理的是接口</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>设计模式</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>10_AOP</title>
    <url>/posts/21793710.html</url>
    <content><![CDATA[<h3 id="1-什么是-AOP"><a href="#1-什么是-AOP" class="headerlink" title="1. 什么是 AOP"></a>1. 什么是 AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP 是 OOP 的延续，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<img src="/posts/21793710/AOP.jpg" class>

<a id="more"></a>

<h3 id="2-AOP-在-Spring-中的作用"><a href="#2-AOP-在-Spring-中的作用" class="headerlink" title="2. AOP 在 Spring 中的作用"></a>2. AOP 在 Spring 中的作用</h3><p><strong>提供声明式事务；允许用户自定义切面</strong></p>
<p>以下名词需要了解</p>
<ul>
<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志、安全、缓存、事务等等 ….</li>
<li>切面（Aspect）：横切关注点被模块化的特殊对象。即一个类。</li>
<li>通知（Advice）：切面必须要完成的工作。即类中的一个方法。</li>
<li>目标（Target）：被通知对象。</li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li>
<li>切入点（PointCut）：切面通知执行的 “地点”的定义。</li>
<li>连接点（JointPoint）：与切入点匹配的执行点。</li>
</ul>
<hr>
<p>Spring AOP 中，通过 Advice 定义横切逻辑，Spring中支持 5 种类型的 Advice：</p>
<table>
<thead>
<tr>
<th>通知类型</th>
<th>连接点</th>
<th>实现接口</th>
</tr>
</thead>
<tbody><tr>
<td>前置通知</td>
<td>方法前</td>
<td><code>org.springframework.aop.MethodBeforeAdvice</code></td>
</tr>
<tr>
<td>后置通知</td>
<td>方法后</td>
<td><code>org.springframework .aop.AfterReturningAdvice</code></td>
</tr>
<tr>
<td>环绕通知</td>
<td>方法前后</td>
<td><code>org.aopalliance.intercept.MethodInterceptor</code></td>
</tr>
<tr>
<td>异常抛出通知</td>
<td>方法抛出异常</td>
<td><code>org.springframework.aop.ThrowsAdvice</code></td>
</tr>
<tr>
<td>引介通知</td>
<td>类中增加新的方法属性</td>
<td><code>org.springframework .aop.IntroductionInterceptor</code></td>
</tr>
</tbody></table>
<p>即 AOP 在不改变原有代码的情况下，去增加新的功能</p>
<h3 id="3-使用-Spring-实现-AOP"><a href="#3-使用-Spring-实现-AOP" class="headerlink" title="3. 使用 Spring 实现 AOP"></a>3. 使用 Spring 实现 AOP</h3><p>需要导入一个依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-使用原生的-Spring-API-接口"><a href="#3-1-使用原生的-Spring-API-接口" class="headerlink" title="3.1 使用原生的 Spring API 接口"></a>3.1 使用原生的 Spring API 接口</h4><ol>
<li><p>业务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>前置通知</code>和<code>后置通知</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeLog</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Log] &quot;</span>+target.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue 返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Log] 执行了&quot;</span>+ method.getName()+<span class="string">&quot;方法, 返回值为&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Spring 的配置文件中注册，实现 AOP 切入，注意导入约束 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式一: 使用原生的Spring API接口 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.horsen.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 执行环绕增加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 动态代理 代理的是接口 而不是实现类</span></span><br><span class="line">    UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-2-使用自定义类实现-AOP"><a href="#3-2-使用自定义类实现-AOP" class="headerlink" title="3.2 使用自定义类实现 AOP"></a>3.2 使用自定义类实现 AOP</h4><ol>
<li><p>业务接口</p>
<p><em>不变</em></p>
</li>
<li><p>自定义一个类，作为<code>切面</code>。类中的方法就是<code>通知</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointCut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========方法执行前========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========方法执行后========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Spring 的配置文件中注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式二: 自定义一个类作为切面--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.horsen.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-3-使用注解实现-AOP"><a href="#3-3-使用注解实现-AOP" class="headerlink" title="3.3 使用注解实现 AOP"></a>3.3 使用注解实现 AOP</h4><ol>
<li><p>业务接口</p>
<p><em>不变</em></p>
</li>
<li><p>自定义一个类，通过注解实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.horsen.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------方法执行前----------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.horsen.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------方法执行后----------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在环绕增强中, 我们可以给定一个参数, 代表我们要获取处理切入的点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.horsen.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="comment">// 获得签名</span></span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        System.out.println(<span class="string">&quot;签名: &quot;</span>+signature);</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        Object proceed = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Spring 的配置文件中注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式三: 使用注解实现 AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>11_整合 Mybatis</title>
    <url>/posts/8f7c908e.html</url>
    <content><![CDATA[<h3 id="1-回忆-Mybatis"><a href="#1-回忆-Mybatis" class="headerlink" title="1. 回忆 Mybatis"></a>1. 回忆 Mybatis</h3><ol>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>编写核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关联所有实体类(设置别名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.horsen.model&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这个部分在整合之后就没有了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=false&amp;characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 关联所有mapper类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个部分在整合之后也可以不要 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.horsen.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    public List<span class="tag">&lt;<span class="name">User</span>&gt;</span> selectUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-MyBatis-Spring-学习"><a href="#2-MyBatis-Spring-学习" class="headerlink" title="2. MyBatis-Spring 学习"></a>2. MyBatis-Spring 学习</h3><blockquote>
<p>参考官方文档：<a href="http://mybatis.org/spring/zh/index.html">http://mybatis.org/spring/zh/index.html</a></p>
</blockquote>
<h3 id="3-整合实现"><a href="#3-整合实现" class="headerlink" title="3. 整合实现"></a>3. 整合实现</h3><ol>
<li><p>导入相关 jar 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring操作数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aop织入器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-mybatis整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Maven 静态资源过滤问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-1-方式一：使用-SqlSessionTemplete"><a href="#3-1-方式一：使用-SqlSessionTemplete" class="headerlink" title="3.1 方式一：使用 SqlSessionTemplete"></a>3.1 方式一：使用 SqlSessionTemplete</h4><ol>
<li><p>新建文件 spring-dao.xml 用于操作数据库和生成<code>SqlSessionTemplate</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>Datasource</code>数据源，替换 Mybatis 的数据源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> DataSource: 使用Spring的数据源替换Mybatis的配置</span></span><br><span class="line"><span class="comment"> 这里使用Spring提供的JDBC</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=false&amp;characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置<code>SqlSessionFactory</code>，并关联 MyBatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定Mybatis配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/horsen/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注册<code>SqlSessionTemplate</code>，关联<code>SqlSessionFactory</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SqlSessionTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为SqlSessionTemplate没有set方法, 所以只能用构造器注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个接口的实现类，私有化<code>SqlSessionTemplate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原来所有的操作都使用sqlSession来执行 现在都使用sqlSessionTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSessionTemplate.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 applicationContext.xml 注册这个 bean，并导入 spring-dao.xml 中的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">    <span class="keyword">for</span> (User user : userMapper.selectUser()) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>此时此刻，mybatis.xml 文件中就可以只写这些东西，剩下的事情都交给 Spring 来做了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关联所有实体类(设置别名) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.horsen.model&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也不再需要 Mybatis 的工具类了</p>
<h4 id="3-2-方式二：使用-SqlSessionDaoSupport"><a href="#3-2-方式二：使用-SqlSessionDaoSupport" class="headerlink" title="3.2 方式二：使用 SqlSessionDaoSupport"></a>3.2 方式二：使用 SqlSessionDaoSupport</h4><ol>
<li><p>修改一下接口的实现类，继承<code>SqlSessionDaoSupport</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).selectUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 bean 的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p>这种方法不需要手动注入<code>SqlsessionTemplate</code>，也就是说 spring-dao.xml 中关于<code>SqlsessionTemplete</code>就不需要写了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SqlSessionTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为SqlSessionTemplate没有set方法, 所以只能用构造器注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h3><p>整合之后的项目开发逻辑梳理详见视频：</p>
<blockquote>
<p>4:30 开始 <a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=26">https://www.bilibili.com/video/BV1WE411d7Dv?p=26</a></p>
</blockquote>
<p>这里简单给出步骤：</p>
<ol>
<li>pom.xml 导入依赖</li>
<li>新建包，新建实体类，新建接口，设计业务需求</li>
<li>配置 mybatis-config.xml</li>
<li>配置 spring-dao.xml</li>
<li>Mapper.xml 实现接口</li>
<li>接口的实现类，负责私有化<code>SqlSessionTemplate</code>（或者用<code>SqlsessionDaoSupport</code>）</li>
<li>applicationContext.xml 中注入这个类</li>
<li>测试类</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>12_声明式事务</title>
    <url>/posts/6bf2e383.html</url>
    <content><![CDATA[<h3 id="1-回顾事务"><a href="#1-回顾事务" class="headerlink" title="1. 回顾事务"></a>1. 回顾事务</h3><ul>
<li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎</li>
<li>事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性</li>
</ul>
<hr>
<p>事务的四个属性 <strong>ACID</strong></p>
<ul>
<li><p><strong>原子性（Atomicity）：</strong>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</p>
</li>
<li><p><strong>一致性（Consistency）：</strong>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</p>
</li>
<li><p><strong>隔离性（Isolation）：</strong>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</p>
</li>
<li><p><strong>持久性（Durability）：</strong>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中</p>
</li>
</ul>
<a id="more"></a>

<h3 id="2-Spring-中的事务管理"><a href="#2-Spring-中的事务管理" class="headerlink" title="2. Spring 中的事务管理"></a>2. Spring 中的事务管理</h3><h4 id="2-1-编程式事务管理（不推荐使用）"><a href="#2-1-编程式事务管理（不推荐使用）" class="headerlink" title="2.1 编程式事务管理（不推荐使用）"></a>2.1 编程式事务管理（不推荐使用）</h4><ul>
<li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li>
<li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li>
</ul>
<h4 id="2-2-声明式事务管理"><a href="#2-2-声明式事务管理" class="headerlink" title="2.2 声明式事务管理"></a>2.2 声明式事务管理</h4><ul>
<li>一般情况下比编程式事务好用</li>
<li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理</li>
<li>将事务管理作为横切关注点，通过 AOP 方法模块化。Spring 中通过 Spring AOP框 架支持声明式事务管理</li>
</ul>
<hr>
<p><strong>Spring 事务传播特性：</strong></p>
<p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。Spring 支持7种事务传播行为：</p>
<ul>
<li><strong>REQUIRED（默认）</strong>：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li>
<li><strong>SUPPORTS</strong>：支持当前事务，如果没有当前事务，就以非事务方法执行。</li>
<li><strong>MANDATORY</strong>：使用当前事务，如果没有当前事务，就抛出异常。</li>
<li><strong>REQUIRES_NEW</strong>：新建事务，如果当前存在事务，把当前事务挂起。</li>
<li><strong>NOT_SUPPORTED</strong>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li><strong>NEVER</strong>：以非事务方式执行操作，如果当前事务存在则抛出异常。</li>
<li><strong>NESTED</strong>：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。</li>
</ul>
<p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1() –&gt; Service2#method2() –&gt; Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p>
<p><em>就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！</em></p>
<hr>
<ol>
<li><p>spring-dao.xml 中导入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置声明式事务</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置声明式事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结合AOP实现事务的织入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 配置事务通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给哪些方法配置事务 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还可以配置事物的传播特性(新东西 面试会考) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 配置事务切入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.horsen.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>事务</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>01_微服务概述</title>
    <url>/posts/9ad4dd14.html</url>
    <content><![CDATA[<h3 id="1-什么是微服务"><a href="#1-什么是微服务" class="headerlink" title="1. 什么是微服务"></a>1. 什么是微服务</h3><p>微服务（Microservice Architecture）是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p>
<blockquote>
<p>就目前而言，对于微服务，业界并没有一个统一的，标准的定义</p>
<p>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格， 它提倡将单一的应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建，可以有一个非常轻量级的集中式管理来 协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>
</blockquote>
<p>从技术维度来理解下：微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p>
<a id="more"></a>

<h3 id="2-微服务与微服务架构"><a href="#2-微服务与微服务架构" class="headerlink" title="2. 微服务与微服务架构"></a>2. 微服务与微服务架构</h3><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p>强调的是服务的大小，关注的是某一个点，是具体解决某一个问题或者提供落地对应服务的一个服务应用，狭义的看，可以看做是 IDEA 中的一个个微服务工程，或者 Moudle</p>
<h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><p>一种新的架构形式，Martin Fowler，2014提出</p>
<p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务于服务间采用轻量级的通信机制互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避 免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建。</p>
<h3 id="3-微服务的优缺点"><a href="#3-微服务的优缺点" class="headerlink" title="3. 微服务的优缺点"></a>3. 微服务的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求</li>
<li>开发简单，开发效率提高，一个服务可能就是专一的只干一件事</li>
<li>微服务能够被小团队单独开发，这个小团队是2~5人的开发人员组成</li>
<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的</li>
<li>微服务能使用不同的语言开发</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如 jenkins，Hudson，bamboo</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值。</li>
<li>微服务允许你利用融合最新技术</li>
<li>微服务<strong>只是业务逻辑的代码</strong>，不会和 HTML，CSS 或其他界面混合</li>
<li><strong>每个微服务都有自己的存储能力</strong>，可以有自己的数据库，也可以有统一数据库</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>开发人员要处理分布式系统的复杂性</li>
<li>多服务运维难度，随着服务的增加，运维的压力也在增大</li>
<li>系统部署依赖</li>
<li>服务间通信成本</li>
<li>数据一致性</li>
<li>系统集成测试</li>
<li>性能监控</li>
<li>…..</li>
</ul>
<h3 id="4-微服务技术栈"><a href="#4-微服务技术栈" class="headerlink" title="4. 微服务技术栈"></a>4. 微服务技术栈</h3><table>
<thead>
<tr>
<th>微服务条目</th>
<th>落地技术</th>
</tr>
</thead>
<tbody><tr>
<td>服务开发</td>
<td>Spring Boot、Spring、Spring MVC</td>
</tr>
<tr>
<td>服务配置与管理</td>
<td>Netflix 公司的 Archaius、阿里的 Diamond 等</td>
</tr>
<tr>
<td>服务注册与发现</td>
<td>Eureka、Consul、Zookeeper 等</td>
</tr>
<tr>
<td>服务调用</td>
<td>Rest、RPC、gRPC</td>
</tr>
<tr>
<td>服务熔断器</td>
<td>Hystrix、Envoy 等</td>
</tr>
<tr>
<td>负载均衡</td>
<td>Ribbon、Nginx 等</td>
</tr>
<tr>
<td>服务接口调用（客户端调用服务的简化工具）</td>
<td>Feign 等</td>
</tr>
<tr>
<td>消息队列</td>
<td>Kafka、RabbitMQ、ActiveMQ 等</td>
</tr>
<tr>
<td>服务配置中心管理</td>
<td>Spring Cloud Config、Chef 等</td>
</tr>
<tr>
<td>服务路由（API网关）</td>
<td>Zuul 等</td>
</tr>
<tr>
<td>服务监控</td>
<td>Zabbix、Nagios、Metrics、Specatator 等</td>
</tr>
<tr>
<td>全链路追踪</td>
<td>Zipkin、Brave、Dapper 等</td>
</tr>
<tr>
<td>服务部署</td>
<td>Docker、OpenStack、Kubernetes等</td>
</tr>
<tr>
<td>数据流操作开发包</td>
<td>Spring Cloud Stream（封装与Redis、Rabbit、Kafka 等发送接收消息）</td>
</tr>
<tr>
<td>事件消息总线</td>
<td>Spring Cloud Bus</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>02_Spring Cloud 入门</title>
    <url>/posts/941ea014.html</url>
    <content><![CDATA[<h3 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h3><blockquote>
<p>官网：<a href="https://spring.io/">https://spring.io/</a></p>
</blockquote>
<img src="/posts/941ea014/cloud-diagram.png" class>

<p>Spring Cloud 基于 Spring Boot 提供了一套微服务解决方案，<strong>包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等</strong>组件，除了基于 NetFlix 的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p>
<p>Spring Cloud 利用 Spring Boot 的开发便利性，巧妙地简化了分布式系统基础设施的开发，Spring Cloud 为开发人员提供了快速构建分布式系统的一些工具，<strong>包括配置管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等等</strong>，它们都可以用 Spring Boot 的开发风格做到一键启动和部署。</p>
<p>Spring Boot 并没有重复造轮子，它只是将目前各家公司开发的比较成熟，经得起实际考研的服务框架组合起来，通过 Spring Boot 风格进行再封装，屏蔽掉了复杂的配置和实现原理，<strong>最终给开发者留出了一套简单易懂，易部署和易维护的分布式系统开发工具包</strong>。</p>
<p>Spring Cloud 是分布式微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶。</p>
<a id="more"></a>

<h3 id="2-Spring-Cloud-和-Spring-Boot-关系"><a href="#2-Spring-Cloud-和-Spring-Boot-关系" class="headerlink" title="2. Spring Cloud 和 Spring Boot 关系"></a>2. Spring Cloud 和 Spring Boot 关系</h3><p>Spring Boot 专注于快速方便的开发单个个体微服务。</p>
<p>Spring Cloud 是关注全局的微服务协调整理治理框架，它将 Spring Boot 开发的一个个单体微服务整合并 管理起来，为各个微服务之间提供：配置管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等等集成服务。</p>
<p>Spring Boot 可以离开 Spring Clooud 独立使用，开发项目，但是 Spring Cloud 离不开Spring Boot，属于依赖关系。</p>
<p><strong>Spring Boot 专注于快速、方便的开发单个个体微服务，Spring Cloud 关注全局的服务治理框架。</strong></p>
<h3 id="3-Dubbo-和-Spring-Cloud-对比"><a href="#3-Dubbo-和-Spring-Cloud-对比" class="headerlink" title="3. Dubbo 和 Spring Cloud 对比"></a>3. Dubbo 和 Spring Cloud 对比</h3><table>
<thead>
<tr>
<th>工具</th>
<th>Dubbo</th>
<th>Spring</th>
</tr>
</thead>
<tbody><tr>
<td>服务注册中心</td>
<td>Zookeeper</td>
<td>Spring Cloud Netfilx Eureka</td>
</tr>
<tr>
<td>服务调用方式</td>
<td>RPC</td>
<td>REST API</td>
</tr>
<tr>
<td>服务监控</td>
<td>Dubbo-monitor</td>
<td>Spring Boot Admin</td>
</tr>
<tr>
<td>断路器</td>
<td>不完善</td>
<td>Spring Cloud Netflix Hystrix</td>
</tr>
<tr>
<td>服务网关</td>
<td>无</td>
<td>Spring Cloud Netflix Zuul</td>
</tr>
<tr>
<td>分布式配置</td>
<td>无</td>
<td>Spring Cloud Config</td>
</tr>
<tr>
<td>服务跟踪</td>
<td>无</td>
<td>Spring Cloud Sleuth</td>
</tr>
<tr>
<td>消息总线</td>
<td>无</td>
<td>Spring Cloud Bus</td>
</tr>
<tr>
<td>数据流</td>
<td>无</td>
<td>Spring Cloud Stream</td>
</tr>
<tr>
<td>批量任务</td>
<td>无</td>
<td>Spring Cloud Task</td>
</tr>
</tbody></table>
<hr>
<p><strong>最大区别：Spring Cloud 抛弃了 Dubbo 的 RPC 通信，采用的是基于 HTTP 的 REST 方式。</strong></p>
<p> 严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生 RPC 带来的问题。而且 REST 相比 RPC 更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。</p>
<hr>
<p><strong>品牌机与组装机的区别</strong> </p>
<p>很明显，Spring Cloud 的功能比 Dubbo 更加强大，涵盖面更广，而且作为Spring的拳头项目，它也能够与 Spring Framework、Spring Boot、Spring Data、Spring Batch 等其他 Spring 项目完美融合，这些对于微服务而言是至关重要的。</p>
<p>使用 Dubbo 构建的微服务架构就像组装电脑，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是让人不怎么放心，但是如果你是一名高手，那这些都不是问题。</p>
<p>而Spring Cloud 就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。</p>
<hr>
<p><strong>社区支持与更新力度</strong></p>
<p>最为重要的是，Dubbo 停止了5年左右的更新，虽然 2017.7 重启了。对于技术发展的新需求，需要由开发者自行拓展升级（比如当当网弄出了 DubboX），这对于很多想要采用微服务架构的中小软件组织， 显然是不太合适的，中小公司没有这么强大的技术能力去修改Dubbo源码 + 周边的一整套解决方案，并 不是每一个公司都有阿里的大牛 + 真实的线上生产环境测试过。</p>
<hr>
<p><strong>总结</strong></p>
<p>Dubbo 的定位是一款 RPC 框架，Spring Cloud 的目标是微服务架构下的一站式解决方案</p>
<h3 id="3-Spring-Cloud-下载"><a href="#3-Spring-Cloud-下载" class="headerlink" title="3. Spring Cloud 下载"></a>3. Spring Cloud 下载</h3><blockquote>
<p>官网：<a href="https://spring.io/projects/spring-cloud#learn">https://spring.io/projects/spring-cloud#learn</a></p>
</blockquote>
<p>Spring Cloud 是一个由众多独立子项目组成的大型综合项目，每个子项目有不同的发行节奏，都维护着自己的发布版本号。Spring Cloud 通过一个资源清单 BOM（Bill of Materials）来管理每个版本的子项目清单。为避免与子项目的发布号混淆，所以没有采用版本号的方式，而是通过命名的方式。</p>
<p>这些版本名称的命名方式采用了伦敦地铁站的名称，同时根据字母表的顺序来对应版本时间顺序，比如，最早的 Release 版本：Angel，第二个 Release 版本：Brixton，然后是 Camden、Dalston、 Edgware，Finchley，目前最新的是 Hoxton 版本。</p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li>
<li>中文API文档：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li>
<li>Spring Cloud 中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></li>
<li>Spring Cloud 中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>03_Rest 微服务构建</title>
    <url>/posts/bd3a908a.html</url>
    <content><![CDATA[<h3 id="1-创建父工程"><a href="#1-创建父工程" class="headerlink" title="1. 创建父工程"></a>1. 创建父工程</h3><ol>
<li><p>新建普通 maven 项目，<strong>采用 pom 的打包方式</strong>，为了将子模块公用的 jar 包统一管理</p>
</li>
<li><p>编写 pom.xml<strong>（注意打包方式、版本管理和<code>&lt;dependencyManagement&gt;</code>标签）</strong></p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringCloud_Study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-provider-dept-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 版本管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span><span class="comment">&lt;!-- 5.1.47 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- SpringCloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- SpringBoot --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- SpringBoot启动器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- logback --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Junit --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-创建-Api-公共模块"><a href="#2-创建-Api-公共模块" class="headerlink" title="2. 创建 Api 公共模块"></a>2. 创建 Api 公共模块</h3><ol>
<li><p>新建普通 maven 模块<code>spring-cloud-api</code></p>
</li>
<li><p>编写 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringCloud_Study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库 springboot01，创建部门表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept</span><br><span class="line">(</span><br><span class="line">    deptno    <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    dname     <span class="built_in">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">    db_source <span class="built_in">VARCHAR</span>(<span class="number">60</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname, db_source)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;开发部&#x27;</span>, <span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname, db_source)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;人事部&#x27;</span>, <span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname, db_source)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;财务部&#x27;</span>, <span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname, db_source)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;市场部&#x27;</span>, <span class="keyword">DATABASE</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept(dname, db_source)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;运维部&#x27;</span>, <span class="keyword">DATABASE</span>());</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类<strong>（注意需要序列化）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">// 启用链式写法</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * deptno 主键</span></span><br><span class="line"><span class="comment">     * dname 部门名称</span></span><br><span class="line"><span class="comment">     * dbSource 数据库来源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long deptno;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> String dbSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>目录结构</p>
<img src="/posts/bd3a908a/image-20200824201656903.png" class>

</li>
</ol>
<h3 id="3-创建-Provider-模块"><a href="#3-创建-Provider-模块" class="headerlink" title="3. 创建 Provider 模块"></a>3. 创建 Provider 模块</h3><ol>
<li><p>新建普通 maven 模块<code>spring-cloud-provider-dept-8001</code></p>
</li>
<li><p>编写 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringCloud_Study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-provider-dept-8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义的 Api module --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Jetty --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 热部署工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.horsen.springcloud.model</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-provider-dept-8001</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcloud01?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">dbcp2:</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span>           <span class="comment">#数据库连接池的最小维持连接数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span>       <span class="comment">#初始化连接数</span></span><br><span class="line">      <span class="attr">max-total:</span> <span class="number">5</span>          <span class="comment">#最大连接数</span></span><br><span class="line">      <span class="attr">max-wait-millis:</span> <span class="number">200</span>  <span class="comment">#等待连接获取的最大超时时间</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写部门 Mapper 接口和实现 XML</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dept <span class="title">queryById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.springcloud.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addDept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        insert into springcloud01.dept (dname, db_source)</span><br><span class="line">        values (#&#123;dname&#125;, DATABASE());</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from springcloud01.dept</span><br><span class="line">        where deptno = #&#123;deptno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from springcloud01.dept</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Service 接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dept <span class="title">queryById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptServiceImpl</span><span class="params">(DeptMapper deptMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptMapper = deptMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptMapper.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller，提供 REST 服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dept&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptController</span><span class="params">(DeptService deptService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptService = deptService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="comment">// 如果参数放在请求体, 后台要用@RequestBody才能接收到</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 DeptProvider 主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>目录结构</p>
<img src="/posts/bd3a908a/image-20200824202631419.png" class>

</li>
</ol>
<h3 id="4-创建-Consumer-模块"><a href="#4-创建-Consumer-模块" class="headerlink" title="4. 创建 Consumer 模块"></a>4. 创建 Consumer 模块</h3><ol>
<li><p>新建普通 maven 模块<code>spring-cloud-consumer-dept-80</code></p>
</li>
<li><p>编写 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringCloud_Study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-consumer-dept-80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 热部署工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 ConfigBean，注入 RestTemplate</p>
<p>RestTemplate 提供了多种便捷访问远程 Http 服务的方法，是一种简单便捷的访问 REST 服务模板类，是 Spring 提供的用于访问Rest服务的客户端模板工具集</p>
<p>使用 RestTemplate 访问 REST 接口非常的简单粗暴且无脑 </p>
<p>（url，requsetMap，ResponseBean.class） 这三个参数分别代表 REST 请求地址，请求参数， Http 响应转换被转换成的对象类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBren</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/dept/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptConsumerController</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/add&quot;</span>, dept, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/get/&quot;</span> + id, Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/list&quot;</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>目录结构</p>
<img src="/posts/bd3a908a/image-20200824214501330.png" class></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Rest</tag>
      </tags>
  </entry>
  <entry>
    <title>04_Eureka 服务注册与发现</title>
    <url>/posts/9471b386.html</url>
    <content><![CDATA[<h3 id="1-什么是-Eureka"><a href="#1-什么是-Eureka" class="headerlink" title="1. 什么是 Eureka"></a>1. 什么是 Eureka</h3><p>Netflix 在设计Eureka 时，遵循 CAP 原则</p>
<p>CA P原则又称 CAP 定理，指的是在一个分布式系统中</p>
<ul>
<li>一致性（Consistency）</li>
<li>可用性（Availability）</li>
<li>分区容错性（Partition tolerance）</li>
</ul>
<p>CAP 原则指的是，这三个要素最多<strong>只能同时实现两点</strong>，不可能三者兼顾。</p>
<hr>
<p>Eureka 是 Netflix 的一个子模块，也是核心模块之一。Eureka 是一个基于 REST 的服务，用于定位服务， 以实现云端中间层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于 Dubbo 的注册中心，比如 Zookeeper。</p>
<a id="more"></a>

<h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>Eureka的基本架构：</p>
<p>Spring Cloud 封装了 NetFlix 公司开发的 Eureka 模块来实现服务注册和发现</p>
<p>Eureka 采用了 C-S 的架构设计，Eureka Server 作为服务注册功能的服务器，它是服务注册中心，而系统中的其他微服务，使用 Eureka 的客户端连接到 Eureka Server 并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行，Spring Cloud 的一些其他模块（比如Zuul）就可以通过 Eureka Server 来发现系统中的其他微服务，并执行相关的逻辑。</p>
<img src="/posts/9471b386/image-20200825095414344.png" class>

<hr>
<p>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong></p>
<ul>
<li>Eureka Server 提供服务注册服务，各个节点启动后，会在 Eureka Server 中进行注册，这样Eureka Server 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。</li>
<li>Eureka Client 是一个 Java 客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向 Eureka Server 发送心跳（默认周期为30秒）。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 将会从服务注册表中把这个服务节点移除掉（默认周期为90秒）</li>
</ul>
<hr>
<p><strong>三大角色：</strong></p>
<ul>
<li>Eureka Server：提供服务的注册于发现</li>
<li>Service Provider：将自身服务注册到 Eureka 中，从而使消费方能够找到 </li>
<li>Service Consumer：服务消费方从Eureka中获取注册服务列表，从而找到消费服务。</li>
</ul>
<h3 id="3-构建服务-Eureka-Server"><a href="#3-构建服务-Eureka-Server" class="headerlink" title="3. 构建服务 Eureka Server"></a>3. 构建服务 Eureka Server</h3><ol>
<li><p>新建普通 maven 模块<code>spring-cloud-eureka-7001</code></p>
</li>
<li><p>编写 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringCloud_Study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-eureka-7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 热部署工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># EurekaServer的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到EurekaServer中, 因为本身是服务器所以无需注册</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己就是注册中心, 职责是维护服务实例, 并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与EurekaServer交互的地址查询服务和注册服务都需要依赖这个defaultZone地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写主启动类，注意<code>@EnableEurekaServer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-设置服务提供者-Service-Provider"><a href="#4-设置服务提供者-Service-Provider" class="headerlink" title="4. 设置服务提供者 Service Provider"></a>4. 设置服务提供者 Service Provider</h3><ol>
<li><p>修改 8001 服务的 pom 文件，添加 Eureka 支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yml 中配置 Eureka</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类添加<code>@EnableEurekaClient</code></p>
</li>
<li><p>测试，先启动 7001，再启动 8001</p>
</li>
</ol>
<h3 id="5-actuator-与注册微服务信息完善"><a href="#5-actuator-与注册微服务信息完善" class="headerlink" title="5. actuator 与注册微服务信息完善"></a>5. actuator 与注册微服务信息完善</h3><ol>
<li><p>修改 yml 配置文件（优化显示）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="comment"># 修改服务名称</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-provider-dept-8001</span></span><br><span class="line">    <span class="comment"># 开启访问路径显示ip地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- actuator监控信息完善 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中添加信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">horsen-springcloud</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">horsenliu.gitee.io</span></span><br><span class="line">  <span class="attr">build.artifactId:</span> <span class="string">$&#123;project.artifactId&#125;</span></span><br><span class="line">  <span class="attr">build.version:</span> <span class="string">$&#123;project.version&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决<code>artifactId</code>和<code>version</code>不显示的问题</p>
<p>在父工程 pom 中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">delimiters</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delimit</span>&gt;</span>$<span class="tag">&lt;/<span class="name">delimit</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">delimiters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="6-Eureka-的自我保护机制"><a href="#6-Eureka-的自我保护机制" class="headerlink" title="6. Eureka 的自我保护机制"></a>6. Eureka 的自我保护机制</h3><p><strong>某时刻某一个微服务不可以用了，Eureka 不会立刻清理，依旧会对该微服务的信息进行保存</strong></p>
<p>默认情况下，如果 Eureka Server 在一定时间内没有接收到某个微服务实例的心跳，Eureka Server 将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与 Eureka 之间无法正常通行，以上行为可能变得非常危险了。因为微服务本身其实是健康的，<strong>此时本不应该注销这个服务</strong>。Eureka 通过<strong>自我保护机制</strong>来解决这个问题。当Eureka Server 节点在<strong>短时间内丢失过多客户端</strong>时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，Eureka Server 就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该 Eureka Server 节点会自动退出自我保护模式。</p>
<p>在自我保护模式中，Eureka Server 会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server 节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话：好死不如赖活着。</p>
<p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式， 可以让 Eureka 集群更加的健壮和稳定。</p>
<p>在SpringCloud中，可以使用<code>eureka.server.enable-self-preservation = false</code>禁用自我保护模式。</p>
<h3 id="7-8001-服务发现-Discovery"><a href="#7-8001-服务发现-Discovery" class="headerlink" title="7. 8001 服务发现 Discovery"></a>7. 8001 服务发现 Discovery</h3><ol>
<li><p>Controller 中新增私有变量<code>private DiscoveryClient client;</code>（需要注入）</p>
</li>
<li><p>新增一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得微服务列表清单</span></span><br><span class="line">    List&lt;String&gt; services = client.getServices();</span><br><span class="line">    System.out.println(<span class="string">&quot;discovery =&gt; services: &quot;</span> + services);</span><br><span class="line">    <span class="comment">// 得到一个具体的微服务信息</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="string">&quot;SPRING-CLOUD-PROVIDER-DEPT-8001&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        System.out.println(instance.getInstanceId() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                + instance.getPort() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                + instance.getUri() + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                + instance.getServiceId() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类新增注解<code>@EnableDiscoveryClient</code></p>
</li>
</ol>
<h3 id="8-集群配置"><a href="#8-集群配置" class="headerlink" title="8. 集群配置"></a>8. 集群配置</h3><ol>
<li><p>新建模块<code>spring-cloud-eureka-7002</code>、<code>spring-cloud-eureka-7003</code></p>
</li>
<li><p>pom、application 和 主启动类与 7001 类似</p>
</li>
<li><p>在 hosts 中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1    eureka7001.com</span><br><span class="line">127.0.0.1    eureka7002.com</span><br><span class="line">127.0.0.1    eureka7003.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 application.yml，使三个服务相互注册</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># EurekaServer的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到EurekaServer中, 因为本身是服务器所以无需注册</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己就是注册中心, 职责是维护服务实例, 并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与EurekaServer交互的地址查询服务和注册服务都需要依赖这个defaultZone地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">      <span class="comment"># defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># EurekaServer的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到EurekaServer中, 因为本身是服务器所以无需注册</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己就是注册中心, 职责是维护服务实例, 并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与EurekaServer交互的地址查询服务和注册服务都需要依赖这个defaultZone地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">      <span class="comment"># defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># EurekaServer的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7003.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到EurekaServer中, 因为本身是服务器所以无需注册</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己就是注册中心, 职责是维护服务实例, 并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与EurekaServer交互的地址查询服务和注册服务都需要依赖这个defaultZone地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br><span class="line">      <span class="comment"># defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="9-对比-Zookeeper"><a href="#9-对比-Zookeeper" class="headerlink" title="9. 对比 Zookeeper"></a>9. 对比 Zookeeper</h3><p><strong>回顾 CAP 原则</strong></p>
<ul>
<li><p>RDBMS（Mysql、Oracle、SqlServer） —&gt; ACID</p>
</li>
<li><p>NoSQL（Redis、MongDB）—&gt; CAP</p>
</li>
</ul>
<hr>
<p><strong>ACID</strong></p>
<ul>
<li><p>A（Atomicity）原子性</p>
</li>
<li><p>C（Consistency） 一致性</p>
</li>
<li><p>I （Isolation）隔离性</p>
</li>
<li><p>D（Durability）持久性</p>
</li>
</ul>
<hr>
<p><strong>CAP</strong></p>
<ul>
<li><p>C（Consistency）强一致性</p>
</li>
<li><p>A（Availability）可用性</p>
</li>
<li><p>P（Partition tolerance）分区容错性</p>
</li>
</ul>
<p><strong>CAP 理论的核心</strong></p>
<ul>
<li><p>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</p>
</li>
<li><p>根据CAP原理，将 NoSQL 数据库分成了满足 CA 原则，满足 CP 原则和满足 AP 原则三大类： </p>
<ul>
<li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li>
<li>CP：满足一致性，分区容错性的系统，通常性能不是特别高</li>
<li>AP：满足可用性，分区容错性的系统，通常可能对一致性要求低一些</li>
</ul>
</li>
</ul>
<hr>
<p><strong>Zookeeper 保证的是 CP</strong></p>
<p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接 down 掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是 Zookeeper 会出现这样一 情况，当 master 节点因为网络故障与其他节点失去联系时，剩余节点会重新进行 leader 选举。问题在于，选举 leader 的时间太长，30~120s，且选举期间整个集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得集群失去 master 节点是较大概率会发生的事件， 虽然服务最终能够恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p>
<p><strong>Eureka 保证的是 AP</strong></p>
<p>Eureka 看明白了这一点，因此在设计时就优先保证可用性。Eureka 各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个 Eureka 注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台 Eureka 还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eurek a还有一种自我保护机制，如果在 15 分钟内超过 85% 的节点都没有正常的心跳，那么 Eureka 就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p>
<ol>
<li><p>Eureka 不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</p>
</li>
<li><p>Eureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节点依然可用）</p>
</li>
<li><p>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</p>
</li>
</ol>
<hr>
<p><strong>结论</strong></p>
<p>==Eureka 可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像 zookeeper 那样使整个注册服务瘫痪==</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
        <tag>CAP 原则</tag>
        <tag>Discovery</tag>
      </tags>
  </entry>
  <entry>
    <title>05_Ribbon 负载均衡</title>
    <url>/posts/d16c64a.html</url>
    <content><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><strong>Ribbon 是什么</strong></p>
<p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</p>
<p>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 NetFlix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项如：连接超时、重试等等。简单地说，就是在配置文件中列出 LoadBalancer（简称 LB：负载均衡）后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等等）去连接这些机器。我们也很容易使用 Ribbon 实现自定义的负载均衡算法。</p>
<hr>
<p><strong>Ribbon 能做什么</strong></p>
<p>LB，即负载均衡（Load Balance），在微服务或分布式集群中经常用的一种应用。 </p>
<p>负载均衡简单地说就是将用户的请求平摊的分配到多个服务上，从而达到系统的 HA（高可用）。 常见的负载均衡软件有 Nginx，Lvs 等等。Dubbo、Spring Cloud 中均提供了负载均衡，Spring Cloud 的负载均衡算法可以自定义负载均衡简单分类： </p>
<ul>
<li><p>集中式 LB</p>
<ul>
<li>即在服务的消费方和提供方之间使用独立的 LB 设施</li>
<li>如之前学习的 Nginx，由该设施负责把访问请求通过某种策略转发至服务的提供方</li>
</ul>
</li>
<li><p>进程式 LB </p>
<ul>
<li>将 LB 逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。 </li>
<li><strong>Ribbon 就属于进程内 LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</li>
</ul>
</li>
</ul>
<blockquote>
<p>Github 地址 ： <a href="https://github.com/NetFlix/ribbon">https://github.com/NetFlix/ribbon</a></p>
</blockquote>
<a id="more"></a>

<h3 id="2-初步配置"><a href="#2-初步配置" class="headerlink" title="2. 初步配置"></a>2. 初步配置</h3><p><strong>先说结论</strong></p>
<p>==Ribbon 和Eureka 整合后 Consumer 可以直接调用服务而不用再关心地址和端口号==</p>
<hr>
<p><strong>步骤</strong></p>
<ol>
<li><p>复制<code>spring-cloud-consumer-dept-80</code>改为<code>spring-cloud-consumer-dept-ribbon-80</code></p>
</li>
<li><p>修改主启动类名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerRibbon_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumerRibbon_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ribbon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 application.yml，添加 Eureka 的服务注册地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">    <span class="comment"># 不向eureka注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类中添加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>在 ConfigBean 中添加注解<code>@LoadBalanced</code>，使其在获取 Rest 时加入 Ribbon 的配置</p>
</li>
<li><p>修改 Controller中的地址。原来是固定的，现在有了 Ribbon 就不能固定，所以改成微服务的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://SPRING-CLOUD-PROVIDER-DEPT-8001&quot;</span>;</span><br></pre></td></tr></table></figure>

<img src="/posts/d16c64a/image-20200826140202238.png" class>
</li>
<li><p>启动，测试</p>
</li>
</ol>
<h3 id="3-真正实现负载均衡"><a href="#3-真正实现负载均衡" class="headerlink" title="3. 真正实现负载均衡"></a>3. 真正实现负载均衡</h3><img src="/posts/d16c64a/image-20200826144922483.png" class>

<p>Ribbon 在工作时分成两步</p>
<ol>
<li>选择 EurekaServer，优先选择在同一个区域内负载均衡较少的 Server</li>
<li>根据用户指定的策略，从 Server 的服务注册列表中选择一个地址</li>
</ol>
<p>Ribbon 提供了多种策略，比如轮询（默认），随机和根据响应时间加权重等等</p>
<hr>
<ol>
<li><p>新建两个数据库，类似<code>springcloud01</code></p>
</li>
<li><p>新建两个服务提供者，类似<code>spring-cloud-provider-dept-8001</code></p>
</li>
<li><p>修改配置文件、端口号等等</p>
</li>
<li><p>保证三个服务对外暴露的实例名是一样的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-provider-dept</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-Ribbon-核心组件-IRule"><a href="#4-Ribbon-核心组件-IRule" class="headerlink" title="4. Ribbon 核心组件 IRule"></a>4. Ribbon 核心组件 IRule</h3><p><code>IRule</code>会根据特定算法从服务列表中选取一个要访问的服务</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>RoundRobinRule</code>（默认）</td>
<td>轮询</td>
</tr>
<tr>
<td><code>RandomRule</code></td>
<td>随机</td>
</tr>
<tr>
<td><code>AvailabilityFilterRule</code></td>
<td>会先过滤掉由于多次访问故障而处于断路器<strong>跳闸</strong>的服务，还有并发的连接 数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问</td>
</tr>
<tr>
<td><code>WeightedResponseTimeRule</code></td>
<td>根据平均响应时间计算所有服务的<strong>权重</strong>，响应时间越快服务权重越大，被选中的概率越高，刚启动时如果统计信息不足，则使用<code>RoundRobinRule</code>策略，等待统计信息足够，会切换到<code>WeightedResponseTimeRule</code></td>
</tr>
<tr>
<td><code>RetryRule</code></td>
<td>先按照<code>RoundRobinRule</code>的策略获取服务，如果获取服务失败，则在指定时间内会进行<strong>重试</strong>，获取可用的服务</td>
</tr>
<tr>
<td><code>BestAvailableRule</code></td>
<td>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个<strong>并发量最小</strong>的服务</td>
</tr>
<tr>
<td><code>ZoneAvoidanceRule</code></td>
<td>默认规则，复合判断 Server 所在区域的性能和 Server 的可用性选择服务器</td>
</tr>
</tbody></table>
<hr>
<p>修改策略，在 ConfigBean 中添加（消费者服务）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>自定义策略（消费者服务）</p>
<p><strong>需求</strong></p>
<p>依旧轮询策略，每个服务器要求被调用5次，就是以前每一个机器一次，现在每个机器5次</p>
<p><strong>实现</strong></p>
<ol>
<li><p>新建包 myrule，<strong>和 springcloud 包同级</strong>。新建类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HorsenRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个类，设计 HorsenRule 这个策略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horsen.myrule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.IClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Horsen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HorsenRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * total        总共被调用的次数</span></span><br><span class="line"><span class="comment">     * currentIndex 当前提供服务的机器序号</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * total=0 当total数等于5以后, 指针才能往下走</span></span><br><span class="line"><span class="comment">     * index=0 当前对外提供服务的服务器地址</span></span><br><span class="line"><span class="comment">     * 如果total等于5, 则index+1, 将total重置为0</span></span><br><span class="line"><span class="comment">     * 我们只有3台机器, 所以total&gt;3时, 将total置为0；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lb 选择的随机算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//查看线程是否中断了</span></span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 活着的服务</span></span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers();</span><br><span class="line">            <span class="comment">// 获取所有的服务</span></span><br><span class="line">            List&lt;Server&gt; allList = lb.getAllServers();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line">            <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// int index = chooseRandomInt(serverCount); // 生成区间随机数</span></span><br><span class="line">            <span class="comment">// server = upList.get(index); // 从活着的服务中, 随机取出一个</span></span><br><span class="line">            <span class="keyword">if</span> (total &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                server = upList.get(currentIndex);</span><br><span class="line">                total++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total = <span class="number">0</span>;</span><br><span class="line">                currentIndex++;</span><br><span class="line">                <span class="keyword">if</span> (currentIndex &gt;= upList.size()) &#123;</span><br><span class="line">                    currentIndex = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 从活着的服务中, 获取指定的服务执行操作</span></span><br><span class="line">                server = upList.get(currentIndex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">chooseRandomInt</span><span class="params">(<span class="keyword">int</span> serverCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类添加注解<code>@RibbonClient(name=&quot;SPRINGCLOUD-PROVIDERDEPT&quot;,configuration=MySelfRule.class)</code></p>
</li>
<li><p>启动，测试</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Ribbon</tag>
        <tag>IRule</tag>
      </tags>
  </entry>
  <entry>
    <title>06_Feign 负载均衡</title>
    <url>/posts/b61ae779.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Feign 是声明式的 Web Service 客户端，它让微服务之间的调用变得更简单了，类似 Controller 调用 Service 。</p>
<p>Spring Cloud 集成了 Ribbon 和 Eureka，可在使用 Feign 时提供负载均衡的 http 客户端。 只需要创建一个接口，然后添加注解。</p>
<p><strong>调用微服务访问两种方法</strong></p>
<ol>
<li>微服务名字 –&gt; Ribbon</li>
<li>接口和注解 –&gt; Feign</li>
</ol>
<hr>
<p><strong>Feign 能做什么</strong></p>
<ul>
<li>Feign旨在使编写 Java Http 客户端变得更容易</li>
<li>在使用 Ribbon + RestTemplate 时，利用 RestTemplate 对 Http 请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。</li>
<li>Feign 在此基础上做了进一步封装，由它来帮助我们定义和实现依赖服务接口的定义，在 Feign 的实现下，只需要创建一个接口并使用注解的方式来配置它（类似于以前 Dao 接口上标注 Mapper 注解，现在是一个微服务接口上面标注一个 Feign 注解）即可完成对服务提供方的接口绑定，简化了使用 Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li>
<li>Ribbon 维护了 spring-cloud -dept 的服务列表信息，并且通过轮询实现了客户端的负载均衡， 而与 Ribbon 不同的是，通过 Feign 只需要定义服务绑定接口且以声明式的方法，优雅而且简单地实现了服务调用。</li>
</ul>
<a id="more"></a>

<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><ol>
<li><p>参考<code>spring-cloud-consumer-dept-ribbon-80</code>新建<code>spring-cloud-consumer-dept-feign-80</code></p>
</li>
<li><p>修改主启动类，删掉自定义策略相关</p>
</li>
<li><p>修改依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>spring-cloud-api</code></p>
<ol>
<li><p>添加 Feign 的依赖</p>
</li>
<li><p>新建 service 包</p>
</li>
<li><p>新建 DeptClientService 类，编写请求，添加注解，值为服务名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;SPRING-CLOUD-PROVIDER-DEPT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>修改<code>spring-cloud-consumer-dept-feign-80</code>的 Controller，调用刚才写的 Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DeptClientService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptConsumerController</span><span class="params">(DeptClientService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类加注解，指定 Feign Client 所在包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.horsen.springcloud&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerFeign_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumerFeign_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Eureka 集群、8001、8002、8003、Feign 客户端</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>07_Hystrix 断路器</title>
    <url>/posts/cde0a133.html</url>
    <content><![CDATA[<h3 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h3><p><strong>分布式系统面临的问题</strong></p>
<p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败。</p>
<hr>
<p><strong>服务雪崩</strong></p>
<p>多个微服务之间调用的时候，假设<code>微服务A</code>调用<code>微服务B</code>和<code>微服务C</code>，<code>微服务B</code>和<code>微服务C</code>又调用<code>其他的微服务</code>，这就是所谓的“扇出”。</p>
<img src="/posts/cde0a133/1.png" class>

<p>如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对<code>微服A</code>的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的 “雪崩效应”。</p>
<img src="/posts/cde0a133/2.png" class>

<p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒中内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系 的失败，不能取消整个应用程序或系统。</p>
<img src="/posts/cde0a133/3.png" class>

<a id="more"></a>

<hr>
<p><strong>什么是 Hystrix</strong></p>
<p>Hystrix 是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，Hystrix 能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。 </p>
<p>“断路器” 本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个服务预期的，可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用，从而避 免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<h3 id="2-服务熔断"><a href="#2-服务熔断" class="headerlink" title="2. 服务熔断"></a>2. 服务熔断</h3><p>熔断机制是对应雪崩效应的一种微服务链路保护机制。</p>
<p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回 错误的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在 Spring Cloud 框架里熔断机制通过 Hystrix 实现。Hystrix 会监控微服务间调用的状况，当失败的调用到一定阈值（默认是5秒内20次调用失败）就会启动熔断机制。</p>
<p>熔断机制的注解是<code>@HystrixCommand</code></p>
<ol>
<li><p>参考<code>spring-cloud-provider-dept-8001</code>新建<code>spring-cloud-provider-dept-hystrix-8001</code></p>
</li>
<li><p>修改依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 yml，修改 Eureka 的实例 id（服务名称）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 修改服务名称</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">spring-cloud-provider-dept-hysrtix-8001</span></span><br><span class="line">    <span class="comment"># 开启访问路径显示ip地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DeptService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeptController</span><span class="params">(DeptService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一旦调用服务方法失败并抛出了错误信息后</span></span><br><span class="line"><span class="comment">     * 会自动调用HystrixCommand标注好的fallbackMethod调用类中指定方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;hystrixGet&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Dept dept = service.queryById(id);</span><br><span class="line">        <span class="keyword">if</span> (dept == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot;不存在, 或信息异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备选方案</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">hystrixGet</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptno(id)</span><br><span class="line">                .setDname(<span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot;没有查询结果@Hystrix&quot;</span>)</span><br><span class="line">                .setDb_source(<span class="string">&quot;没有相关数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主启动类名称</p>
</li>
<li><p>主启动类添加注解<code>@EnableCircuitBreaker</code></p>
</li>
<li><p>启动集群，启动主启动类，测试</p>
</li>
</ol>
<h3 id="3-服务降级"><a href="#3-服务降级" class="headerlink" title="3. 服务降级"></a>3. 服务降级</h3><p>当整体资源快不够时，将某些服务先关掉，待渡过难关，再开启回来。</p>
<p><strong>服务降级处理是在客户端实现完成的，与服务端没有关系</strong></p>
<ol>
<li><p>修改<code>spring-cloud-api</code>，根据已经有的 DeptClientService 接口新建一个实现了 FallbackFactory 接口的类<code>DeptClientServiceFallbackFactory</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptClientServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">DeptClientService</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptClientService <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptClientService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dept()</span><br><span class="line">                        .setDeptno(id)</span><br><span class="line">                        .setDname(<span class="string">&quot;id: &quot;</span> + id + <span class="string">&quot;没有对应的信息, Consumer客户端提供的降级信息, 此刻服务Provider已经关闭&quot;</span>)</span><br><span class="line">                        .setDb_source(<span class="string">&quot;没有相关数据库&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 DeptClientService 接口的注解<code>@FeignClient</code>中添加 fallbackFactory 属性值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name=&quot;spring-cloud-provider-dept&quot;,fallbackFactory = DeptClientServiceFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>spring-cloud-consumer-dept-feign-80</code>的 yml，开启 hystrix</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-服务熔断对比服务降级"><a href="#4-服务熔断对比服务降级" class="headerlink" title="4. 服务熔断对比服务降级"></a>4. 服务熔断对比服务降级</h3><p><strong>服务熔断：</strong></p>
<p>一般是某个服务故障或者异常引起，类似现实世界中的 “保险丝” ， 当某个异常条件被触发， 直接熔断整个服务，而不是一直等到此服务超时。</p>
<p><strong>服务降级：</strong></p>
<p>所谓降级，一般是从整体负荷考虑，就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的 fallback 回调，返回一个缺省值。这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强。</p>
<h3 id="5-服务监控-Hystrix-Dashboard"><a href="#5-服务监控-Hystrix-Dashboard" class="headerlink" title="5. 服务监控 Hystrix Dashboard"></a>5. 服务监控 Hystrix Dashboard</h3><p>除了隔离依赖服务的调用以外，Hystrix 还提供了准实时的调用监控（Hystrix Dashboard）。</p>
<p>Hystrix 会持续地记录所有通过 Hystrix 发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求，多少成功，多少失败等等。</p>
<p>Netflix 通过 hystrix-metrics-event-stream 项目实现了对以上指标的监控，Spring Cloud 也提供了 Hystrix Dashboard 的整合，对监控内容转化成可视化界面。</p>
<ol>
<li><p>新建工程<code>spring-cloud-consumer-hystrix-dashboard-9001</code></p>
</li>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Hystrix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dashboard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.horsen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 热部署工具 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置端口号</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写主启动类，添加注解<code>@EnableHystrixDashboard</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerDashBoard_9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumerDashBoard_9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>spring-cloud-provider-dept-hystrix-8001</code>的自动类中添加一个 bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">hystrixMetricsStreamServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletRegistrationBean registration = <span class="keyword">new</span></span><br><span class="line">        ServletRegistrationBean(<span class="keyword">new</span> HystrixMetricsStreamServlet());</span><br><span class="line">    registration.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><strong>测试</strong></p>
<ol>
<li>启动 7001（7002、7003）</li>
<li>启动 8001（必须有熔断）</li>
<li>访问<a href="http://localhost:8001/dept/get/1%E5%92%8Chttp://localhost:8001/actuator/hystrix.stream">http://localhost:8001/dept/get/1和http://localhost:8001/actuator/hystrix.stream</a></li>
<li>访问<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></li>
<li>输入<a href="http://localhost:8001/actuator/hystrix.stream">http://localhost:8001/actuator/hystrix.stream</a></li>
</ol>
<p><strong>监控结果</strong></p>
<ul>
<li><p>七色</p>
<p>对应其中状态的数量</p>
<img src="/posts/cde0a133/image-20200827235223799.png" class>
</li>
<li><p>一圆</p>
<p>通过实心圆颜色的变化代表了实例的健康程度，从绿色&gt;黄色&gt;橙色&gt;红色 递减。</p>
<p>大小也会根据实例的请求流量发生变化，流量越大，实心圆越大。</p>
<p>通过该实心圆的展示，就可以在大量的实例中快速发现<strong>故障实例和高压力实例</strong>。</p>
</li>
<li><p>一线 </p>
<p>用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。</p>
</li>
</ul>
<img src="/posts/cde0a133/image-20200827235316890.png" class>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Hystrix</tag>
        <tag>Dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>08_Zuul 路由</title>
    <url>/posts/595a495b.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Zuul 包含了对请求的<strong>路由</strong>和<strong>过滤</strong>两个最主要的功能：</p>
<ul>
<li>其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础。</li>
<li>而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。</li>
</ul>
<p>Zuul 和 Eureka 进行整合，将 Zuul 自身注册为 Eureka 服务治理下的应用，同时从 Eureka 中获得其他微服务的消息，也即以后的访问微服务都是通过 Zuul 跳转后获得。<strong>Zuul 服务最终还是会注册进 Eureka。</strong></p>
<blockquote>
<p>官方文档：<a href="https://github.com/Netflix/zuul">https://github.com/Netflix/zuul</a></p>
</blockquote>
<a id="more"></a>

<h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h3><ol>
<li><p>新建模块<code>spring-cloud-zuul-gateway-9527</code></p>
</li>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zuul --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-cloud-zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">zuul9527.com</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">horsen-spring-cloud</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">www.horsenliu.com</span></span><br><span class="line">  <span class="attr">build.artifactId:</span> <span class="string">$&#123;project.artifactId&#125;</span></span><br><span class="line">  <span class="attr">build.version:</span> <span class="string">$&#123;project.version&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写主启动类，添加注解<code>@EnableZuulProxy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动集群，启动 8001，启动 zuul</p>
</li>
<li><p>不用路由：<a href="http://localhost:8001/dept/get/2">http://localhost:8001/dept/get/2</a> </p>
<p>使用路由：<a href="http://www.horsenliu.com:9527/spring-cloud-provider-dept/dept/get/2">http://www.horsenliu.com:9527/spring-cloud-provider-dept/dept/get/2</a></p>
</li>
</ol>
<h3 id="2-路由访问映射规则"><a href="#2-路由访问映射规则" class="headerlink" title="2. 路由访问映射规则"></a>2. 路由访问映射规则</h3><p>设置一个代理，不用输入真实的微服务的名称也能访问</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">mydept.serverId:</span> <span class="string">spring-cloud-provider-dept</span></span><br><span class="line">    <span class="attr">mydept.path:</span> <span class="string">/mydept/**</span></span><br></pre></td></tr></table></figure>

<hr>
<p>忽略原真实服务名</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment"># 通配符* 隐藏全部</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">mydept.serverId:</span> <span class="string">spring-cloud-provider-dept</span></span><br><span class="line">    <span class="attr">mydept.path:</span> <span class="string">/mydept/**</span></span><br></pre></td></tr></table></figure>

<hr>
<p>设置统一公共前缀</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment"># 前缀</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/horsen</span></span><br><span class="line">  <span class="comment"># 通配符* 隐藏全部</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">mydept.serverId:</span> <span class="string">spring-cloud-provider-dept</span></span><br><span class="line">    <span class="attr">mydept.path:</span> <span class="string">/mydept/**</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>01_回顾 MVC</title>
    <url>/posts/ff0d889e.html</url>
    <content><![CDATA[<h3 id="1-什么是-MVC"><a href="#1-什么是-MVC" class="headerlink" title="1. 什么是 MVC"></a>1. 什么是 MVC</h3><ul>
<li>MVC是模型（Model）、视图（View）、控制器(Controller)的简写，是一种软件设计规范。</li>
<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>
<li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li>
<li>MVC不是一种设计模式，<strong>MVC 是一种架构模式</strong>。当然不同的MVC存在差异。</li>
</ul>
<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或 JavaBean 组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p>
<img src="/posts/ff0d889e/mvc.jpg" class>

<a id="more"></a>

<h3 id="2-Model1-时代"><a href="#2-Model1-时代" class="headerlink" title="2. Model1 时代"></a>2. Model1 时代</h3><ul>
<li>在 web 早期的开发中，通常采用的都是 Model1</li>
<li>Model1 中，主要分为两层，视图层和模型层</li>
</ul>
<img src="/posts/ff0d889e/image-20200804114856394.png" class>

<ul>
<li><p>Model1优点：架构简单，比较适合小型项目开发</p>
</li>
<li><p>Model1缺点：JSP职责不单一，职责过重，不便于维护</p>
</li>
</ul>
<h3 id="3-Model2-时代"><a href="#3-Model2-时代" class="headerlink" title="3. Model2 时代"></a>3. Model2 时代</h3><p>Model2 把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p>
<img src="/posts/ff0d889e/image-20200804115306901.png" class>

<ol>
<li>用户发请求</li>
<li>Servlet 接收请求数据，并调用对应的业务逻辑方法</li>
<li>业务处理完毕，返回更新后的数据给 Servlet</li>
<li>Servlet 转向到 JSP，由 JSP 来渲染页面</li>
<li>响应给前端更新后的页面</li>
</ol>
<hr>
<p><strong>职责分析：</strong></p>
<p><strong>Controller：控制器</strong></p>
<ul>
<li><p>取得表单数据</p>
</li>
<li><p>调用业务逻辑</p>
</li>
<li><p>转向指定的页面</p>
</li>
</ul>
<p><strong>Model：模型</strong></p>
<ul>
<li><p>业务逻辑</p>
</li>
<li><p>保存数据的状态</p>
</li>
</ul>
<p><strong>View：视图</strong></p>
<ul>
<li>显示页面</li>
</ul>
<p>Model2 这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model1 模式的实现比较简单，适用于快速开发小规模项目，Model1 中 JSP 页面身兼 View 和Controller 两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2 消除了 Model1 的缺点。</p>
<h3 id="4-回顾-Servlet"><a href="#4-回顾-Servlet" class="headerlink" title="4. 回顾 Servlet"></a>4. 回顾 Servlet</h3><ol>
<li><p>建立一个普通 Maven 项目作为父工程，pom.xml 中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建立一个普通 Moudle， 然后添加 Web app 的支持</p>
<img src="/posts/ff0d889e/image-20200804121132756.png" class>

<img src="/posts/ff0d889e/image-20200804121040538.png" class>
</li>
<li><p>导入Servlet 和 jsp 的依赖（可以不导入）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写一个 Servlet 类，用来处理用户的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取前端参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 调用业务层</span></span><br><span class="line">        <span class="comment">// 无</span></span><br><span class="line">        <span class="comment">// 3. 试图转发或者重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><code>*.jsp</code>的位置：如果页面是公共的，放在 web 目录下；如果保证安全，用户不可见，放在 WEB-INF 目录下</p>
</li>
<li><p>在 WEB-INF 目录下新建一个 jsp 的文件夹，新建 hello.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 web.xml 中注册 Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.horsen.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Tomcat，启动测试，地址栏输入</p>
<ul>
<li>localhost:8080/user?method=add</li>
<li>localhost:8080/user?method=delete</li>
</ul>
</li>
</ol>
<hr>
<p><strong>MVC框架要做哪些事情</strong></p>
<ol>
<li>将 url 映射到 java 类或 java 类的方法</li>
<li>封装用户提交的数据</li>
<li>处理请求 –&gt; 调用相关的业务处理 –&gt; 封装响应数据</li>
<li>将响应的数据进行渲染 . jsp / html 等表示层数据</li>
</ol>
<p><strong>说明：</strong></p>
<ul>
<li><p>常见的服务器端 MVC 框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；</p>
</li>
<li><p>常见前端MVC框架：vue、angularjs、react、backbone；由 MVC 演化出了另外一些模式如：MVP、MVVM 等等。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>02_Spring MVC 概述</title>
    <url>/posts/c7715426.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><blockquote>
<p>官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
</blockquote>
<p><strong>Spring MVC 的优点：</strong></p>
<ol>
<li>轻量级，简单易学</li>
<li>高效，基于请求响应的MVC框架</li>
<li>与 Spring 兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<a id="more"></a>

<h3 id="2-中心控制器"><a href="#2-中心控制器" class="headerlink" title="2. 中心控制器"></a>2. 中心控制器</h3><p>Spring 的 web 框架围绕<code>DispatcherServlet</code>设计。<code>DispatcherServlet</code>的作用是将请求分发到不同的处理器。从 Spring 2.5 开始，使用 Java 5 或者以上版本的用户可以采用基于注解的 controller 声明方式。</p>
<p>Spring MVC 框架像许多其他 MVC 框架一样, <strong>以请求为驱动，围绕一个中心 Servlet 分派请求及提供其他功能，DispatcherServlet 是一个实际的 Servlet（它继承自 HttpServlet 基类）。</strong></p>
<hr>
<p>当发起请求时被前置的控制器拦截到请求（即 DispatcherServlet），根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<img src="/posts/c7715426/SpringMVC%E5%8E%9F%E7%90%86.jpg" class>

<h3 id="3-Spring-MVC-执行原理"><a href="#3-Spring-MVC-执行原理" class="headerlink" title="3. Spring MVC 执行原理"></a>3. Spring MVC 执行原理</h3><p>图为 Spring MVC 的一个较完整的流程图，实线表示 Spring MVC 框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<img src="/posts/c7715426/spring_mvc.png" class>

<p><strong>简要分析执行流程</strong></p>
<ol>
<li><p>DispatcherServlet 表示前置控制器，是整个 Spring MVC 的控制中心。用户发出请求，DispatcherServlet 接收请求并拦截请求。</p>
<p>假设请求的url为 : <code>http://localhost:8080/SpringMVC/hello</code></p>
<p>该 url 可以拆分成三部分：</p>
<ul>
<li><p><code>http://localhost:8080</code>表示服务器域名</p>
</li>
<li><p><code>/SpringMVC</code>表示部署在服务器上的 web 站点</p>
</li>
<li><p><code>/hello</code>表示控制器</p>
</li>
</ul>
<p>通过分析，如上 url 表示为：==请求位于服务器 localhost:8080 上的 SpringMVC 站点的 hello 控制器。==</p>
</li>
<li><p>HandlerMapping 为处理器映射。DispatcherServlet 调用 HandlerMapping，HandlerMapping 根据请求 url 查找 Handler。</p>
</li>
<li><p>HandlerExecution 表示具体的 Handler，其主要作用是根据 url 查找控制器。</p>
</li>
<li><p>HandlerExecution 将解析后的信息传递给 DispatcherServlet，如解析控制器映射等。</p>
</li>
<li><p>HandlerAdapter 表示处理器适配器，其按照特定的规则去执行 Handler。</p>
</li>
<li><p>Handler 让具体的 Controller 执行。</p>
</li>
<li><p>Controller 将具体的执行信息返回给 HandlerAdapter，如 ModelAndView。</p>
</li>
<li><p>HandlerAdapter 将视图逻辑名或模型传递给 DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet 调用视图解析器（ViewResolver）来解析 HandlerAdapter 传递的逻辑视图名。</p>
</li>
<li><p>视图解析器将解析的逻辑视图名传给 DispatcherServlet。</p>
</li>
<li><p>DispatcherServlet 根据视图解析器解析的视图结果，调用具体的视图。</p>
</li>
<li><p>最终视图呈现给用户。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>03_第一个 Spring MVC 程序</title>
    <url>/posts/92675826.html</url>
    <content><![CDATA[<h3 id="1-废话少说"><a href="#1-废话少说" class="headerlink" title="1. 废话少说"></a>1. 废话少说</h3><ol>
<li><p>新建一个普通的 Maven 项目（如果作为父工程，就把 src 目录删掉，再添加模块）</p>
</li>
<li><p>右键项目，添加 Web 框架支持</p>
</li>
<li><p>导入相关依赖（注意资源导出问题）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>确保项目结构中 Artifacts 中有这些依赖（如果没有就新建 lib 目录，添加 Library Files）</p>
<img src="/posts/92675826/image-20200805232928692.png" class>
</li>
<li><p>在 web.xml 中配置<code>DispatcherServlet</code>，它也是一个 Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置DispatcherServlet(请求分发器, 前端控制器), 这个是SpringMVC的核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 在SpringMVC中</span></span><br><span class="line"><span class="comment"> /  只匹配所有的请求, 不会匹配jsp页面</span></span><br><span class="line"><span class="comment"> /* 匹配所有的请求, 包括jsp页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Spring MVC 的配置文件 springmvc-servlet.xml，添加核心三要素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理器映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 web.xml 中绑定，并设置启动级别</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>...<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet需要绑定Spring的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动级别: 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写操作业务的 Controller，实现<code>Controller</code>接口，返回一个<code>ModelAndView</code>，装数据，封视图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">        String result = <span class="string">&quot;HelloSpringMVC&quot;</span>;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>, result);</span><br><span class="line">        <span class="comment">// 视图跳转</span></span><br><span class="line">        <span class="comment">// hello指的是hello.jsp</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 springmvc-servlet.xml 中注册这个 bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> BeanNameUrlHandlerMapping需要bean</span></span><br><span class="line"><span class="comment"> 这里的/hello表示请求是hello 处理请求的是HelloController</span></span><br><span class="line"><span class="comment"> HandlerMapping根据url(localhost:8080/SpringMVC/hello)中的/hello</span></span><br><span class="line"><span class="comment"> 去匹配bean的id寻找对应的Controller</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写视图 hello.jsp，里面显示 Controller 的 ModelAndView 中刚刚添加的值</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问<code>localhost:8080/hello</code>请求，测试结果</p>
</li>
</ol>
<hr>
<p>这个流程只是帮助理解上一篇博客中的 Spring 执行原理，在实际开发中不会这么写，而是用注解来实现，更加简单。</p>
<h3 id="2-通过注解实现"><a href="#2-通过注解实现" class="headerlink" title="2. 通过注解实现"></a>2. 通过注解实现</h3><ol>
<li><p>新建一个 web 项目</p>
</li>
<li><p>导入相关 jar 包</p>
</li>
<li><p>编写 web.xml，注册<code>DispatherServlet</code></p>
</li>
<li><p>编写 Spring MVC 的配置文件 springmvc-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包, 让指定包下的注解生效, 由IoC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.horsen.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让SpringMVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 表示请求是hello, 真是访问地址是localhost:8080/项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 封装数据, 向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC_withAnnotation&quot;</span>);</span><br><span class="line">        <span class="comment">// 这个返回值会被视图解析器处理, 解析结果是WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写视图</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h3><p>实现步骤其实非常的简单：</p>
<ol>
<li>新建一个 web 项目</li>
<li>导入相关 jar 包（注意资源导出问题）</li>
<li>编写 web.xml，注册 DispatcherServlet</li>
<li>编写 Spring MVC 配置文件</li>
<li>创建对应的 Controller 控制类</li>
<li>最后完善前端视图和 Controller 之间的对应</li>
<li>测试运行调试</li>
</ol>
<hr>
<p>使用 Spring MVC 必须配置的三大件：</p>
<p><strong>处理器映射器、处理器适配器、视图解析器</strong></p>
<p>通常，只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的 xml 配置。</p>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>04_Controller 和 RESTful 风格</title>
    <url>/posts/10418adb.html</url>
    <content><![CDATA[<h3 id="1-控制器-Controller"><a href="#1-控制器-Controller" class="headerlink" title="1. 控制器 Controller"></a>1. 控制器 Controller</h3><ul>
<li>控制器负责提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li>
<li>控制器负责解析用户的请求并将其转换为一个模型。</li>
<li>在 Spring MVC 中一个控制器类可以包含多个方法。</li>
<li>在 Spring MVC 中，对于 Controller 的配置方式有很多种。</li>
</ul>
<h3 id="2-实现-Controller-接口"><a href="#2-实现-Controller-接口" class="headerlink" title="2. 实现 Controller 接口"></a>2. 实现 Controller 接口</h3><p><em>详见上一篇博客</em></p>
<p>而且太老了，不用了。</p>
<h3 id="3-使用注解-Controller"><a href="#3-使用注解-Controller" class="headerlink" title="3. 使用注解@Controller"></a>3. 使用注解<code>@Controller</code></h3><p><em>详见上一篇博客</em></p>
<a id="more"></a>

<h3 id="4-RESTful-风格"><a href="#4-RESTful-风格" class="headerlink" title="4. RESTful 风格"></a>4. RESTful 风格</h3><h4 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h4><p>RESTful 就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<h4 id="4-2-功能"><a href="#4-2-功能" class="headerlink" title="4.2 功能"></a>4.2 功能</h4><p>资源：互联网所有的事物都可以被抽象为资源</p>
<p>资源操作：使用 POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p>
<p>分别对应添加、 删除、修改、查询。</p>
<h4 id="4-3-传统方式操作资源"><a href="#4-3-传统方式操作资源" class="headerlink" title="4.3 传统方式操作资源"></a>4.3 传统方式操作资源</h4><p> 通过不同的参数（post 和 get）来实现不同的效果，方法单一</p>
<ul>
<li><p><a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询 GET</p>
</li>
<li><p><a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增 POST</p>
</li>
<li><p><a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新 POST</p>
</li>
<li><p><a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除 GET或POST</p>
</li>
</ul>
<h4 id="4-4-使用RESTful操作资源"><a href="#4-4-使用RESTful操作资源" class="headerlink" title="4.4 使用RESTful操作资源"></a>4.4 使用RESTful操作资源</h4><p>可以通过不同的请求方式来实现不同的效果</p>
<p>如下：请求地址一样，但是功能可以不同</p>
<ul>
<li><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询 GET</p>
</li>
<li><p><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增 POST</p>
</li>
<li><p><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新 PUT</p>
</li>
<li><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除 DELETE</p>
</li>
</ul>
<h4 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h4><ol>
<li><p>传统方式操作资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/result&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果为: &quot;</span> + res);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>地址栏中 url 是这样的：<code>http://localhost:8080/result?a=1&amp;b=2</code></p>
</li>
<li><p>使用RESTful操作资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/rest/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restfulTest</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果为: &quot;</span> + res);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>地址栏中 url 是这样的：<code>http://localhost:8080/rest/1/2</code></p>
</li>
<li><p>使用 method 属性指定请求类型（<strong>默认为 GET</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/rest/&#123;a&#125;/&#123;b&#125;&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restfulTest</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果为: &quot;</span> + res);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者使用组合注解</p>
<ul>
<li><code>@GetMapping</code></li>
<li><code>@PostMapping</code></li>
<li><code>@PutMapping</code></li>
<li><code>@DeleteMapping</code></li>
<li><code>@PatchMapping</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/rest/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">restfulTest</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = a + b;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果为: &quot;</span> + res);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>RESTful</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>05_结果跳转方式</title>
    <url>/posts/a76a436a.html</url>
    <content><![CDATA[<h3 id="1-ModelAndView"><a href="#1-ModelAndView" class="headerlink" title="1. ModelAndView"></a>1. ModelAndView</h3><p>前面说了很多次了</p>
<h3 id="2-Servlet-API"><a href="#2-Servlet-API" class="headerlink" title="2. Servlet API"></a>2. Servlet API</h3><p>通过设置 Servlet API，不需要视图解析器</p>
<ol>
<li><p>通过 HttpServletResponse 进行输出</p>
</li>
<li><p>通过 HttpServletResponse 实现重定向</p>
</li>
<li><p>通过 HttpServletResponse 实现转发</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3-Spring-MVC"><a href="#3-Spring-MVC" class="headerlink" title="3. Spring  MVC"></a>3. Spring  MVC</h3><ol>
<li><p>通过 Spring MVC 来实现转发和重定向，<strong>无需视图解析器</strong></p>
<p>测试前，需要将视图解析器注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 Spring MVC 来实现转发和重定向，<strong>有视图解析器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>06_数据处理</title>
    <url>/posts/920072f.html</url>
    <content><![CDATA[<h3 id="1-处理提交数据"><a href="#1-处理提交数据" class="headerlink" title="1. 处理提交数据"></a>1. 处理提交数据</h3><h4 id="1-1-提交的域名称和处理方法的参数名一致"><a href="#1-1-提交的域名称和处理方法的参数名一致" class="headerlink" title="1.1 提交的域名称和处理方法的参数名一致"></a>1.1 提交的域名称和处理方法的参数名一致</h4><p>提交数据 : <a href="http://localhost:8080/hello?name=horsen">http://localhost:8080/hello?name=horsen</a></p>
<p>处理方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-提交的域名称和处理方法的参数名不一致"><a href="#1-2-提交的域名称和处理方法的参数名不一致" class="headerlink" title="1.2 提交的域名称和处理方法的参数名不一致"></a>1.2 提交的域名称和处理方法的参数名不一致</h4><p>提交数据 : <a href="http://localhost:8080/hello?username=horsen">http://localhost:8080/hello?username=horsen</a></p>
<p>处理方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="1-3-提交的是一个对象"><a href="#1-3-提交的是一个对象" class="headerlink" title="1.3 提交的是一个对象"></a>1.3 提交的是一个对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提交数据：<a href="http://localhost:8080/user/t2?name=horsen&amp;id=1&amp;age=12">http://localhost:8080/user/t2?name=horsen&amp;id=1&amp;age=12</a></p>
<p>处理方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(User user, Model model)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-数据显示到前端"><a href="#2-数据显示到前端" class="headerlink" title="2. 数据显示到前端"></a>2. 数据显示到前端</h3><h4 id="2-1-通过-ModelAndView"><a href="#2-1-通过-ModelAndView" class="headerlink" title="2.1 通过 ModelAndView"></a>2.1 通过 ModelAndView</h4><p>前面都是这样的，不说了</p>
<h4 id="2-2-通过-ModelMap"><a href="#2-2-通过-ModelMap" class="headerlink" title="2.2 通过 ModelMap"></a>2.2 通过 ModelMap</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name, ModelMap modelMap)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">// 相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-通过-Model"><a href="#2-3-通过-Model" class="headerlink" title="2.3 通过 Model"></a>2.3 通过 Model</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name, Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 封装要显示到视图中的数据</span></span><br><span class="line">    <span class="comment">// 相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><ul>
<li><p>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于 Model 对象的操作和理解；</p>
</li>
<li><p>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</p>
</li>
<li><p>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>07_乱码问题的解决</title>
    <url>/posts/a21859c6.html</url>
    <content><![CDATA[<ol>
<li><p>在 tomcat 的配置文件 conf/server.xml 中设置编码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 web.xml 中添加 Spring MVC 提供的过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>如果不能解决问题，就自定义一个过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//处理response的字符编码</span></span><br><span class="line">        HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">        myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        <span class="comment">// 对request包装增强</span></span><br><span class="line">        HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">        chain.doFilter(myrequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="comment">//是否编码的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line">    <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先获得请求方式</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// post请求</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 处理post乱码</span></span><br><span class="line">                request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// get请求</span></span><br><span class="line">            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">                <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                    String[] values = parameterMap.get(parameterName);</span><br><span class="line">                    <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">// 处理get乱码</span></span><br><span class="line">                                values[i] = <span class="keyword">new</span> String(values[i]</span><br><span class="line">                                        .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hasEncode = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parameterMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取一个值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        String[] values = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取所有值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">        String[] values = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.horsen.filter.GenericEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>Spring MVC</tag>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>08_JSON 交互处理</title>
    <url>/posts/f4901ef0.html</url>
    <content><![CDATA[<h3 id="1-什么是-JSON"><a href="#1-什么是-JSON" class="headerlink" title="1. 什么是 JSON"></a>1. 什么是 JSON</h3><ul>
<li>JSON（JavaScript Object Notation，JS 对象标记）是一种轻量级的数据交换格式，目前使用特别广泛。</li>
<li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li>
<li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
<hr>
<p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p>
<ul>
<li>对象表示为键值对，数据由逗号分隔</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lhx&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;age&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p>
<blockquote>
<p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是一个对象, 注意键名也是可以使用引号包裹的</span></span><br><span class="line">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; </span><br><span class="line"><span class="comment">// 这是一个JSON字符串, 本质是一个字符串</span></span><br><span class="line">var json = &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;; </span><br></pre></td></tr></table></figure>

<hr>
<p><strong>JSON 和 JavaScript 对象互转</strong></p>
<p>要实现从 JSON 字符串转换为 JavaScript 对象，使用 JSON.parse() 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = JSON.parse(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>要实现从 JavaScript 对象转换为 JSON 字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = JSON.stringify(&#123;a: <span class="string">&#x27;Hello&#x27;</span>, b: <span class="string">&#x27;World&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-什么是-Fastjson"><a href="#2-什么是-Fastjson" class="headerlink" title="2. 什么是 Fastjson"></a>2. 什么是 Fastjson</h3><blockquote>
<p><a href="https://www.runoob.com/w3cnote/fastjson-intro.html">https://www.runoob.com/w3cnote/fastjson-intro.html</a></p>
</blockquote>
<ol>
<li><p>将 Java 对象转换为 JSON 格式</p>
<p> <code>String jsonStr= JSON.toJSONString(javaObject);</code></p>
</li>
<li><p>JSON 字符串转换为 Java 对象</p>
<p><code>Object javaObject= JSON.parseObject(jsonStr, Object.class);</code></p>
</li>
</ol>
<h3 id="3-Controller-返回-JSON-数据"><a href="#3-Controller-返回-JSON-数据" class="headerlink" title="3. Controller 返回 JSON 数据"></a>3. Controller 返回 JSON 数据</h3><ol>
<li><p>编写一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入 Fastjson 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller，注意<code>@ResponseBody</code>的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 加了这个注释就不会走视图解析器, 直接返回一个字符串</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;lhx&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">// 将 Java 对象转换为 JSON 格式</span></span><br><span class="line">        String str = JSON.toJSONString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决中文乱码问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/j1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-代码优化"><a href="#4-代码优化" class="headerlink" title="4. 代码优化"></a>4. 代码优化</h3><h4 id="4-1-乱码问题统一解决"><a href="#4-1-乱码问题统一解决" class="headerlink" title="4.1 乱码问题统一解决"></a>4.1 乱码问题统一解决</h4><blockquote>
<p>为什么总是产生乱码？为什么导出都有乱码？为什么有这么多解决乱码的方式？Servlet 中的 request 和 response，Spring 过滤器，JSON……</p>
<p>就没有统一的解决方法吗？</p>
</blockquote>
<p>在 Spring MVC 配置文件中加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-返回-json-字符串统一解决"><a href="#4-2-返回-json-字符串统一解决" class="headerlink" title="4.2 返回 json 字符串统一解决"></a>4.2 返回 json 字符串统一解决</h4><p>在类上直接使用 <code>@RestController</code> ，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加<code>@ResponseBody </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;lhx&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">// 将 Java 对象转换为 JSON 格式</span></span><br><span class="line">        String str = JSON.toJSONString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-测试集合输出"><a href="#5-测试集合输出" class="headerlink" title="5. 测试集合输出"></a>5. 测试集合输出</h3><p>会用<code>[]</code>将列表项包围起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    User user1 = <span class="keyword">new</span> User(<span class="string">&quot;lhx1&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    User user2 = <span class="keyword">new</span> User(<span class="string">&quot;lhx2&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    User user3 = <span class="keyword">new</span> User(<span class="string">&quot;lhx3&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    userList.add(user1);</span><br><span class="line">    userList.add(user2);</span><br><span class="line">    userList.add(user3);</span><br><span class="line">    <span class="comment">// 将 Java 对象转换为 JSON 格式</span></span><br><span class="line">    String str = JSON.toJSONString(userList);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-输出时间对象"><a href="#6-输出时间对象" class="headerlink" title="6. 输出时间对象"></a>6. 输出时间对象</h3><p>默认格式为 Timestamp 时间戳</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    String str = JSON.toJSONString(date);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置时间格式（Java基础知识）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    String str = JSON.toJSONString(sdf.format(date));</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>09_Ajax 技术</title>
    <url>/posts/7e9d5aeb.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><ul>
<li><p>Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</p>
</li>
<li><p>是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p>
</li>
<li><p>传统的网页（即不用ajax技术的网页），想要更新内容或者提交一个表单，都需要重新加载整个网页。</p>
</li>
<li><p>使用 Ajax 技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p>
</li>
<li><p>使用 Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>
</li>
</ul>
<hr>
<p>利用 Ajax 可以：</p>
<ul>
<li>注册时，输入用户名自动检测用户是否已经存在。</li>
<li>登陆时，提示用户名密码错误。</li>
<li>删除数据行时，将行 ID 发送到后台，后台在数据库中删除，数据库删除成功后，在页面 DOM 中将数据行也删除。</li>
<li>……</li>
</ul>
<a id="more"></a>

<h3 id="2-jQuery-ajax"><a href="#2-jQuery-ajax" class="headerlink" title="2. jQuery.ajax"></a>2. jQuery.ajax</h3><ol>
<li><p>前端视图</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.5.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function">function <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="line">                data: &#123;<span class="string">&quot;name&quot;</span>: $(<span class="string">&quot;#username&quot;</span>).val()&#125;,</span><br><span class="line">                success: function (data, state) &#123;</span><br><span class="line">                    alert(data);</span><br><span class="line">                    alert(state);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 失去焦点的时候, 发起一个请求(携带信息)到后台 --%&gt;</span><br><span class="line">用户名: &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> onblur=<span class="string">&quot;a()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a1</span><span class="params">(String name, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a1:param =&gt; &quot;</span> + name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;lhx&quot;</span>.equals(name)) &#123;</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-Spring-MVC-实现"><a href="#3-Spring-MVC-实现" class="headerlink" title="3. Spring MVC 实现"></a>3. Spring MVC 实现</h3><ol>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端准备好要显示的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">a2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加数据</span></span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;lhx&quot;</span>, <span class="number">1</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;前端&quot;</span>, <span class="number">1</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> User(<span class="string">&quot;运维&quot;</span>, <span class="number">1</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>前端</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.5.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>, function (data) &#123;</span><br><span class="line">                    <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                        html+=<span class="string">&quot;&lt;tr&gt;&quot;</span></span><br><span class="line">                            +<span class="string">&quot;&lt;td&gt;&quot;</span>+data[i].name+<span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                            +<span class="string">&quot;&lt;td&gt;&quot;</span>+data[i].age+<span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                            +<span class="string">&quot;&lt;td&gt;&quot;</span>+data[i].sex +<span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                            +<span class="string">&quot;&lt;tr&gt;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#content&quot;</span>).html(html)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;加载数据&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tbody id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-注册提示效果"><a href="#4-注册提示效果" class="headerlink" title="4. 注册提示效果"></a>4. 注册提示效果</h3><img src="/posts/7e9d5aeb/image-20200810184532251.png" class>

<ol>
<li><p>前端</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.5.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function">function <span class="title">a1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">                data: &#123;<span class="string">&quot;name&quot;</span>: $(<span class="string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.toString() === <span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                        $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#userInfo&quot;</span>).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">function <span class="title">a2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">                data: &#123;<span class="string">&quot;pwd&quot;</span>: $(<span class="string">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.toString() === <span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                        $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    用户名: &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;name&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>&gt;</span><br><span class="line">    &lt;span id=&quot;userInfo&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    密码: &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;pwd&quot;</span> onblur=<span class="string">&quot;a2()&quot;</span>&gt;</span><br><span class="line">    &lt;span id=&quot;pwdInfo&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">a3</span><span class="params">(String name, String pwd)</span> </span>&#123;</span><br><span class="line">    String msg = <span class="string">&quot;不可为空&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name)) &#123;</span><br><span class="line">            msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;用户名有误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pwd != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(pwd)) &#123;</span><br><span class="line">            msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;密码有误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Spring MVC</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>10_拦截器</title>
    <url>/posts/43d05f0b.html</url>
    <content><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p>
<p>==拦截器是 AOP 思想的具体应用==</p>
<p><strong>过滤器</strong></p>
<ul>
<li>是 Servlet 规范中的一部分，任何 Java Web 工程都可以使用</li>
<li>在<code>url-pattern</code>中配置了过滤器之后，可以对所有要访问的资源进行拦截</li>
</ul>
<p><strong>拦截器</strong></p>
<ul>
<li><p>是 Spring MVC 框架自己的，只有使用了 Spring MVC 框架的工程才能使用</p>
</li>
<li><p>拦截器只会拦截访问的控制器方法， 如果访问的是 jsp/html/css/image/js 是不会进行拦截的</p>
</li>
</ul>
<a id="more"></a>

<h3 id="2-自定义拦截器"><a href="#2-自定义拦截器" class="headerlink" title="2. 自定义拦截器"></a>2. 自定义拦截器</h3><p>必须实现<code>HandlerInterceptor</code>接口</p>
<ol>
<li><p>拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在请求的方法之前执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 执行下一个拦截器(放行) false 不执行下一个拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========处理前========&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在请求的方法之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========处理后========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在DispatcherServlet处理后执行, 做清理工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========清理========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 applicationContext.xml 里注册拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截器配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            /** 表示包含路径及其子路径</span></span><br><span class="line"><span class="comment">            /admin/* 拦截的是/admin/add等等这种 /admin/add/user不会被拦截</span></span><br><span class="line"><span class="comment">            /admin/** 拦截的是/admin/下的所有</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.config.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Controller 接受请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-验证用户是否登录（认证用户）"><a href="#3-验证用户是否登录（认证用户）" class="headerlink" title="3. 验证用户是否登录（认证用户）"></a>3. 验证用户是否登录（认证用户）</h3><ol>
<li><p>编写初识页 index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/toLogin&quot;&gt;登录页面&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/toMain&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写登录页面 login.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    密码: &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写首页 main.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;&gt;退出登录&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 跳转到登陆页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到首页</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toMain&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toMain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 把用户的信息存在session中</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;userLoginInfo&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/user/toMain&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出登录</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注销session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">// 在登录页面时放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有登录信息也放行</span></span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;userLoginInfo&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 都不满足就跳到登录页面</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.config.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>11_文件上传下载</title>
    <url>/posts/a0418ed7.html</url>
    <content><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>文件上传是项目开发中最常见的功能之一，Spring MVC 可以很好的支持文件上传，但是Spring MVC 上下文中默认没有装配<code>MultipartResolver</code>，因此默认情况下其不能处理文件上传工作。如果想使用 Spring 的文件上传功能，则需要在上下文中配置<code>MultipartResolver</code>。</p>
<p>前端表单要求：为了能上传文件，必须将表单的<code>method</code>设置为<code>post</code>，并将<code>enctype</code>设置为<code>multipart/form-data</code>。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p>
<p><strong>对表单中的<code>enctype</code>属性做个详细的说明：</strong></p>
<ul>
<li><code>application/x-www=form-urlencoded</code>：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li>
<li><code>multipart/form-data</code>：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li>
<li><code>text/plain</code>：除了把空格转换为<code>+</code>外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一旦设置了<code>enctype</code>为<code>multipart/form-data</code>，浏览器即会采用<strong>二进制流</strong>的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的 HTTP 响应。</p>
<ul>
<li>Servlet3.0 规范已经提供方法来处理文件上传，但这种上传需要在 Servlet 中完成。</li>
<li>而 Spring MVC 则提供了更简单的封装。</li>
<li>Spring MVC 为文件上传提供了直接的支持，这种支持是用即插即用的<code>MultipartResolver</code>实现的。</li>
<li>Spring MVC使用<code>Apache Commons FileUpload</code>技术实现了一个<code>MultipartResolver</code>实现类<code>CommonsMultipartResolver</code>。因此，Spring MVC 的文件上传还需要依赖<code>Apache Commons FileUpload</code>的组件。</li>
</ul>
<a id="more"></a>

<h3 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h3><ol>
<li><p>导入 jar 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 bean（固定格式）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求的编码格式，必须和jsp的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>CommonsMultipartFile</code>的常用方法：</p>
<ul>
<li><code>String getOriginalFilename()</code>：获取上传文件的原名</li>
<li><code>InputStream getInputStream()</code>：获取文件流</li>
<li><code>void transferTo(File dest)</code>：将上传文件保存到一个目录文件中</li>
</ul>
</li>
<li><p>编写页面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写控制器（固定格式）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horsen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 将name=file控件得到的文件封装成CommonsMultipartFile对象</span></span><br><span class="line"><span class="comment">        * 批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">           <span class="comment">//获取文件名: file.getOriginalFilename();</span></span><br><span class="line">           String uploadFileName = file.getOriginalFilename();</span><br><span class="line">           <span class="comment">//如果文件名为空, 直接回到首页</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;上传文件名: &quot;</span> + uploadFileName);</span><br><span class="line">           <span class="comment">//上传路径保存设置</span></span><br><span class="line">           String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">           <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">           File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">           <span class="keyword">if</span> (!realPath.exists()) &#123;</span><br><span class="line">               realPath.mkdir();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;上传文件保存地址: &quot;</span> + realPath);</span><br><span class="line">           <span class="comment">//文件输入流</span></span><br><span class="line">           InputStream is = file.getInputStream();</span><br><span class="line">           <span class="comment">//文件输出流</span></span><br><span class="line">           OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath, uploadFileName));</span><br><span class="line">           <span class="comment">//读取写出</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">               os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">               os.flush();</span><br><span class="line">           &#125;</span><br><span class="line">           os.close();</span><br><span class="line">           is.close();</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 采用file.Transto来保存上传的文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//上传路径保存设置</span></span><br><span class="line">       String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">       File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="keyword">if</span> (!realPath.exists()) &#123;</span><br><span class="line">           realPath.mkdir();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//上传文件地址</span></span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件保存地址: &quot;</span> + realPath);</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">       file.transferTo(<span class="keyword">new</span> File(realPath + <span class="string">&quot;/&quot;</span> + file.getOriginalFilename()));</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-文件下载"><a href="#3-文件下载" class="headerlink" title="3. 文件下载"></a>3. 文件下载</h3><ol>
<li><p>设置 response 响应头</p>
</li>
<li><p>读取文件 – InputStream</p>
</li>
<li><p>写出文件 – OutputStream</p>
</li>
<li><p>执行操作</p>
</li>
<li><p>关闭流 （先开后关）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response , HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 要下载的图片地址</span></span><br><span class="line">    String  path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    String  fileName = <span class="string">&quot;test.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 设置response响应头</span></span><br><span class="line">    <span class="comment">// 设置页面不缓存, 清空buffer</span></span><br><span class="line">    response.reset();</span><br><span class="line">    <span class="comment">// 字符编码</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 二进制传输数据</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); </span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">    <span class="comment">// 2. 读取文件--输入流</span></span><br><span class="line">    InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    <span class="comment">// 3. 写出文件--输出流</span></span><br><span class="line">    OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 4. 执行写出操作</span></span><br><span class="line">    <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    input.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/download&quot;&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring MVC</category>
      </categories>
      <tags>
        <tag>IO</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/posts/7af799fd.html</url>
    <content><![CDATA[<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul>
<li>反射机制允许程序在执行期借助于 Reflection API 获取任何类的内部信息，并能直接操作任意对象的内部属性及方法。</li>
</ul>
<img src="/posts/7af799fd/image-20200723135607184.png" class>

<a id="more"></a>

<ul>
<li>反射机制提供的功能（在运行时）<ul>
<li>判断任意一个对象所属的类</li>
<li>构造任意一个类的对象</li>
<li>判断任意一个类所具有的成员变量和方法</li>
<li>获取泛型信息</li>
<li>调用任意一个对象的成员变量和方法</li>
<li>处理注解</li>
<li>生成动态代理</li>
<li>……</li>
</ul>
</li>
</ul>
<h3 id="2-Class-类"><a href="#2-Class-类" class="headerlink" title="2. Class 类"></a>2. Class 类</h3><ul>
<li>Class 对象只能由系统建立</li>
<li>一个类在 JVM 中只有一个 Class 对象</li>
<li>一个类被加载后，类的整个结构都会被封装在 Class 对象中</li>
<li>Class 类是 Reflection 的根源，针对任何想要动态加载、运行的类，唯有先获得相应的 Class 对象</li>
</ul>
<h3 id="3-获取-Class-类的实例"><a href="#3-获取-Class-类的实例" class="headerlink" title="3. 获取 Class 类的实例"></a>3. 获取 Class 类的实例</h3><ol>
<li><p>已知具体的类，通过类的 class 属性获取，该方法最安全可靠</p>
<p><code>Class clazz = Person.class;</code></p>
</li>
<li><p>已知某个类的实例，调用该实例的 getClass() 方法获取 Class 对象</p>
<p><code>Class clazz = person.getClass();</code></p>
</li>
<li><p>已知一个类的全类名，且该类在类路径下，通过 Class 类的静态方法 forName() 获取</p>
<p><code>Class class = Class.forName(&quot;demo01.Student&quot;);</code></p>
</li>
<li><p>内置基本数据类型可以直接用类名.TYPE</p>
</li>
<li><p>利用 ClassLoader</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人是: &quot;</span> + person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式一: 通过对象获得</span></span><br><span class="line">        Class c1 = person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二: forName获得</span></span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;com.horsen.reflection.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式三: 通过类名.class</span></span><br><span class="line">        Class c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式四: 基本内置类型的包装类都有一个TYPE属性</span></span><br><span class="line">        Class c4 = Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得父类的类型</span></span><br><span class="line">        Class c5 = c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Persion&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>注解和反射</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>注解</title>
    <url>/posts/a70f4376.html</url>
    <content><![CDATA[<h3 id="1-内置注解"><a href="#1-内置注解" class="headerlink" title="1. 内置注解"></a>1. 内置注解</h3><table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>@Override</td>
<td>重写父类方法</td>
</tr>
<tr>
<td>@Deprecated</td>
<td>不推荐使用的方法</td>
</tr>
<tr>
<td>@SuppressWarnings</td>
<td>抑制警告信息</td>
</tr>
</tbody></table>
<a id="more"></a>

<h3 id="2-元注解"><a href="#2-元注解" class="headerlink" title="2. 元注解"></a>2. 元注解</h3><table>
<thead>
<tr>
<th>注解</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>@Target</td>
<td>描述注解的适用范围</td>
</tr>
<tr>
<td>@Retention</td>
<td>描述注解的生命周期</td>
</tr>
<tr>
<td>@Documented</td>
<td>说明将改注解包含在JavaDoc中</td>
</tr>
<tr>
<td>@Inherited</td>
<td>说明子类可以继承父类中的该注解</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个注解</span></span><br><span class="line"><span class="comment">// Target表示注解可以用在哪些地方</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment">// Retention表示注解在什么地方有效</span></span><br><span class="line"><span class="comment">// runtime &gt; class &gt; sources</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">// Ducomented 表示是否将注解生成在JavaDoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// Inherited 表示子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-自定义注解"><a href="#3-自定义注解" class="headerlink" title="3. 自定义注解"></a>3. 自定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(name = &quot;lhx&quot;, schools = &#123;&quot;njit&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果参数名为value 可以省略不写</span></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;lhx&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line">    <span class="comment">// 注解的参数: 参数类型 + 参数名()</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果默认值为-1 代表不存在</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line">    String[] schools();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3 &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>注解和反射</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>实现多线程的方法</title>
    <url>/posts/f2deaf54.html</url>
    <content><![CDATA[<h3 id="1-继承-Thread-类"><a href="#1-继承-Thread-类" class="headerlink" title="1. 继承 Thread 类"></a>1. 继承 Thread 类</h3><ol>
<li>线程类继承 Thread 类</li>
<li>重写 run() 方法</li>
<li>声明线程类对象</li>
<li>对象调用 start() 方法</li>
</ol>
<p><em>使用 commons.io 包下载网络图片</em></p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url, fileName);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载文件: &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadTest threadTest1</span><br><span class="line">                = <span class="keyword">new</span> ThreadTest(<span class="string">&quot;http://i0.hdslb.com/bfs/archive/22650682fd25a4a5aa96dd9ef53190c6b8d54912.png&quot;</span>, <span class="string">&quot;bilibili1.png&quot;</span>);</span><br><span class="line">        ThreadTest threadTest2</span><br><span class="line">                = <span class="keyword">new</span> ThreadTest(<span class="string">&quot;http://i0.hdslb.com/bfs/archive/22650682fd25a4a5aa96dd9ef53190c6b8d54912.png&quot;</span>, <span class="string">&quot;bilibili2.png&quot;</span>);</span><br><span class="line">        ThreadTest threadTest3</span><br><span class="line">                = <span class="keyword">new</span> ThreadTest(<span class="string">&quot;http://i0.hdslb.com/bfs/archive/22650682fd25a4a5aa96dd9ef53190c6b8d54912.png&quot;</span>, <span class="string">&quot;bilibili3.png&quot;</span>);</span><br><span class="line">        threadTest1.start();</span><br><span class="line">        threadTest2.start();</span><br><span class="line">        threadTest3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-实现-Runnable-接口（推荐）"><a href="#1-2-实现-Runnable-接口（推荐）" class="headerlink" title="1.2 实现 Runnable 接口（推荐）"></a>1.2 实现 Runnable 接口（推荐）</h4><ol>
<li>线程类继承 Runnable 接口</li>
<li>实现 run() 方法</li>
<li>声明线程类对象</li>
<li>创建 Thread 对象，参数传入线程类对象</li>
<li>调用 start() 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run方法---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Runnable接口的实现类对象</span></span><br><span class="line">        RunnableTest runnableTest = <span class="keyword">new</span> RunnableTest();</span><br><span class="line">        <span class="comment">// 创建线程对象, 通过线程对象开启线程(代理)</span></span><br><span class="line">        <span class="keyword">new</span> Thread(runnableTest).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-龟兔赛跑"><a href="#2-龟兔赛跑" class="headerlink" title="2. 龟兔赛跑"></a>2. 龟兔赛跑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;兔子&quot;</span>.equals(Thread.currentThread().getName()) &amp;&amp; i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;兔子睡觉了&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断比赛是否结束</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = gameOver(i);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;跑了&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断比赛是否结束</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> steps 步数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果存在胜利者</span></span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (steps &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">            winner = Thread.currentThread().getName();</span><br><span class="line">            System.out.println(<span class="string">&quot;Winner is &quot;</span> + winner);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程同步</title>
    <url>/posts/895e9db.html</url>
    <content><![CDATA[<h3 id="1-三大线程不安全案例"><a href="#1-三大线程不安全案例" class="headerlink" title="1. 三大线程不安全案例"></a>1. 三大线程不安全案例</h3><h4 id="1-1-不安全的购票"><a href="#1-1-不安全的购票" class="headerlink" title="1.1 不安全的购票"></a>1.1 不安全的购票</h4><ul>
<li><p>一张票同时被多人买到</p>
</li>
<li><p>出现买到无中生有的票的情况</p>
</li>
</ul>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line">        <span class="keyword">new</span> Thread(station, <span class="string">&quot;我&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station, <span class="string">&quot;你&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station, <span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            buy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 拿到了 &quot;</span> + ticketNums--);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-不安全的取钱"><a href="#1-2-不安全的取钱" class="headerlink" title="1.2 不安全的取钱"></a>1.2 不安全的取钱</h4><ul>
<li><p>取出无中生有的钱，银行血亏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>, <span class="string">&quot;基金&quot;</span>);</span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">&quot;你&quot;</span>);</span><br><span class="line">        Drawing girlFriend = <span class="keyword">new</span> Drawing(account, <span class="number">100</span>, <span class="string">&quot;女朋友&quot;</span>);</span><br><span class="line">        you.start();</span><br><span class="line">        girlFriend.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * money    余额</span></span><br><span class="line"><span class="comment">     * name     卡名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Account account;</span><br><span class="line">    <span class="keyword">int</span> drawingMoney;</span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account, <span class="keyword">int</span> drawingMoney, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断有没有钱</span></span><br><span class="line">        <span class="keyword">if</span> (account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;钱不够 无法取钱&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 卡内余额</span></span><br><span class="line">        account.money -= drawingMoney;</span><br><span class="line">        <span class="comment">// 手里的钱</span></span><br><span class="line">        nowMoney += drawingMoney;</span><br><span class="line">        System.out.println(account.name + <span class="string">&quot;余额为: &quot;</span> + account.money);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">&quot;手里的钱: &quot;</span> + nowMoney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-3-不安全的集合"><a href="#1-3-不安全的集合" class="headerlink" title="1.3 不安全的集合"></a>1.3 不安全的集合</h4><ul>
<li><p>多个线程同时向集合中添加元素，添加在同一位置，导致数组实际大小与预期不符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-同步方法和同步块"><a href="#2-同步方法和同步块" class="headerlink" title="2. 同步方法和同步块"></a>2. 同步方法和同步块</h3><p>用 synchronized 锁住公共资源</p>
<h4 id="2-1-安全的购票"><a href="#2-1-安全的购票" class="headerlink" title="2.1 安全的购票"></a>2.1 安全的购票</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否有票</span></span><br><span class="line">    <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 拿到了 &quot;</span> + ticketNums--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-安全的取钱"><a href="#2-2-安全的取钱" class="headerlink" title="2.2 安全的取钱"></a>2.2 安全的取钱</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (account)&#123;</span><br><span class="line">        <span class="comment">// 判断有没有钱</span></span><br><span class="line">        <span class="keyword">if</span> (account.money - drawingMoney &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;钱不够 无法取钱&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 卡内余额</span></span><br><span class="line">        account.money -= drawingMoney;</span><br><span class="line">        <span class="comment">// 手里的钱</span></span><br><span class="line">        nowMoney += drawingMoney;</span><br><span class="line">        System.out.println(account.name + <span class="string">&quot;余额为: &quot;</span> + account.money);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">&quot;手里的钱: &quot;</span> + nowMoney);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-安全的集合"><a href="#2-3-安全的集合" class="headerlink" title="2.3 安全的集合"></a>2.3 安全的集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">        list.add(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title>线程状态</title>
    <url>/posts/ecb26108.html</url>
    <content><![CDATA[<h3 id="0-综述"><a href="#0-综述" class="headerlink" title="0. 综述"></a>0. 综述</h3><img src="/posts/ecb26108/image-20200719163614163.png" class>

<h3 id="1-线程停止-Stop"><a href="#1-线程停止-Stop" class="headerlink" title="1. 线程停止 Stop"></a>1. 线程停止 Stop</h3><ul>
<li>建议线程正常停止：利用次数，不建议死循环</li>
<li>建议使用标志位</li>
<li>不要使用 stop() 或 destroy() 等过时或者 JDK 不建议使用的方法</li>
</ul>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...Thread&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 设置一个公开的方法转换标志位 停止线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StopTest stopTest = <span class="keyword">new</span> StopTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(stopTest).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">900</span>) &#123;</span><br><span class="line">                <span class="comment">// 调用stop()停止线程</span></span><br><span class="line">                stopTest.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程该停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-线程休眠-Sleep"><a href="#2-线程休眠-Sleep" class="headerlink" title="2. 线程休眠 Sleep"></a>2. 线程休眠 Sleep</h3><ul>
<li>sleep() 方法使线程阻塞，时间到后进入就绪状态</li>
<li>每一个对象都有一个锁，sleep() 不会释放锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>).format(date));</span><br><span class="line">                date = <span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-线程礼让-Yield"><a href="#3-线程礼让-Yield" class="headerlink" title="3. 线程礼让 Yield"></a>3. 线程礼让 Yield</h3><ul>
<li>让当前正在执行的线程暂停，但不阻塞</li>
<li>将线程转为就绪状态</li>
<li>让 CPU 重新调度，但礼让不一定成功</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-线程强制执行-Join"><a href="#4-线程强制执行-Join" class="headerlink" title="4. 线程强制执行 Join"></a>4. 线程强制执行 Join</h3><ul>
<li>想象成插队</li>
<li>插队的线程执行时阻塞其他线程，该线程执行完毕再执行其他线程 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;vip线程来了&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        JoinTest joinTest = <span class="keyword">new</span> JoinTest();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(joinTest);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">200</span>) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-观测线程状态"><a href="#5-观测线程状态" class="headerlink" title="5. 观测线程状态"></a>5. 观测线程状态</h3><p><em>注意：死掉的线程不能再启动</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 线程倒计时5秒后结束</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;----线程结束了----&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 观察状态</span></span><br><span class="line">        <span class="comment">// new</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动</span></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只要线程不终止 就一直输出状态 每500ms输出一次</span></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                <span class="comment">// 更新线程状态</span></span><br><span class="line">                state = thread.getState();</span><br><span class="line">                System.out.println(state);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-线程优先级"><a href="#6-线程优先级" class="headerlink" title="6. 线程优先级"></a>6. 线程优先级</h3><ul>
<li>范围 1~10</li>
<li>先设置优先级，再启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t6 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先设置优先级 再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;&quot;</span> + Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-守护线程"><a href="#7-守护线程" class="headerlink" title="7. 守护线程"></a>7. 守护线程</h3><ul>
<li>线程分为用户线程和守护线程</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>虚拟机必须等待用户线程执行完毕</li>
<li>应用：后台记录操作日志、监控内存、垃圾回收等等</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>线程状态</tag>
      </tags>
  </entry>
  <entry>
    <title>线程进阶</title>
    <url>/posts/1787e9a3.html</url>
    <content><![CDATA[<h3 id="1-死锁概念"><a href="#1-死锁概念" class="headerlink" title="1. 死锁概念"></a>1. 死锁概念</h3><p>多个线程互相抱着对方需要的资源，然后形成僵持</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup girl1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>, <span class="string">&quot;灰姑娘&quot;</span>);</span><br><span class="line">        Makeup girl2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>, <span class="string">&quot;白雪公主&quot;</span>);</span><br><span class="line">        girl1.start();</span><br><span class="line">        girl2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要的资源只有一份 用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    String girlName;</span><br><span class="line"></span><br><span class="line">    Makeup(<span class="keyword">int</span> choice, String girlName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DoMakeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 化妆</span></span><br><span class="line"><span class="comment">     * 互相持有对方的所 就是需要拿到对方的资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoMakeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 获得口红</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 一秒钟后想获得镜子</span></span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获得镜子</span></span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName + <span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 一秒钟后想获得口红</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-产生死锁的必要条件"><a href="#2-产生死锁的必要条件" class="headerlink" title="2. 产生死锁的必要条件"></a>2. 产生死锁的必要条件</h3><ol>
<li>互斥条件：一个资源每次只能被一个进程使用。</li>
<li>请求与保持条件：一个进程因请求资源而阻塞时，对以获得的资源保持不放。</li>
<li>不剥夺条件：进程已获得的资源，在未使用完之前，不强行剥夺。</li>
<li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>
<h3 id="3-Lock-锁"><a href="#3-Lock-锁" class="headerlink" title="3. Lock 锁"></a>3. Lock 锁</h3><table>
<thead>
<tr>
<th>Lock</th>
<th>synchronized</th>
</tr>
</thead>
<tbody><tr>
<td>显式锁（需要手动开启和关闭）</td>
<td>隐式锁，离开作用域自动释放</td>
</tr>
<tr>
<td>只有代码块锁</td>
<td>有代码块锁和方法锁</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockTest2 lockTest2 = <span class="keyword">new</span> LockTest2();</span><br><span class="line">        <span class="keyword">new</span> Thread(lockTest2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lockTest2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lockTest2).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockTest2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tickNums = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 定义Lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 加锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tickNums &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(tickNums--);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-生产者消费者问题"><a href="#4-生产者消费者问题" class="headerlink" title="4. 生产者消费者问题"></a>4. 生产者消费者问题</h3><h4 id="4-1-管程法"><a href="#4-1-管程法" class="headerlink" title="4.1 管程法"></a>4.1 管程法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferZone bufferZone = <span class="keyword">new</span> BufferZone();</span><br><span class="line">        <span class="keyword">new</span> Producer(bufferZone).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(bufferZone).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    BufferZone bufferZone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BufferZone bufferZone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferZone = bufferZone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            bufferZone.push(<span class="keyword">new</span> Product(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span> + i + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    BufferZone bufferZone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BufferZone bufferZone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferZone = bufferZone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了第&quot;</span> + bufferZone.pop().id + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferZone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Product&gt; products = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果容器满了 就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span> (products.size() + <span class="number">1</span> &gt; MAX_SIZE) &#123;</span><br><span class="line">            <span class="comment">// 通知消费者消费 生产等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有满 就放入产品</span></span><br><span class="line">        products.add(product);</span><br><span class="line">        <span class="comment">// 通知消费者消费</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Product <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span> (products.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待生产者生产 消费等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果可以消费</span></span><br><span class="line">        Product product = products.pop();</span><br><span class="line">        <span class="comment">// 通知生产者生产</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-信号灯法"><a href="#4-2-信号灯法" class="headerlink" title="4.2 信号灯法"></a>4.2 信号灯法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PCTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv= <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> Actor(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Audience(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;快乐大本营&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">&quot;广告&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Audience</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Audience</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">this</span>.tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 演员表演 观众等待</span></span><br><span class="line">    <span class="comment">// 观众观看 演员等待</span></span><br><span class="line">    String program;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String program)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了&quot;</span> + program);</span><br><span class="line">        <span class="comment">// 通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.program = program;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众观看了&quot;</span> + program);</span><br><span class="line">        <span class="comment">// 通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-线程池"><a href="#5-线程池" class="headerlink" title="5. 线程池"></a>5. 线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建服务 创建线程池 参数为线程池大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        <span class="comment">// 关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>死锁</tag>
        <tag>生产者消费者</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA 快捷键</title>
    <url>/posts/25ed82e.html</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>快捷键</th>
<th>操作</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + Alt</td>
<td>多行操作</td>
</tr>
<tr>
<td>psvm</td>
<td>生成main()方法</td>
</tr>
<tr>
<td>fori</td>
<td>生成for循环</td>
</tr>
<tr>
<td>Ctrl + Alt + V</td>
<td>自动补齐返回值类型</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>覆写方法</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>实现接口中的方法</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>大小写转换</td>
</tr>
<tr>
<td>Ctrl + Shift + Z</td>
<td>取消撤销</td>
</tr>
<tr>
<td>Alt＋Insert</td>
<td>生成构造方法、getter、setter</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>将选中的行合并成一行</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>定位到某一行</td>
</tr>
<tr>
<td>Ctrl + Shitft + 向下箭头</td>
<td>将光标所在的代码块向下整体移动</td>
</tr>
<tr>
<td>Ctrl + Shift + 向上箭头</td>
<td>将光标所在的代码块向上整体移动</td>
</tr>
<tr>
<td>Alt + Shift + 向下箭头</td>
<td>将行向下移动</td>
</tr>
<tr>
<td>Alt + Shift + 向上箭头</td>
<td>将行向上移动</td>
</tr>
<tr>
<td>Ctrl + F</td>
<td>在当前文件中查找</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>替换字符串</td>
</tr>
<tr>
<td>Ctrl + Shift + F</td>
<td>在全局文件中查找字符串</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>在全局中替换字符串</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>自动补齐{}或者分号</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>在当前行的下方开始新行</td>
</tr>
<tr>
<td>Ctrl + Alt + Enter</td>
<td>在当前行的上方插入新行</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>删除光标所在至单词结尾处的所有字符</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + J</td>
<td>选中所有相同单词</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>方法参数提示</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>区域选中</td>
</tr>
<tr>
<td>Alt + Shift + 鼠标左键</td>
<td>多光标编辑</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok</title>
    <url>/posts/68207400.html</url>
    <content><![CDATA[<ol>
<li><p>IDEA 中安装插件</p>
</li>
<li><p>项目中导入 jar 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>常用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//最常用 生成无参构造、getter、setter、 toString、hashCode、equals</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>注解</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 1099 端口被占用的问题</title>
    <url>/posts/bfbe6a21.html</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在 IDEA 闪退的时候，如果 Tomcat 程序没有终止，再次启动就会报错，就算关了网页也没用，关了浏览器也没用。</p>
<img src="/posts/bfbe6a21/image-1.png" class>

<a id="more"></a>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li><p>打开 cmd</p>
</li>
<li><p>输入<code>netstat -aon|findstr 1099</code>回车</p>
</li>
<li><p>记住 pid，比如说是 33500</p>
</li>
<li><p>输入<code>taskkill -f -pid 33500</code></p>
</li>
<li><p>再次启动 Tomcat</p>
</li>
</ol>
<img src="/posts/bfbe6a21/image-2.png" class>]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>01_JavaScript 入门</title>
    <url>/posts/ca9d276f.html</url>
    <content><![CDATA[<h3 id="1-数据类型和运算符"><a href="#1-数据类型和运算符" class="headerlink" title="1. 数据类型和运算符"></a>1. 数据类型和运算符</h3><ol>
<li><p>number</p>
<p>JavaScript 不区分小数和整数</p>
<ul>
<li><code>NaN</code>不是数字</li>
<li><code>Infinity</code>无限大</li>
</ul>
</li>
<li><p>字符串</p>
<ul>
<li><code>‘abc’</code></li>
<li><code>&quot;abc&quot;</code></li>
</ul>
</li>
<li><p>布尔值</p>
</li>
<li><p>逻辑运算符</p>
<ul>
<li>&amp;&amp;</li>
<li>||</li>
<li>!</li>
</ul>
</li>
<li><p>比较运算符</p>
<ul>
<li>==     类型不一样，值一样，为 true</li>
<li>===   类型一样，值一样，为 true</li>
</ul>
</li>
</ol>
<a id="more"></a>

<p>注意：尽量不要使用浮点数进行运算，有精度问题。如果想要比较两个浮点数是否相等，不能使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>/<span class="number">3</span>) === (<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>而要使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">((<span class="number">1</span>/<span class="number">3</span>) - (<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>)) &lt; <span class="number">0.000000001</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">false</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;horsen&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    tags: [<span class="string">&#x27;JavaScript&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><ol>
<li>变量名可以用<code>_</code>或<code>$</code>开头</li>
<li><code>var</code>全局变量</li>
<li><code>let</code>局部变量</li>
<li><code>const</code>常量</li>
</ol>
<h3 id="3-严格检查模式"><a href="#3-严格检查模式" class="headerlink" title="3. 严格检查模式"></a>3. 严格检查模式</h3><p>IDEA 需要设置支持 ES6 语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;user strict&#x27;</span>;<span class="comment">// 必须写在第一行</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure>

<h3 id="4-数据类型详解"><a href="#4-数据类型详解" class="headerlink" title="4. 数据类型详解"></a>4. 数据类型详解</h3><h4 id="4-1-字符串"><a href="#4-1-字符串" class="headerlink" title="4.1 字符串"></a>4.1 字符串</h4><ol>
<li><p>转义字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">\n</span></span><br><span class="line"><span class="string">\t</span></span><br><span class="line"><span class="string">\u4e2d Unicode字符</span></span><br><span class="line"><span class="string">\x41   Ascii字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多行字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> msg =</span><br><span class="line">    <span class="string">`hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">hhhhhh`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;horsen&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">`你好啊, <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>常用方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="string">&quot;student&quot;</span>;</span><br><span class="line"><span class="comment">// 字符串长度</span></span><br><span class="line">student.length</span><br><span class="line"><span class="comment">// 大小写转换</span></span><br><span class="line">student.toUpperCase()</span><br><span class="line">student.toLowerCase()</span><br><span class="line"><span class="comment">// 返回下标</span></span><br><span class="line">student.indexOf(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line"><span class="comment">// 截取字符串</span></span><br><span class="line">student.substring(<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-2-数组"><a href="#4-2-数组" class="headerlink" title="4.2 数组"></a>4.2 数组</h4><p><strong>可以包含任意的数据类型</strong></p>
<ol>
<li><p>长度</p>
<p> 给长度赋值，数组大小就会变化，如果过小，元素就会丢失</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.length = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);<span class="comment">// 结果是10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下标索引</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.indexOf(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>slice()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.slice(<span class="number">3</span>)<span class="comment">// 从第3个开始截取</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>push() 和 pop()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.push(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)<span class="comment">// 添加在末尾</span></span><br><span class="line">arr.pop()<span class="comment">// 弹出尾部元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>unshift() 和 shift()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.unshift(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)<span class="comment">// 添加在头部</span></span><br><span class="line">arr.shift()<span class="comment">// 弹出头部元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>排序 sort()</p>
</li>
<li><p>元素反转 reverse()</p>
</li>
<li><p>拼接 concat() （并不会修改数组，会返回一个新的数组）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用特定的字符串连接 join()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="comment">// 结果 “1-2-3”</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-3-对象"><a href="#4-3-对象" class="headerlink" title="4.3 对象"></a>4.3 对象</h4><ol>
<li><p>动态的删减属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态的添加属性</p>
<p>本来没有 sex 属性，赋值就有了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.sex = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>判断属性是否在对象中</p>
<p>注意：JavaScript 中的键值对，所有键都是字符串，所有值都是任意对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> person</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断一个属性是否是这个对象自身拥有的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-循环遍历"><a href="#5-循环遍历" class="headerlink" title="5. 循环遍历"></a>5. 循环遍历</h3><ol>
<li><p>forEach</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">14</span>];</span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>for…in</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for(var index in object)&#123;&#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">in</span> age)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(age[num])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>for…of</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> age)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="6-Map-和-Set"><a href="#6-Map-和-Set" class="headerlink" title="6. Map 和 Set"></a>6. Map 和 Set</h3><ol>
<li><p>Map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&#x27;tom&#x27;</span>, <span class="number">100</span>],</span><br><span class="line">    [<span class="string">&#x27;jerry&#x27;</span>, <span class="number">20</span>],</span><br><span class="line">    [<span class="string">&#x27;rose&#x27;</span>, <span class="number">80</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 通过键获得值</span></span><br><span class="line"><span class="keyword">var</span> score = map.get(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(score);</span><br><span class="line"><span class="comment">// 新增或修改</span></span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span>,<span class="number">90</span>);</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">map.delete(<span class="string">&#x27;tom&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set（无序不重复集合）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]);</span><br><span class="line">set.add(<span class="number">4</span>);</span><br><span class="line">set.delete(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">4</span>));</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>02_函数及面向对象</title>
    <url>/posts/2dfe39b3.html</url>
    <content><![CDATA[<h3 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1. 定义函数"></a>1. 定义函数</h3><ol>
<li><p>方式一</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h3 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2. 调用函数"></a>2. 调用函数</h3><p>参数问题：JavaScript 可以传递任意个参数，也可以不传参数。所以如果参数不存在，如何避免出现问题？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x !== <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;Not a number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-arguments"><a href="#3-arguments" class="headerlink" title="3. arguments"></a>3. <code>arguments</code></h3><p>是一个 JavaScript 免费赠送的关键词，代表传进函数的所有参数，是一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：<code>arguments</code>包含所有的参数，如果想使用多余的参数进行附加操作，需要排除已有的参数。</p>
<p>解决方法：使用<code>rest</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a-&gt;&quot;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-变量的作用域"><a href="#4-变量的作用域" class="headerlink" title="4. 变量的作用域"></a>4. 变量的作用域</h3><ol>
<li>var 在函数体中声明，则无法再函数体外使用</li>
<li>内部函数可以访问外部函数的成员，反之不可以</li>
<li>假如，内部函数变量和外部函数变量重名，则内部函数会屏蔽外部函数的变量</li>
<li>所有变量在一开始就声明好，不要写着写着需要了，就在中途声明</li>
</ol>
<h3 id="5-规范"><a href="#5-规范" class="headerlink" title="5. 规范"></a>5. 规范</h3><p>为了避免所有的全局变量绑定到<code>window</code>上，导致引用不同的 js 文件，相同的全局变量发生冲突，必须设定唯一全局变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> horsen = &#123;&#125;;</span><br><span class="line"><span class="comment">// 定义全局变量</span></span><br><span class="line">horsen.name = <span class="string">&quot;lhx&quot;</span>;</span><br><span class="line">horsen.add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-方法"><a href="#6-方法" class="headerlink" title="6. 方法"></a>6. 方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> horsen = &#123;</span><br><span class="line">    name: <span class="string">&quot;lhx&quot;</span>,</span><br><span class="line">    birth: <span class="number">1999</span>,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    age: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="comment">// 谁调用这个方法, 谁就是this</span></span><br><span class="line">        <span class="keyword">return</span> now - <span class="built_in">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用时要加括号</span></span><br><span class="line">horsen.age()</span><br></pre></td></tr></table></figure>

<h3 id="7-apply"><a href="#7-apply" class="headerlink" title="7. apply()"></a>7. <code>apply()</code></h3><p>所有方法都有这个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示this指向horsen对象, 参数为空</span></span><br><span class="line">getAge.apply(horsen,[]);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>03_内部对象</title>
    <url>/posts/bd684e05.html</url>
    <content><![CDATA[<h3 id="1-标准对象"><a href="#1-标准对象" class="headerlink" title="1. 标准对象"></a>1. 标准对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line"><span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span></span><br><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.abs</span><br><span class="line"><span class="string">&quot;functi on&#x27;</span></span><br><span class="line"><span class="string">typeof undefined</span></span><br><span class="line"><span class="string">&quot;</span><span class="literal">undefined</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-Date"><a href="#2-Date" class="headerlink" title="2. Date"></a>2. Date</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="comment">// 年</span></span><br><span class="line">now.getFullYear();</span><br><span class="line"><span class="comment">// 月</span></span><br><span class="line">now.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 日</span></span><br><span class="line">now.getDate();</span><br><span class="line"><span class="comment">// 星期</span></span><br><span class="line">now.getDay();</span><br><span class="line"><span class="comment">// 时</span></span><br><span class="line">now.getHours();</span><br><span class="line"><span class="comment">// 分</span></span><br><span class="line">now.getMinutes();</span><br><span class="line"><span class="comment">// 秒</span></span><br><span class="line">now.getSeconds();</span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line">now.getTime();</span><br></pre></td></tr></table></figure>

<h3 id="3-JSON"><a href="#3-JSON" class="headerlink" title="3. JSON"></a>3. JSON</h3><blockquote>
<p>Spring MVC 里面有，这里就不写了</p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>04_面向对象编程</title>
    <url>/posts/a9f638ce.html</url>
    <content><![CDATA[<h3 id="1-原型继承"><a href="#1-原型继承" class="headerlink" title="1. 原型继承"></a>1. 原型继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Student = &#123;</span><br><span class="line">    name: <span class="string">&quot;horsen&quot;</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; run....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> Bird = &#123;</span><br><span class="line">    fly: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; fly...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小明的原型指向Student</span></span><br><span class="line">xiaoming.__proto__ = Student;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-class-继承"><a href="#2-class-继承" class="headerlink" title="2. class 继承"></a>2. class 继承</h3><ol>
<li><p>定义一个类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&#x27;xiaoming&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pupil</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, grade) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myGrade() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hahaha&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xiaohong = <span class="keyword">new</span> Pupil(<span class="string">&#x27;xiaohong&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>05_操作 BOM 对象</title>
    <url>/posts/37b1a18.html</url>
    <content><![CDATA[<h3 id="1-window"><a href="#1-window" class="headerlink" title="1. window"></a>1. <code>window</code></h3><p>代表浏览器窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取外部高度</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight</span><br><span class="line"><span class="comment">// 获取外部宽度</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth</span><br><span class="line"><span class="comment">// 获取内部高度</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight</span><br><span class="line"><span class="comment">// 获取内部宽度</span></span><br><span class="line"><span class="built_in">window</span>.outerWidth</span><br></pre></td></tr></table></figure>

<h3 id="2-naigator"><a href="#2-naigator" class="headerlink" title="2. naigator"></a>2. <code>naigator</code></h3><p>封装了浏览器的信息</p>
<p>一般不会使用，因为会被人为修改</p>
<h3 id="3-screen"><a href="#3-screen" class="headerlink" title="3. screen"></a>3. <code>screen</code></h3><p>代表屏幕</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line">screen.height</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="4-location"><a href="#4-location" class="headerlink" title="4. location"></a>4. <code>location</code></h3><p>代表当前页面的 URL 信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主机</span></span><br><span class="line">host: <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="comment">// 当前位置</span></span><br><span class="line">href: <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="comment">// 协议</span></span><br><span class="line">protocol: <span class="string">&quot;https:&quot;</span></span><br><span class="line"><span class="comment">// 重新加载</span></span><br><span class="line">reload: ƒ reload()</span><br><span class="line"><span class="comment">// 设置新的地址</span></span><br><span class="line">location.assign(<span class="string">&#x27;https://xxx.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-document"><a href="#5-document" class="headerlink" title="5. document"></a>5. <code>document</code></h3><p>代表当前的页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取具体的文档树节点</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></figure>

<h3 id="6-history"><a href="#6-history" class="headerlink" title="6. history"></a>6. <code>history</code></h3><p>代表浏览器的历史记录（不建议使用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后退</span></span><br><span class="line">history.back()</span><br><span class="line"><span class="comment">// 前进</span></span><br><span class="line">history.forward()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>06_操作 DOM 对象</title>
    <url>/posts/ad33ecf6.html</url>
    <content><![CDATA[<p>整个浏览器网页就是一个 DOM 树形结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title_1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> children = father.children;</span></span><br><span class="line">    father.firstChild</span><br><span class="line">    father.lastChild</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-更新节点"><a href="#1-更新节点" class="headerlink" title="1. 更新节点"></a>1. 更新节点</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span></span><br><span class="line">    111</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> id1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置文本</span></span></span><br><span class="line"><span class="javascript">    id1.innerText=<span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置html代码</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    id1.innerHTML = &#x27;<span class="tag">&lt;<span class="name">strong</span>&gt;</span>456<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置css</span></span></span><br><span class="line"><span class="javascript">    id1.style.color=<span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="javascript">    id1.style.background=<span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注意 属性名为驼峰命名, 属性是字符串</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-删除节点"><a href="#2-删除节点" class="headerlink" title="2. 删除节点"></a>2. 删除节点</h3><p>先获取该节点的父节点，用父节点删除该节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title_1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> self = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> father = self.parentElement;</span></span><br><span class="line">    father.removeChild(self);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：删除是一个动态的过程，删除第一个节点的时候，第二个节点就成了第一个节点</p>
<h3 id="3-插入节点"><a href="#3-插入节点" class="headerlink" title="3. 插入节点"></a>3. 插入节点</h3><p>获得某个 DOM 节点之后，如果这个节点是空的，通过<code>innerHtml</code>增加一个元素；如果节点已经存在元素，<code>innerHtml</code>就会覆盖，可以用<code>append</code>追加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&quot;js&quot;</span>);</span></span><br><span class="line">    list.append(js)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>追加之后的 html 为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以创建一个新的节点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建新的节点 相当于&lt;p id=&quot;newP&quot;&gt;hello&lt;/p&gt;</span></span><br><span class="line"><span class="keyword">let</span> newP = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">newP.id = <span class="string">&quot;newP&quot;</span>;</span><br><span class="line">newP.innerText = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">list.append(newP)</span><br><span class="line"><span class="comment">// 创建一个标签节点</span></span><br><span class="line"><span class="keyword">let</span> myScript = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">myScript.setAttribute(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/javascript&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>使用<code>insertBefore</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&quot;js&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> se = <span class="built_in">document</span>.getElementById(<span class="string">&quot;se&quot;</span>);</span><br><span class="line"><span class="comment">// 把js插入到se前面</span></span><br><span class="line">list.insertBefore(js, se)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>08_jQuery</title>
    <url>/posts/c1bc4424.html</url>
    <content><![CDATA[<blockquote>
<p>官网：<a href="https://jquery.com/download/">https://jquery.com/download/</a></p>
<p>文档工具站：<a href="https://jquery.cuishifeng.cn/index.html">https://jquery.cuishifeng.cn/index.html</a></p>
</blockquote>
<h3 id="1-公式：-selector-action"><a href="#1-公式：-selector-action" class="headerlink" title="1. 公式：$(selector).action()"></a>1. 公式：<code>$(selector).action()</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.5.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 公式:</span></span><br><span class="line"><span class="comment"> $(selector).action()</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test_jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 就是css的选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test_jquery&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test_jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test_jquery&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 标签选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;p&#x27;</span>).click()</span></span><br><span class="line"><span class="javascript">    <span class="comment">// id选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test_jquery&#x27;</span>).click()</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 类选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;.test_jquery&#x27;</span>).click()</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-事件"><a href="#3-事件" class="headerlink" title="3. 事件"></a>3. 事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.5.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#divMove</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 公式:</span></span><br><span class="line"><span class="comment"> $(selector).action()</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">mouse: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMove&quot;</span>&gt;</span></span><br><span class="line">    hhhhhhh</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 当网页元素加载完毕之后响应事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27;x: &#x27;</span> + e.pageX + <span class="string">&quot; - y: &quot;</span> + e.pageY);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-操作-DOM-对象"><a href="#4-操作-DOM-对象" class="headerlink" title="4. 操作 DOM 对象"></a>4. 操作 DOM 对象</h3><ol>
<li><p>节点文本操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">&quot;py&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获得值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> text = $(<span class="string">&#x27;#list li[name=py]&#x27;</span>).text();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置值</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#list li[name=py]&#x27;</span>).text(<span class="string">&quot;123123&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#list&#x27;</span>).html(<span class="string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>css 操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#list li[class=js]&#x27;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素的显示和隐藏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#list li[class=js]&#x27;</span>).show()</span><br><span class="line">$(<span class="string">&#x27;#list li[class=js]&#x27;</span>).hide()</span><br><span class="line">$(<span class="string">&#x27;#list li[class=js]&#x27;</span>).toggle()</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>07_操作表单</title>
    <url>/posts/939c9f96.html</url>
    <content><![CDATA[<h3 id="1-表单包含的常用元素"><a href="#1-表单包含的常用元素" class="headerlink" title="1. 表单包含的常用元素"></a>1. 表单包含的常用元素</h3><ul>
<li>文本框 text</li>
<li>下拉框 select + option</li>
<li>单选框 radio</li>
<li>多选框 checkbox</li>
<li>隐藏域 hidden</li>
<li>密码框 password</li>
</ul>
<h3 id="2-获得要提交的信息"><a href="#2-获得要提交的信息" class="headerlink" title="2. 获得要提交的信息"></a>2. 获得要提交的信息</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选框的值就是设定好的value --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> inputText = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    inputText.value = <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> male = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;male&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> female = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;female&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 返回选中状态</span></span></span><br><span class="line"><span class="javascript">    male.checked = <span class="literal">true</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3-提交表单"><a href="#3-提交表单" class="headerlink" title="3. 提交表单"></a>3. 提交表单</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MD5工具类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return aaa()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5_password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选框的值就是设定好的value --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> input_pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input_password&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> md5_pwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;md5_password&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 将密码加密</span></span></span><br><span class="line">        md5_pwd.value = md5(input_pwd.value)</span><br><span class="line"><span class="javascript">        <span class="comment">// 验证密码成功</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 密码失败</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>01_MVVM 模式</title>
    <url>/posts/d41587f9.html</url>
    <content><![CDATA[<h3 id="1-什么是-MVVM-模式"><a href="#1-什么是-MVVM-模式" class="headerlink" title="1. 什么是 MVVM 模式"></a>1. 什么是 MVVM 模式</h3><p>MVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上 运行的 WPF）的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。 由 John Gossman（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。</p>
<p>MVVM 源自于经典的 MVC（Model-View-Controller）模式。MVVM 的核心是 ViewModel 层，负责转 换 Model 中的数据对象来让数据变得更容易管理和使用，其作用如下：</p>
<ul>
<li><p>该层向上与视图层进行双向数据绑定</p>
</li>
<li><p>向下与 Model 层通过接口请求进行数据交互</p>
</li>
</ul>


<p>MVVM 已经相当成熟了，当下流行的 MVVM 框架有<code>Vue.js</code>，<code>AngularJS</code>等。</p>
<a id="more"></a>

<h3 id="2-为什么要使用-MVVM"><a href="#2-为什么要使用-MVVM" class="headerlink" title="2. 为什么要使用 MVVM"></a>2. 为什么要使用 MVVM</h3><p>MVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处：</p>
<ul>
<li><strong>低耦合</strong>： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。 </li>
<li><strong>可复用</strong>： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>
<li><strong>独立开发</strong>： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页 面设计。</li>
<li><strong>可测试</strong>： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li>
</ul>
<h3 id="3-MVVM-的组成部分"><a href="#3-MVVM-的组成部分" class="headerlink" title="3. MVVM 的组成部分"></a>3. MVVM 的组成部分</h3>

<p><strong>View</strong>：<br>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、 Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。 </p>
<hr>
<p><strong>Model</strong>： </p>
<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的<strong>接口规则</strong> </p>
<hr>
<p><strong>ViewModel</strong>： </p>
<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p>
<p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的。</p>
<ul>
<li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）</li>
<li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交 互）</li>
</ul>
<p>视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。 由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再 也不必低效又麻烦地通过操纵 DOM 去更新视图。</p>
<p>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就 会自动得到相应更新，真正实现<strong>事件驱动编程</strong> 。 </p>
<p><code>View</code>层展现的不是<code>Model</code>层的数据，而是<code>ViewModel</code>的数据，由<code>ViewModel</code>负责与 <code>Model</code>层交互，这就<strong>完全解耦了 View 层和 Model 层</strong>，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</p>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>02_第一个 Vue 程序</title>
    <url>/posts/aabb5833.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架，发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上 手，还便于与第三方库（如：vue-router，vue-resource，vuex）或既有项目整合。 </p>
<h3 id="2-MVVM-模式的实现者"><a href="#2-MVVM-模式的实现者" class="headerlink" title="2. MVVM 模式的实现者"></a>2. MVVM 模式的实现者</h3><ul>
<li>Model：模型层，在这里表示 JavaScript 对象</li>
<li>View：视图层，在这里表示 DOM（HTML 操作的元素）</li>
<li>ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者</li>
</ul>
<p>在 MVVM 架构中，是不允许数据和视图直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者。</p>
<ul>
<li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li>
<li>ViewModel 能够监听到视图的变化，并能够通知数据发生改变</li>
</ul>
<p>至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 <strong>DOM 监听</strong>与<strong>数据绑定</strong> </p>
<a id="more"></a>

<h3 id="3-为什么要使用-Vue-js"><a href="#3-为什么要使用-Vue-js" class="headerlink" title="3. 为什么要使用 Vue.js"></a>3. 为什么要使用 Vue.js</h3><ul>
<li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li>
<li>移动优先。更适合移动端，比如移动端的 Touch 事件</li>
<li>易上手，学习曲线平稳，文档齐全 吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li>
<li>开源，社区活跃度高</li>
<li>……</li>
</ul>
<h3 id="4-Hello-vue"><a href="#4-Hello-vue" class="headerlink" title="4. Hello, vue."></a>4. Hello, vue.</h3><ol>
<li><p>IDEA 安装插件 Vue.js</p>
</li>
<li><p>新建 html 文件</p>
</li>
<li><p>引入 vue.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">或者</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个 vue 实例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- view层 模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// model层 数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello, vue&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>03_Vue 基础语法</title>
    <url>/posts/903f0fb.html</url>
    <content><![CDATA[<h3 id="1-v-bind"><a href="#1-v-bind" class="headerlink" title="1. v-bind"></a>1. v-bind</h3><p>除了使用插值表达式<code>&#123;&#123;&#125;&#125;</code>进行数据渲染，也可以使用<code>v-bind</code>指令，它的简写的形式就是一个冒号<code>:</code></p>
<p>该指令的意思是：将这个元素节点的<code>title</code>属性和 Vue 实例的<code>message</code>的值保持一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    如果要将模型数据绑定在html属性中</span></span><br><span class="line"><span class="comment">    则使用 v-bind 指令,此时title中显示的是模型数据</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>鼠标悬停几秒钟查看此处动态绑定的提示信息！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind 指令的简写形式： 冒号（:） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;页面加载于 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-v-if、v-else、v-else-if"><a href="#2-v-if、v-else、v-else-if" class="headerlink" title="2. v-if、v-else、v-else-if"></a>2. v-if、v-else、v-else-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>who<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;A&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-v-for"><a href="#3-v-for" class="headerlink" title="3. v-for"></a>3. v-for</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&#x27;lhx&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&#x27;horsen&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&#x27;hahahaha&#x27;</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在控制台输入<code>vm.items.push(&#123;message: &#39;123123&#39;&#125;)</code>会增加一条数据</p>
<h3 id="4-v-on"><a href="#4-v-on" class="headerlink" title="4. v-on"></a>4. v-on</h3><p>用于将 Vue 中定义的事件，绑定到前端页面的事件上。</p>
<p>例如，绑定<code>“sayHi”</code>事件到按钮的<code>click</code>方法上，在点击按钮触发<code>click</code>事件时，对应地去做<code>“sayHi”</code>中的事情。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简写为@click --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;lhxlhx&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 方法必须定义在vue的methods对象中</span></span></span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this指向当前vue实例</span></span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.message);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-v-model"><a href="#5-v-model" class="headerlink" title="5. v-model"></a>5. v-model</h3><p>Vue.js 是一个 MVVM 框架，即<strong>数据双向绑定</strong>，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。</p>
<p>值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。</p>
<p>我们可以用<code>v-model</code>指令在表单<code>&lt; input&gt;</code>、<code>&lt; textarea&gt;</code>及<code>&lt; select&gt;</code>元元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但<code>v-model</code>本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 输入框 --&gt;</span></span><br><span class="line">    Input something:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单选框(绑定的是value)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>吃饭</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>睡觉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;学习&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>学习</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好: &#123;&#123;hobby&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下拉框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;area&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>地区: &#123;&#123;area&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            sex: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">            hobby: [],</span><br><span class="line"><span class="javascript">            area: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>04_组件</title>
    <url>/posts/99973a40.html</url>
    <content><![CDATA[<h3 id="1-什么是组件"><a href="#1-什么是组件" class="headerlink" title="1. 什么是组件"></a>1. 什么是组件</h3><p>组件是可复用的<code>Vue</code>实例，说白了就是一组可以重复使用的模板，跟 JSTL 的自定义标签、 Thymeleaf 的<code>th:fragment</code>等框架有着异曲同工之妙。通常一个应用会以一棵嵌套的组件树的形式来组织：</p>


<a id="more"></a>

<h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-com</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;my-com&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello, </span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Linux&quot;</span>, <span class="string">&quot;Vue&quot;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>v-for=&quot;item in items&quot;</code>：遍历<code>Vue</code>实例种定义的名为<code>items</code>的数组，并创建同等数量的组件</li>
<li><code>v-bind:item=&quot;item&quot;</code>：将<code>props</code>中定义的名为<code>item</code>的属性（等号左边）和<code>item in items</code>中遍历的<code>item</code>项的值（等号右边）保持一致</li>
</ul>
<p><strong>注意：默认规则下 props 属性里的值不能为大写</strong></p>
<hr>
<p>如果你觉得这些一样的属性名根本无法区分，这里给出了一个路线帮助理解：</p>
<ol>
<li>组件要显示 item</li>
<li>给组件设定参数 item，与要显示的内容关联</li>
<li>将组件的属性</li>
<li>和 data 中的数据绑定</li>
<li>该数据从 for 循环中得到</li>
<li>具体的值从 items 数组中来</li>
<li>数组就是 data 中的数组 </li>
</ol>
<img src="/posts/99973a40/image-20200814214545313.png" class>]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>05_计算属性</title>
    <url>/posts/92e38122.html</url>
    <content><![CDATA[<p>计算属性的重点突出在==属性==两个字上（属性是名词），首先它是个==属性==，其次这个属性有==计算==的能力（计算是动词），这里的==计算==就是个函数。简单点说，它就是一个能够将计算结果缓存起来的属性（将行为转化成了静态的属性）。</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意, 一个是方法, 一个是属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>调用当前时间的方法：&#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前时间的计算属性：&#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello, horsen&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            currentTime1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 返回一个时间戳</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 计算属性 这是一个属性, 不是一个方法</span></span></span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            currentTime2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>methods</code>和<code>computed</code>里的东西不能重名</p>
<ul>
<li><code>methods</code>：定义方法，调用方法使用<code>currentTime1()</code>，需要带括号</li>
<li><code> computed</code>：定义计算属性，调用属性使用<code>currentTime2</code>，不需要带括号</li>
<li><code>this.message</code>是为了能够让<code>currentTime2</code>观察到数据变化而变化。如果在方法中的值发生了变化，则缓存就会刷新，可以在控制台使用<code>vm.message=&quot;123&quot;</code>改变下数据的值，再次测试观察效果</li>
</ul>
<p><strong>结论</strong>：</p>
<p>调用方法时，每次都需要进行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢？此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点，计算属性的主 要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销&gt;</p>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>compute</tag>
      </tags>
  </entry>
  <entry>
    <title>06_插槽</title>
    <url>/posts/431ca826.html</url>
    <content><![CDATA[<p>在 Vue 中使用 <code>&lt;slot&gt;</code>元素，作为承载分发内容的出口，作者称其为插槽，可以应用在组合组件的场景中。</p>
<p>比如准备制作一个待办事项组件（todo），该组件由待办标题（todo-title）和待办内容（todo-items） 组成，但这三个组件又是相互独立的。</p>
<ol>
<li><p>定义一个待办事项的组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo&#x27;</span>, &#123;</span><br><span class="line">    template:</span><br><span class="line">        <span class="string">&#x27;&lt;div&gt;\</span></span><br><span class="line"><span class="string">            &lt;div&gt;待办事项&lt;/div&gt;\</span></span><br><span class="line"><span class="string">            &lt;ul&gt;\</span></span><br><span class="line"><span class="string">                &lt;li&gt;&gt;学习Java&lt;/li&gt;\</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;\</span></span><br><span class="line"><span class="string">        &lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>给需要动态绑定的代码留出插槽，并命名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo&#x27;</span>, &#123;</span><br><span class="line">    template:</span><br><span class="line">        <span class="string">&#x27;&lt;div&gt;\</span></span><br><span class="line"><span class="string">            &lt;slot name=&quot;todo-title&quot;&gt;&lt;/slot&gt;\</span></span><br><span class="line"><span class="string">            &lt;ul&gt;\</span></span><br><span class="line"><span class="string">                &lt;slot name=&quot;todo-items&quot;&gt;&lt;/slot&gt;\</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;\</span></span><br><span class="line"><span class="string">        &lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<a id="more"></a>
</li>
<li><p>定义对应插槽的组件（待办标题和待办内容）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">    template: <span class="string">&#x27;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&quot;todo-items&quot;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">    template: <span class="string">&#x27;&lt;li&gt;&#123;&#123;index+1&#125;&#125;. &#123;&#123;item&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例化 Vue 并初始化数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        todoTitle: <span class="string">&#x27;待办事项&#x27;</span>,</span><br><span class="line">        todoItems: [<span class="string">&#x27;学习Java&#x27;</span>, <span class="string">&#x27;学习Linux&#x27;</span>, <span class="string">&#x27;学习Vue&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定视图</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;todoTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in todoItems&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果图如下：</p>
<img src="/posts/431ca826/image-20200815013638063.png" class>

<p>给出属性之间的关联，方便理解：</p>
<img src="/posts/431ca826/image-20200815012723340.png" class>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>slot</tag>
      </tags>
  </entry>
  <entry>
    <title>07_自定义内容事件分发</title>
    <url>/posts/73604753.html</url>
    <content><![CDATA[<p>结合上一篇博客，如果想要删除一个组件，需要在组件中添加删除按钮，但组件相关的数据项在 Vue 实例中，为了实现点击组件，对应地删除 Vue 实例中的数据，需要用到参数传递和事件分发。</p>
<p>自定义事件的公式如下：<code>this.$emit(&#39;自定义事件名&#39;, &#39;参数&#39;)</code></p>
<a id="more"></a>

<h3 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1. 代码实现"></a>1. 代码实现</h3><ol>
<li><p>在 Vue 实例中添加 methods 对象，并定义一个删除方法，用于删除 items 中的项（注意<code>splice()</code>方法的使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        todoTitle: <span class="string">&#x27;待办事项&#x27;</span>,</span><br><span class="line">        todoItems: [<span class="string">&#x27;学习Java&#x27;</span>, <span class="string">&#x27;学习Linux&#x27;</span>, <span class="string">&#x27;学习Vue&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        removeItems: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;删除了=&gt;&quot;</span> + <span class="built_in">this</span>.todoItems[index]);</span><br><span class="line">            <span class="comment">// splice() 方法从数组中删除(或向数组中添加)项目，然后返回被(添加)删除的项目</span></span><br><span class="line">            <span class="comment">// index表示位置, 1表示数量</span></span><br><span class="line">            <span class="built_in">this</span>.todoItems.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在自定义组件中增加删除按钮，并且绑定事件，这个事件要做的事就是实现自定义事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;todo-items&quot;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">    template: <span class="string">&#x27;&lt;li&gt;&#123;&#123;index+1&#125;&#125;. &#123;&#123;item&#125;&#125; &lt;button @click=&quot;removeComponent&quot;&gt;删除&lt;/button&gt;&lt;/li&gt;&#x27;</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        removeComponent: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 这里的remove是自定义事件的名称, 需要在HTML中使用v-on:remove的方式指派</span></span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 HTML，使用<code>v-on</code>将前端页面的自定义事件<code>remove</code>和删除 Vue 实例中 item 的方法绑定起来（注意传参）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in todoItems&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">remove</span>=<span class="string">&quot;removeItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-逻辑理解"><a href="#2-逻辑理解" class="headerlink" title="2. 逻辑理解"></a>2. 逻辑理解</h3><p>组件无法直接使用 Vue 实例中的方法，组件只能调用自身的方法。所以要通过组件调用自身方法绑定自定义事件的名称，在将自定义事件绑定 Vue 实例用的方法。</p>

]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>自定义事件</tag>
      </tags>
  </entry>
  <entry>
    <title>08_Axios</title>
    <url>/posts/21cc83c8.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异 步通信，其功能特点如下：</p>
<ul>
<li>从浏览器中创建<code>XMLHttpRequests</code></li>
<li>从 node.js 创建 http 请求</li>
<li>支持 Promise API [ JS中链式编程 ]</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据 </li>
<li>取消请求 </li>
<li>自动转换 JSON 数据 </li>
<li>客户端支持防御 XSRF（跨站请求伪造）</li>
</ul>
<blockquote>
<p>GitHub：<a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p>
<p>中文文档：<a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p>
</blockquote>
<a id="more"></a>

<h3 id="2-为什么要用-Axios"><a href="#2-为什么要用-Axios" class="headerlink" title="2. 为什么要用 Axios"></a>2. 为什么要用 Axios</h3><p>由于<code>Vue.js</code>是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以<code>Vue.js</code>并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为<code>vue-resource</code>的插件，不过在进入 2.0 版本以后停止了对该插件的维护并推荐了<code>Axios</code>框架。少用 jQuery，因为它操作 Dom 太频繁！</p>
<h3 id="3-第一个-Axios-程序"><a href="#3-第一个-Axios-程序" class="headerlink" title="3. 第一个 Axios 程序"></a>3. 第一个 Axios 程序</h3><blockquote>
<p>CDN：<a href="https://unpkg.com/axios/dist/axios.min.js">https://unpkg.com/axios/dist/axios.min.js</a></p>
</blockquote>
<ol>
<li><p>准备一个 JSON 文件，data.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Horsen Liu&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://horsenliu.github.io&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;弘景大道1号&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;江苏省南京市&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-cloak 解决闪烁问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>地址：&#123;&#123;info.address.country&#125;&#125;-&#123;&#123;info.address.city&#125;&#125;-&#123;&#123;info.address.street&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        链接：<span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123;info.url&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            info: &#123;</span><br><span class="line"><span class="javascript">                name: <span class="literal">null</span>,</span></span><br><span class="line">                address: &#123;</span><br><span class="line"><span class="javascript">                    country: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    city: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    street: <span class="literal">null</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                url: <span class="literal">null</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 钩子函数</span></span></span><br><span class="line">        mounted() &#123;</span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&#x27;data.json&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.info = response.data));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong> :</p>
<ul>
<li>使用了 v-bind 将 a:href 的属性值与 Vue 实例中的数据进行绑定 </li>
<li>使用 axios 框架的 get 方法请求 Ajax 并自动将数据封装进了 Vue 实例的数据对象中 </li>
<li>在 data 中的数据结构必须要和 Ajax 响应回来的数据格式匹配</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>09_vue-cli</title>
    <url>/posts/e587033e.html</url>
    <content><![CDATA[<h3 id="1-什么是-vue-cli"><a href="#1-什么是-vue-cli" class="headerlink" title="1. 什么是 vue-cli"></a>1. 什么是 vue-cli</h3><p>vue-cli 官方提供的一个脚手架，用于快速生成一个 vue 的项目模板，预先定义好的目录结构及基础代码，就好比在创建 Maven 项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架。</p>
<p>主要的功能 :</p>
<ul>
<li>统一的目录结构</li>
<li>本地调试</li>
<li>热部署</li>
<li>单元测试</li>
<li>集成打包上线</li>
</ul>
<a id="more"></a>

<h3 id="2-需要的环境"><a href="#2-需要的环境" class="headerlink" title="2. 需要的环境"></a>2. 需要的环境</h3><ol>
<li><p>Node.js</p>
<blockquote>
<p>中文官网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
<p>英文官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
</blockquote>
</li>
<li><p>Git（非必须，但是哪个程序员电脑里没有 Git 呢）</p>
<blockquote>
<p>官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
</blockquote>
</li>
<li><p>安装 vue-cli</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先安装 cnmp</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line">npm install vue-cli -g # 新版用 npm install -g @vue/cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试是否安装成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看可以基于哪些模板创建vue应用程序，通常我们选择webpack</span></span><br><span class="line">vue list</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="3-第一个-vue-cli-程序"><a href="#3-第一个-vue-cli-程序" class="headerlink" title="3. 第一个 vue-cli 程序"></a>3. 第一个 vue-cli 程序</h3><ol>
<li><p>新建一个文件夹 vue-cli</p>
</li>
<li><p>在文件夹下打开 Git Bash</p>
</li>
<li><p>创建一个基于 webpack 模板的 vue 应用程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> myvue 是项目名</span></span><br><span class="line">vue init webpack myvue # 新版用 vue create myvue</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一路都选择no</span></span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li>Project name：项目名称，默认回车</li>
<li>Project description：项目描述，默认回车</li>
<li>Author：项目作者，默认回车</li>
<li>Install vue-router：是否安装 vue-router，选择 n 不安装（后期需要再手动添加） </li>
<li>Use ESLint to lint your code：是否使用 ESLint 做代码检查，选择 n 不安装（后期需要再手动添 加）</li>
<li>Set up unit tests：单元测试相关，选择 n 不安装（后期需要再手动添加） </li>
<li>Setup e2e tests with Nightwatch：单元测试相关，选择 n 不安装（后期需要再手动添加） </li>
<li>Should we run npm install for you after the project has been created：创建完成后直接初始化，选择 n，手动执行</li>
</ul>
</li>
<li><p>初始化并运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd myvue </span><br><span class="line">npm install </span><br><span class="line">npm run dev # 新版用 npm run serve</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问 localhost:8080</p>


</li>
</ol>
<h3 id="4-项目结构"><a href="#4-项目结构" class="headerlink" title="4. 项目结构"></a>4. 项目结构</h3><img src="/posts/e587033e/image-20200815163752607.png" class>

<ul>
<li><p>build 和 config：WebPack 配置文件 </p>
</li>
<li><p>node_modules：用于存放 npm install 安装的依赖文件 </p>
</li>
<li><p>src： 项目源码目录 </p>
</li>
<li><p>static：静态资源文件 </p>
</li>
<li><p>.babelrc：Babel 配置文件，主要作用是将 ES6 转换为 ES5 </p>
</li>
<li><p>.editorconfig：编辑器配置 </p>
</li>
<li><p>eslintignore：需要忽略的语法检查配置文件 </p>
</li>
<li><p>.gitignore：git 忽略的配置文件 </p>
</li>
<li><p>.postcssrc.js：css 相关配置文件，其中内部的 module.exports 是 NodeJS 模块化语法 </p>
</li>
<li><p>index.html：首页，仅作为模板页，实际开发时不使用 </p>
</li>
<li><p>package.json：项目的配置文件 </p>
<ul>
<li>name：项目名称 </li>
<li>version：项目版本</li>
<li>description：项目描述 </li>
<li>author：项目作者 </li>
<li>scripts：封装常用命令 </li>
<li>dependencies：生产环境依赖 </li>
<li>devDependencies：开发环境依赖</li>
</ul>
</li>
</ul>
<h4 id="4-1-src-目录"><a href="#4-1-src-目录" class="headerlink" title="4.1 src 目录"></a>4.1 src 目录</h4><p>项目的源码目录，所有的代码都在这里写，刚才那个页面的代码就在 App.vue 文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-main-js"><a href="#4-2-main-js" class="headerlink" title="4.2 main.js"></a>4.2 main.js</h4><p>项目的入口文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>import Vue from &#39;vue&#39;</code>：ES6 写法，会被转换成<code>require(&quot;vue&quot;);</code> （require 是 NodeJS 提供 的模块加载器） </li>
<li><code>import App from &#39;./App&#39;</code>：意思同上，但是指定了查找路径，./ 为当前目录 </li>
<li><code>Vue.config.productionTip = false</code>：关闭浏览器控制台关于环境的相关提示 </li>
<li><code>new Vue(&#123;...&#125;)</code>：实例化 Vue <ul>
<li><code>el: &#39;#app&#39;</code>：查找 index.html 中 id 为 app 的元素 </li>
<li><code>template: &#39;&#39;</code>：模板，会将 index.html 中 替换为<code>components: &#123; App &#125;</code></li>
<li><code>components: &#123; App &#125;</code>：引入组件，使用的是 import App from ‘./App’ 定义的 App 组件</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>10_Webpack 学习</title>
    <url>/posts/c51055b5.html</url>
    <content><![CDATA[<h3 id="1-什么是-Webpack"><a href="#1-什么是-Webpack" class="headerlink" title="1. 什么是 Webpack"></a>1. 什么是 Webpack</h3><p>本质上，Webpack 是一个现代 JavaScript 应用程序的静态模块打包器（module bundler）。当<br>webpack处理应用程序时，它会递归地构建一个依赖关系图（dependency graph）,其中包含应用程序需要的每个模块,然后将所有这些模块打包成一个或多个 bundle。</p>
<p>Webpack 是当下最热门的前端资源模块化管理和打包工具，它可以将许多松散耦合的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分离，等到实际需要时再异步加载。通过 loader 转换，任何形式的资源都可以当做模块，比如CommonsJS、AMD、ES6、 CSS. JSON、CoffeeScript、 LESS等。</p>
<h3 id="2-安装-Webpck"><a href="#2-安装-Webpck" class="headerlink" title="2. 安装 Webpck"></a>2. 安装 Webpck</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3-使用-webpack"><a href="#3-使用-webpack" class="headerlink" title="3. 使用 webpack"></a>3. 使用 webpack</h3><ol>
<li><p>创建项目</p>
</li>
<li><p>创建一个名为 modules 的目录，用于放置 JS 模块等资源文件</p>
</li>
<li><p>在 modules 下创建模块文件，如 hello.js，用于编写 JS 模块相关代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暴露一个方法</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;Hello, webpack&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 modules 下创建一个名为 main.js 的入口文件，用于打包时设置 entry 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// require 导入一个模块, 就可以调用这个模块中的方法了</span></span><br><span class="line"><span class="keyword">let</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目目录下创建 webpack.config.js 配置文件，使用 webpack 命令打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry: <span class="string">&quot;./modules/main.js&quot;</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">&quot;./js/bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注意，这里遇到了一个大坑：</strong></p>
<p>执行<code>webpack</code>命令的时候报错了</p>
<blockquote>
<p>ERROR in Entry module not found: Error: Can’t resolve ‘./src’ in ‘E:\Proj_Vue\Vue_Study\webpack-study’</p>
</blockquote>
<p>百度了一下，找到了一个看起来靠谱的解决方法，但是我没有看懂</p>
<blockquote>
<p><a href="https://www.cnblogs.com/windowsxpxp/p/12950466.html">https://www.cnblogs.com/windowsxpxp/p/12950466.html</a></p>
</blockquote>
<p>狂神在群里的笔记中并没有关于 webpack 学习的对应章节，但是b站的视频有这个教程，不知道是不是因为版本更新之后，狂神删除了关于这方面的教学。</p>
<p>反正这个博客先放在这里，后面可能并不会用到。</p>
<p>（我学前端学到要发疯了）</p>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>11_路由</title>
    <url>/posts/ba7441b.html</url>
    <content><![CDATA[<h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h3><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>
<ul>
<li>嵌套的路由/视图表</li>
<li>模块化的、基于组件的路由配置</li>
<li>路由参数、查询、通配符</li>
<li>基于 Vue.js 过渡系统的视图过渡效果</li>
<li>细粒度的导航控制</li>
<li>带有自动激活的 CSS class 的链接</li>
<li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li>
<li>自定义的滚动条行为</li>
</ul>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure>

<p>如果在一个模块化工程中使用它，必须要通过<code>Vue.use()</code>明确地安装路由功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 显示的使用</span></span><br><span class="line">vue.use(VueRouter);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><ol>
<li><p>在 components 目录下自定义一个组件 Content.vue，表示内容页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;内容页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Content&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>再定义一个Main.vue，表示首页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;首页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Main&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装路由，在 src 目录下新建文件夹 router 用来存放路由。新建一个配置文件 index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由插件</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入自定义的组件</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&quot;../components/Content&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../components/Main&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装路由</span></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">      <span class="comment">// 路由名称</span></span><br><span class="line">      name:<span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">      <span class="comment">// 跳转的组件</span></span><br><span class="line">      component: Content</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      name:<span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 main.js 中配置路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">// 导入刚才创建的路由目录, 会自动导入配置文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 配置路由</span></span><br><span class="line">  router,</span><br><span class="line">  components: &#123;App&#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 App.vue 中使用路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Vue-router&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">      router-link: 默认会被渲染成一个&lt;a&gt;标签, </span><br><span class="line">        to相当于href, 指向配置文件里的路由名称, 相当于请求</span><br><span class="line">      router-view: 用于渲染路由匹配到的组件</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动<code>npm run dev</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>12_Element-ui</title>
    <url>/posts/bab42f0d.html</url>
    <content><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，方便程序员进行页面快速布局和构建</p>
<blockquote>
<p>官网：<a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p>
</blockquote>
<a id="more"></a>

<h3 id="2-入门"><a href="#2-入门" class="headerlink" title="2. 入门"></a>2. 入门</h3><p><strong>顺便捋一下新建项目的步骤</strong></p>
<ol>
<li><p>新建一个项目<code>vue create hello-element-ui</code></p>
</li>
<li><p>npm 安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录</span></span><br><span class="line">cd hello-element-ui</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装vue-router</span></span><br><span class="line">npm i vue-router -D</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装element-ui</span></span><br><span class="line">npm i element-ui -S</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 SASS 加载器</span></span><br><span class="line">cnpm i sass-loader node-sass -D</span><br></pre></td></tr></table></figure>
</li>
<li><p>删掉不需要的文件和代码</p>
</li>
<li><p>新建文件夹 router，views ，static</p>


<p><strong>注意：</strong></p>
<ul>
<li><p><strong>static 放不会变动的文件</strong></p>
<p>static 目录下的文件并不会被 Webpack 处理：它们会直接被复制到最终的打包目录（默认是dist/static）下。必须使用绝对路径引用这些文件，这是通过在 config.js 文件中的 <code>build.assetsPublicPath</code> 和 <code>build.assetsSubDirectory</code> 连接来确定的。</p>
</li>
<li><p><strong>assets 放可能会变动的文件</strong></p>
<p>assets目录中的文件会被webpack处理解析为模块依赖，只支持相对路径形式。例如，在 <code>&lt;img src=&quot;./logo.png&quot;&gt;</code>和 <code>background: url(./logo.png)</code>中，<code>./logo.png</code>是相对的资源路径，将由Webpack解析为模块依赖。<br>因为 logo.png 不是 JavaScript，当被视为模块依赖时，需要使用 url-loader 和 file-loader处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对路径引用。</p>
</li>
</ul>
</li>
<li><p>新建 Main.vue，Login.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref&#x3D;&quot;loginForm&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot; class&#x3D;&quot;logon-box&quot;&gt;</span><br><span class="line">      &lt;h3 class&#x3D;&quot;login-title&quot;&gt;欢迎登陆&lt;&#x2F;h3&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;账号&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入账号&quot; v-model&#x3D;&quot;form.username&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot; v-model&#x3D;&quot;form.password&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onSubmit(&#39;loginForm&#39;)&quot;&gt;登录&lt;&#x2F;el-button&gt;</span><br><span class="line">        &lt;el-button&gt;取消&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog</span><br><span class="line">        title&#x3D;&quot;温馨提示&quot;</span><br><span class="line">        :visible. sync&#x3D;&quot;dialogVisible&quot;</span><br><span class="line">        width&#x3D;&quot;30%&quot;</span><br><span class="line">        :before-close&#x3D;&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog- footer&quot;&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot; primary&quot; @click&#x3D;&quot;dialogVisible &#x3D; false&quot;&gt;确 定&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-dialog&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        username: &#39;&#39;,</span><br><span class="line">        password: &#39;&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F; 表单验证，需要在el-form-item元素中增加prop属性</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line">          &#123;required: true, message: &#39;账号不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line">          &#123;required: true, message: &#39; 密码不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F;对话框显示和隐藏</span><br><span class="line">      dialogVisible: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onSubmit(formName) &#123;</span><br><span class="line">      &#x2F;&#x2F; 为表单绑定验证功能</span><br><span class="line">      this.$refs [formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          &#x2F;&#x2F; 使用vue-router路由到指定页面，该方式称之为编程式导航</span><br><span class="line">          this.$router.push(&quot;&#x2F;main&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.dialogVisible &#x3D; true;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">  .login-box &#123;</span><br><span class="line">    border: 1px solid #DCDFE6;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    padding: 35px 35px 15px 35px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line">    box-shadow:0 0 25px #909399;</span><br><span class="line">  &#125;</span><br><span class="line">  .login-title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin:0 auto 40px auto;</span><br><span class="line">    color: #303133;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置路由 index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;@/views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;@/views/Login&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">            component: Main</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            component: Login</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span></span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(Element)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    router,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App) <span class="comment">//ElementUI</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 App.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>npm run serve</code></p>
</li>
</ol>
<h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3. 注意"></a>3. 注意</h3><p>并没有成功，报错内容：</p>
<blockquote>
<p>The value for a v-bind expression cannot be empty. Found in “v-bind:visible.”</p>
</blockquote>
<p>百度无果，弹幕和评论区也没有相关反馈，而且弹幕也出现了各种各样的问题</p>
<p>有一说一，狂神前端这些讲的确实不清晰，而且笔记和视频的对应很差，他之前的博客也找不到，公众号也没有相关文章。</p>
<p>讲的太乱了，不如看 vue 官网的文档学习，就到这里了，去学 Spring Boot 了。</p>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>前端体系</title>
    <url>/posts/59a60562.html</url>
    <content><![CDATA[<h3 id="1-前端三要素"><a href="#1-前端三要素" class="headerlink" title="1. 前端三要素"></a>1. 前端三要素</h3><ul>
<li>HTML（结构）：超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容</li>
<li>CSS（表现）：层叠样式表（Cascading Style Sheets），设定网页的表现样式</li>
<li>JavaScript（行为）：是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行， 用于控制网页的行为</li>
</ul>
<h4 id="1-1-结构层（HTML）"><a href="#1-1-结构层（HTML）" class="headerlink" title="1.1 结构层（HTML）"></a>1.1 结构层（HTML）</h4><p>太简单，不说了。</p>
<h4 id="1-2-表现层（CSS）"><a href="#1-2-表现层（CSS）" class="headerlink" title="1.2 表现层（CSS）"></a>1.2 表现层（CSS）</h4><p>CSS 层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，换句话说 就是不具备任何语法支持，它主要缺陷如下：</p>
<ul>
<li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器； </li>
<li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难 以维护；</li>
</ul>
<p>这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称之为<strong>CSS 预处理器</strong>的工具，提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护 性。大大提高了前端在样式上的开发效率。</p>
<hr>
<p><strong>什么是 CSS 预处理器？</strong></p>
<p>CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的 特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行 CSS 的编码工作。转化成通俗易 懂的话来说就是“用一种专门的编程语言，进行 Web 页面样式设计，再通过编译器转化为正常的 CSS 文 件，以供项目使用”。</p>
<hr>
<p><strong>常用的 CSS 预处理器有</strong>： </p>
<ul>
<li>SASS：基于 Ruby，通过服务端处理，功能强大。解析效率高。需要学习 Ruby 语言，上手难度高 于 LESS。</li>
<li>LESS：基于 NodeJS，通过客户端处理，使用简单。功能比 SASS 简单，解析效率也低于 SASS，但 在实际开发中足够了，所以我们后台人员如果需要的话，建议使用 LESS。</li>
</ul>
<a id="more"></a>

<h4 id="1-3-行为层（JavaScript）"><a href="#1-3-行为层（JavaScript）" class="headerlink" title="1.3 行为层（JavaScript）"></a>1.3 行为层（JavaScript）</h4><p><strong>Native 原生 JS 开发</strong></p>
<p>原生 JS 开发，也就是让我们按照<code>ECMAScript</code>标准的开发方式，简称是 ES，特点是所有浏览器都 支持。ES 标准已发布如下版本：</p>
<ul>
<li>ES3 </li>
<li>ES4（内部，未正式发布）</li>
<li>ES5（全浏览器支持）</li>
<li>ES6（常用，当前主流版本：webpack 打包成为ES5支持）</li>
<li>ES7</li>
<li>ES8</li>
<li>ES9（草案阶段）</li>
</ul>
<p>从 ES6 开始每年发布一个版本，以年份作为名称，区别就是逐步增加新特性。</p>
<hr>
<p><strong>TypeScript 微软的标准</strong></p>
<p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这 个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格（C#、Delphi、 TypeScript 之父；.NET 创立者）主导。 </p>
<h3 id="2-JavaScript-框架"><a href="#2-JavaScript-框架" class="headerlink" title="2. JavaScript 框架"></a>2. JavaScript 框架</h3><p><strong>jQuery 库</strong></p>
<p>大家熟知的 JavaScript 库，优点是简化了 DOM 操作，缺点是 DOM 操作太频繁，影响前端性能；在 前端眼里使用它仅仅是为了兼容 IE6、7、8；</p>
<hr>
<p><strong>Angular</strong></p>
<p>Google 收购的前端框架，由一群 Java 程序员开发，其特点是将后台的 MVC 模式搬到了前端并增加了<strong>模块化开发</strong>的理念，与微软合作，采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；大的缺点是版本迭代不合理（如：1代 -&gt; 2代，除了名字，基本就是两个东西；已推出了 Angular6）</p>
<hr>
<p><strong>React</strong></p>
<p>Facebook 出品，一款高性能的 JS 前端框架；特点是提出了新概念<strong>虚拟 DOM</strong>用于减少真实 DOM 操作，在内存中模拟 DOM 操作，有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一 门 <strong>JSX</strong> 语言；</p>
<hr>
<p><strong>Vue</strong></p>
<p>一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态 管理等新特性。其特点是综合了 Angular（模块化）和 React（虚拟 DOM）的优点；</p>
<hr>
<p><strong>Axios</strong></p>
<p>前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并不具备通信能力，此时就需要额 外使用一个通信框架与服务器交互；当然也可以直接选择使用 jQuery 提供的 AJAX 通信功能； </p>
<h3 id="3-JavaScript-构建工具"><a href="#3-JavaScript-构建工具" class="headerlink" title="3. JavaScript 构建工具"></a>3. JavaScript 构建工具</h3><ul>
<li><strong>Babel</strong>：JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译TypeScript </li>
<li><strong>WebPack</strong>：模块打包器，主要作用是打包、压缩、合并及按序加载</li>
</ul>
<h3 id="4-前端所需后端技术"><a href="#4-前端所需后端技术" class="headerlink" title="4. 前端所需后端技术"></a>4. 前端所需后端技术</h3><p>前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复 杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。</p>
<p>NodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno。</p>
<p> 既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：</p>
<ul>
<li><strong>Express</strong>：NodeJS 框架</li>
<li><strong>Koa</strong>：Express 简化版</li>
<li><strong>NPM</strong>：项目综合管理工具，类似于 Maven</li>
<li><strong>YARN</strong>：NPM 的替代方案，类似于 Maven 和 Gradle 的关系</li>
</ul>
<h3 id="5-UI-框架"><a href="#5-UI-框架" class="headerlink" title="5. UI 框架"></a>5. UI 框架</h3><p><strong>常用</strong></p>
<ul>
<li><p><strong>Ant-Design</strong>：阿里巴巴出品，基于 React 的 UI 框架</p>
</li>
<li><p><strong>ElementUI、iview、ice</strong>：饿了么出品，基于 Vue 的 UI 框架</p>
</li>
<li><p><strong>Bootstrap</strong>：Twitter 推出的一个用于前端开发的开源工具包</p>
</li>
<li><p><strong>AmazeUI</strong>：又叫“妹子 UI”，一款 HTML5 跨屏前端框架</p>
</li>
<li><p><strong>Layui</strong>：轻量级框架</p>
</li>
</ul>
<hr>
<p><strong>iView</strong></p>
<p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。</p>
<blockquote>
<p>[官网地址]<a href="https://www.iviewui.com/">https://www.iviewui.com/</a></p>
<p>[Github]<a href="https://github.com/TalkingData/iview-weapp">https://github.com/TalkingData/iview-weapp</a> </p>
<p>[iview-admin]<a href="https://github.com/iview/iview-admin">https://github.com/iview/iview-admin</a></p>
</blockquote>
<p><strong>备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</strong></p>
<hr>
<p><strong>ElementUI</strong></p>
<p>Element 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲 解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。</p>
<blockquote>
<p>[官网地址]<a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p>
<p>[Github]<a href="https://github.com/ElementUI/element-starter">https://github.com/ElementUI/element-starter</a></p>
<p>[vue-element-admin]<a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a></p>
</blockquote>
<p><strong>备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多</strong></p>
<hr>
<p><strong>ICE</strong></p>
<p>飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多 个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建 属于自己的中后台应用。</p>
<blockquote>
<p>[官网地址]<a href="https://alibaba.github.io/ice">https://alibaba.github.io/ice</a></p>
<p>[Github]<a href="https://github.com/alibaba/ice">https://github.com/alibaba/ice</a> </p>
</blockquote>
<p><strong>备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善， 目前尚处于观望阶段</strong></p>
<hr>
<p><strong>VantUI</strong></p>
<p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组 件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。</p>
<blockquote>
<p>[官网地址]<a href="https://youzan.github.io/vant/#/zh-CN/intro">https://youzan.github.io/vant/#/zh-CN/intro</a></p>
<p>[Github]<a href="https://github.com/youzan/vant">https://github.com/youzan/vant</a> </p>
</blockquote>
<hr>
<p><strong>AtUI</strong><br>at-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风 格。<br>的 UI 风格。</p>
<blockquote>
<p>[官网地址]<a href="https://at-ui.github.io/at-ui/#/zh">https://at-ui.github.io/at-ui/#/zh</a></p>
<p>[Github]<a href="https://github.com/at-ui/at-ui">https://github.com/at-ui/at-ui</a></p>
</blockquote>
<hr>
<p><strong>CubeUI</strong><br>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活； 扩展性强，可以方便地基于现有组件实现二次开发。</p>
<blockquote>
<p>[官网地址]<a href="https://didi.github.io/cube-ui/#/zh-CN">https://didi.github.io/cube-ui/#/zh-CN</a></p>
<p>[Github]<a href="https://github.com/didi/cube-ui/">https://github.com/didi/cube-ui/</a></p>
</blockquote>
<hr>
<p><strong>Flutter</strong><br>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。 Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。</p>
<blockquote>
<p>[官网地址] <a href="https://flutter.dev/docs">https://flutter.dev/docs</a></p>
<p>[Github]<a href="https://github.com/flutter/flutter">https://github.com/flutter/flutter</a></p>
</blockquote>
<p>备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架  </p>
<hr>
<p><strong>Ionic</strong><br>Ionic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前有潜力的一款 HTML5 手机应用开发 框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动 开发者的共同选择。</p>
<blockquote>
<p>[官网地址]<a href="https://ionicframework.com/">https://ionicframework.com/</a></p>
<p>[官网文档]<a href="https://ionicframework.com/docs/">https://ionicframework.com/docs/</a></p>
<p>[Github]<a href="https://github.com/ionic-team/ionic">https://github.com/ionic-team/ionic</a></p>
</blockquote>
<hr>
<p><strong>mpvue</strong><br>mpvue 是美团开发的一个使用 Vue.js  开发小程序的前端框架，目前支持 微信小程序、百度智能小程 序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。 </p>
<blockquote>
<p>[官网地址]<a href="http://mpvue.com/">http://mpvue.com/</a></p>
<p>[Github]<a href="https://github.com/Meituan-Dianping/mpvue">https://github.com/Meituan-Dianping/mpvue</a></p>
</blockquote>
<p> <strong>备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</strong></p>
<hr>
<p><strong>WeUI</strong><br>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序 量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元 素。</p>
<blockquote>
<p>[官网地址]<a href="https://weui.io/">https://weui.io/</a></p>
<p>[Github]<a href="https://github.com/weui/weui.git">https://github.com/weui/weui.git</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>前端历史</category>
      </categories>
      <tags>
        <tag>前端历史</tag>
      </tags>
  </entry>
  <entry>
    <title>01_初识 TypeScript</title>
    <url>/posts/a36338e0.html</url>
    <content><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>TypeScript 是一种由微软开发的开源、跨平台的编程语言。它是JavaScript 的超集，最终会被编译为 JavaScript 代码。</p>
<p>TypeScript 扩展了 JavaScript 的语法，所以任何现有的 JavaScript 程序可以运行在 TypeScript 环境中。</p>
<p>2012 年 10 月，微软发布了首个公开版本的 TypeScript，2013 年 6 月 19 日，在经历了一个预览版之后微软正式发布了正式版 TypeScript。TypeScript 的作者是安德斯·海尔斯伯格，C# 的首席架构师。它是开源和跨平台的编程语言。</p>
<h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ul>
<li><p><strong>始于JavaScript，归于JavaScript</strong></p>
<p>使用现有的 JavaScript 代码，包括流行的 JavaScript 库，并从 JavaScript 代码中调用TypeScript 代码。</p>
<p>TypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的JavaScript 引擎中。</p>
</li>
<li><p><strong>强大的工具构建，大型应用程序</strong></p>
<p>类型允许 JavaScript 开发者在开发 JavaScript 应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。</p>
<p>类型是可选的，类型推断让一些类型的注释使你的代码的静态验证有很大的不同。类型让你定义软件组件之间的接口和洞察现有 JavaScript 库的行为。</p>
</li>
<li><p><strong>先进的 JavaScript</strong></p>
<p>TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。</p>
<p>这些特性为高可信应用程序开发时是可用的，但是会被编译成简洁的ECMAScript3（或更新版本）的JavaScript。</p>
</li>
</ul>
<a id="more"></a>

<h3 id="3-说的什么意思？"><a href="#3-说的什么意思？" class="headerlink" title="3. 说的什么意思？"></a>3. 说的什么意思？</h3><p>上面全是到官网上 copy 的，看了半天也没看懂微软想表达的到底是啥意思。</p>
<p>那为什么要学 TS，因为它在社区的流行度越来越高，非常适用于一些大型项目，也非常适用于一些基础库，可以极大地提升开发效率和体验。</p>
<h3 id="4-安装-TypeScript"><a href="#4-安装-TypeScript" class="headerlink" title="4. 安装 TypeScript"></a>4. 安装 TypeScript</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装</span></span><br><span class="line">npm install -g typescript</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">tsc -V</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>02_第一个 TypeScript 程序</title>
    <url>/posts/d52e0307.html</url>
    <content><![CDATA[<h3 id="1-编写-TS-程序"><a href="#1-编写-TS-程序" class="headerlink" title="1. 编写 TS 程序"></a>1. 编写 TS 程序</h3><p>新建一个 hello.ts 文件，但是这段代码仅仅是 JavaScript 而已。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;Horsen&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sayHi(text));</span><br></pre></td></tr></table></figure>

<h3 id="2-手动编译"><a href="#2-手动编译" class="headerlink" title="2. 手动编译"></a>2. 手动编译</h3><p>在命令行中运行 TypeScript 编译器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure>

<p>输出了一个同名的 js 文件，打开看看，里面就是刚才的代码。</p>
<p>那么再用 Node.js 运行这段代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure>

<p>控制台输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello, Horsen</span><br></pre></td></tr></table></figure>

<p>ts 文件中的函数中的形参，如果使用了某个类型进行修饰，那么最终在编译的 js 文件中是没有这个类型的；ts 文件中的变量使用的是 let 进行修饰，编译的 js 文件中的修饰符就变成 var 了。</p>
<a id="more"></a>

<img src="/posts/d52e0307/image-20210128212404913.png" class>

<p>值得注意的是，ts 文件中如果直接书写 js 语法的代码，那么在 html 文件中直接引入 ts 文件，在 Chrome 浏览器中是可以直接使用的。如果 ts 文件中有 ts 语法的代码，就需要先把这个 ts 文件编译成 js 文件，在 html 文件中引入 js 文件来使用。</p>
<p>每次都要手动编译太麻烦了，可不可以自动编译。</p>
<h3 id="3-VSCdoe-自动编译"><a href="#3-VSCdoe-自动编译" class="headerlink" title="3. VSCdoe 自动编译"></a>3. VSCdoe 自动编译</h3><ol>
<li><p>生成配置文件 tsconfig.json</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;outDir&quot;: &quot;./js&quot;,/* 把ts文件最终编译后放在js目录中 */</span><br><span class="line">&quot;strict&quot;: false, /* 不使用严格模式 */</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击【终端】【运行任务】【显示所有任务】【tsc:监视】</p>
</li>
</ol>
<h3 id="4-类型注解"><a href="#4-类型注解" class="headerlink" title="4. 类型注解"></a>4. 类型注解</h3><p>TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式。 如果希望 <code>sayHi</code> 函数接收一个字符串参数，就可以给参数添加<code>:string</code>类型注解，就像刚才看到的那样。这个时候如果传入一个数组</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">str: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> text = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sayHi(text));</span><br></pre></td></tr></table></figure>

<p>就会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">02_自动编译/index.ts:5:19 - error TS2345: Argument of <span class="built_in">type</span> <span class="string">&#x27;number[]&#x27;</span> is not assignable to parameter of <span class="built_in">type</span> <span class="string">&#x27;string&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>如果不传参数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">str: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> text = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sayHi());</span><br></pre></td></tr></table></figure>

<p>也会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">02_自动编译/index.ts:5:13 - error TS2554: Expected 1 arguments, but got 0.   </span><br></pre></td></tr></table></figure>

<h3 id="5-接口"><a href="#5-接口" class="headerlink" title="5. 接口"></a>5. 接口</h3><p>继续扩展上面的例子。这里使用接口表述一个拥有两个字段的对象，类似于 Java，但是在 TypeScript 中，实现接口的时候只要保证包含了接口要求的结构就可以，不需要写<code>interface</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + person.name + <span class="string">&quot;&#x27;s age is &quot;</span> + person.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Horsen&#x27;</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sayHi(person));</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, Horsen&#39;s age is 3</span><br></pre></td></tr></table></figure>

<h3 id="6-类"><a href="#6-类" class="headerlink" title="6. 类"></a>6. 类</h3><p>继续改写这个例子，越来越面向对象了。</p>
<p>创建一个 User 类，里面不仅有属性，还有一个构造函数。因为这个类的字段包含了接口所需要的字段，所以它们可以很好的兼容。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    addr: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, addr: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + person.name + <span class="string">&quot;&#x27;s age is &quot;</span> + person.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;Horsen&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;Nanjing&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sayHi(user));</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, Horsen&#39;s age is 3</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>03_使用 webpack 打包 TS</title>
    <url>/posts/76cc13d1.html</url>
    <content><![CDATA[<h3 id="1-构建目录结构"><a href="#1-构建目录结构" class="headerlink" title="1. 构建目录结构"></a>1. 构建目录结构</h3><img src="/posts/76cc13d1/image-20210128221408689.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 package.json</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment"># 生成 tsconfig.json</span></span><br><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<h3 id="2-下载依赖"><a href="#2-下载依赖" class="headerlink" title="2. 下载依赖"></a>2. 下载依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D typescript</span><br><span class="line">npm i -D webpack@4.41.5 webpack-cli@3.3.10</span><br><span class="line">npm i -D webpack-dev-server@3.10.2</span><br><span class="line">npm i -D html-webpack-plugin clean-webpack-plugin</span><br><span class="line">npm i -D ts-loader</span><br><span class="line">npm i -D cross-env</span><br></pre></td></tr></table></figure>

<h3 id="3-入口-JS：src-main-js"><a href="#3-入口-JS：src-main-js" class="headerlink" title="3. 入口 JS：src/main.js"></a>3. 入口 JS：src/main.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;我是Horsen&#x27;</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="4-index-页面：public-index-html"><a href="#4-index-页面：public-index-html" class="headerlink" title="4. index 页面：public/index.html"></a>4. index 页面：public/index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack &amp; TS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-build-webpack-config-js"><a href="#5-build-webpack-config-js" class="headerlink" title="5.  build/webpack.config.js"></a>5.  build/webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isProd = process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>; <span class="comment">// 是否生产环境</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: isProd ? <span class="string">&#x27;production&#x27;</span> : <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">&#x27;./src/main.ts&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: resolve(<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        filename: <span class="string">&#x27;[name].[contenthash:8].js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">                use: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">                include: [resolve(<span class="string">&#x27;src&#x27;</span>)],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(&#123;&#125;),</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    devtool: isProd</span><br><span class="line">        ? <span class="string">&#x27;cheap-module-source-map&#x27;</span></span><br><span class="line">        : <span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        host: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">// 主机名</span></span><br><span class="line">        stats: <span class="string">&#x27;errors-only&#x27;</span>, <span class="comment">// 打包日志输出输出错误信息</span></span><br><span class="line">        port: <span class="number">8081</span>,</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6-配置打包命令"><a href="#6-配置打包命令" class="headerlink" title="6. 配置打包命令"></a>6. 配置打包命令</h3><p>替换 package.json 中的<code>&quot;test&quot;</code>部分</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=development webpack-dev-server --config build/webpack.config.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --config build/webpack.config.js&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-运行与打包"><a href="#7-运行与打包" class="headerlink" title="7. 运行与打包"></a>7. 运行与打包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>运行成功后，可以在浏览器看到输出的内容和引入的 js 文件</p>
<img src="/posts/76cc13d1/image-20210128223127663.png" class>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>打包成功后，可以看到生成的 dist 目录和对应的 js 文件</p>
<img src="/posts/76cc13d1/image-20210128223233659.png" class>]]></content>
      <categories>
        <category>前端学习笔记</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>01_被动信息收集</title>
    <url>/posts/7dcd5f5f.html</url>
    <content><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>被动信息收集方式是指利用第三方的服务对目标进行访问了解，例如 Google 搜索。</p>
<p>目的是通过公开渠道，获得目标主机的信息，从而不与目标系统直接交互，避免留下痕迹。</p>
<p>收集内容一般是</p>
<ul>
<li>IP 地址段</li>
<li>域名信息</li>
<li>邮件地址</li>
<li>文档图⽚数据</li>
<li>公司地址</li>
<li>公司组织架构</li>
<li>联系电话/ 传真号码</li>
<li>人员姓名/ 职务</li>
<li>目标系统使⽤的技术架构</li>
<li>公开的商业信息</li>
</ul>
<a id="more"></a>

<h3 id="2-DNS-信息收集"><a href="#2-DNS-信息收集" class="headerlink" title="2. DNS 信息收集"></a>2. DNS 信息收集</h3><h4 id="2-1-域名解析原理"><a href="#2-1-域名解析原理" class="headerlink" title="2.1 域名解析原理"></a>2.1 域名解析原理</h4><h5 id="2-2-1-DNS-服务器概述"><a href="#2-2-1-DNS-服务器概述" class="headerlink" title="2.2.1 DNS 服务器概述"></a>2.2.1 DNS 服务器概述</h5><p>运行 DNS 服务器程序的计算机储存 DNS 数据库信息。</p>
<p>DNS 服务器分为根域 DNS 服务器、顶级域名DNS 服务器。根域 DNS 服务器有13 个，都存储了全部的顶级域名服务器的所在地址；顶级域名服务器存储了每位客户所注册的主机地址，例如 163.com. 。</p>
<h5 id="2-2-2-域名记录"><a href="#2-2-2-域名记录" class="headerlink" title="2.2.2 域名记录"></a>2.2.2 域名记录</h5><ol>
<li><p><strong>A 记录（Address）正向解析</strong></p>
<p>A 记录是将一个主机名（全称域名 FQDN）和一个 IP 地址关联起来。也是大多数客户端程序默认的查询类型。例如 xuegod.cn -&gt; 8.8.8.6</p>
</li>
<li><p><strong>PTR 记录（Pointer）反向解析</strong></p>
<p>PTR 记录将一个 IP 地址对应到主机名（全称域名FQDN）。这些记录保存在 in-addr.arpa 域中。</p>
</li>
<li><p><strong>CNAME 记录（Canonical Name）别名</strong></p>
<p>别名记录，也称为规范名字（Canonical Name）。这种记录允许我们将多个名字映射到同一台计算机。例如 <a href="http://www.xuegod.cn/">www.xuegod.cn</a> 对应 IP 8.8.8.6，web.xuegod.cn 也对应IP 8.8.8.6。</p>
</li>
<li><p><strong>MX 记录（Mail eXchange）</strong></p>
<p>MX 记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如 mail.xuegod.cn。</p>
<p>当有多个 MX 记录（即有多个邮件服务器）时，则需要设置数值来确定其优先级。通过设置优先级数字来指明首选服务器，数字越小表示优先级越高。</p>
</li>
<li><p><strong>NS 记录（Name Server）</strong></p>
<p>NS（Name Server）记录是域名服务器记录，也称为授权服务器，用来指定该域名由哪个 DNS 服务器来进行解析。例如 dns.xuegod.cn。</p>
</li>
</ol>
<h5 id="2-2-3-DNS-缓存服务器"><a href="#2-2-3-DNS-缓存服务器" class="headerlink" title="2.2.3 DNS 缓存服务器"></a>2.2.3 DNS 缓存服务器</h5><p>不负责解析域，只是缓存域名解析结果。</p>
<h5 id="2-2-4-DNS-查询过程"><a href="#2-2-4-DNS-查询过程" class="headerlink" title="2.2.4 DNS 查询过程"></a>2.2.4 DNS 查询过程</h5><ol>
<li><p>浏览器缓存</p>
<p>当用户通过浏览器访问某域名时，浏览器首先会在自己的缓存中查找是否有该域名对应的 IP 地址。</p>
</li>
<li><p>系统缓存</p>
<p>当浏览器缓存中无域名对应 IP 则会自动检查用户计算机系统 Hosts 文件 DNS 缓存是否有该域名对应 IP。</p>
</li>
<li><p>路由器缓存</p>
<p>当浏览器及系统缓存中均无域名对应 IP 则进入路由器缓存中检查，<strong>以上三步均为客户端的 DNS 缓存</strong>。</p>
</li>
<li><p>ISP（互联网服务提供商）DNS 缓存</p>
<p>一般就是本地 DNS 服务器。当在用户客户端查找不到域名对应 IP 地址，则将进入 ISP DNS 缓存中进行查询。</p>
</li>
<li><p>根域名服务器</p>
<p>当以上均未完成，则进入根服务器进行查询。全球仅有13 台根域名服务器，1 个主根域名服务器，其余 12 为辅根域名服务器。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（如.com）服务器 IP 告诉本地 DNS 服务器。</p>
</li>
<li><p>顶级域名服务器</p>
<p>顶级域名服务器收到请求后查看区域文件记录，若无则将其管辖范围内主域名服务器的 IP 地址告诉本地DNS 服务器。</p>
</li>
<li><p>主域名服务器</p>
<p>主域名服务器接受到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确纪录。</p>
</li>
<li><p>保存结果至缓存</p>
<p>本地域名服务器把返回的结果保存到缓存，以备下一次使用，同时将该结果反馈给客户端，客户端通过这个 IP 地址与 Web 服务器建立链接</p>
</li>
</ol>
<h4 id="2-2-NSLOOKUP"><a href="#2-2-NSLOOKUP" class="headerlink" title="2.2 NSLOOKUP"></a>2.2 NSLOOKUP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># nslookup xuegod.cn</span></span><br><span class="line">Server:        10.28.131.221      <span class="comment"># DNS服务器</span></span><br><span class="line">Address:    10.28.131.221<span class="comment">#53   # DNS服务器地址</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:    xuegod.cn              <span class="comment"># 解析的域名</span></span><br><span class="line">Address: 101.200.128.35        <span class="comment"># 解析到的IP</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-DIG"><a href="#2-3-DIG" class="headerlink" title="2.3 DIG"></a>2.3 DIG</h4><p>@&lt;DNS 服务器地址&gt;： 指定进行域名解析的域名服务器<br>any 显示所有类型的域名记录，默认只显示 A 记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># dig @114.114.114.114 xuegod.cn any</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P1-1-Debian &lt;&lt;&gt;&gt; @114.114.114.114 xuegod.cn any</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 51569</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 512</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;xuegod.cn.            IN    ANY</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">xuegod.cn.        599    IN    MX    5 mxbiz1.qq.com.</span><br><span class="line">xuegod.cn.        599    IN    MX    10 mxbiz2.qq.com.</span><br><span class="line">xuegod.cn.        599    IN    A    101.200.128.35</span><br><span class="line">xuegod.cn.        3291    IN    NS    dns8.hichina.com.</span><br><span class="line">xuegod.cn.        3291    IN    NS    dns7.hichina.com.</span><br><span class="line"></span><br><span class="line">;; Query time: 214 msec</span><br><span class="line">;; SERVER: 114.114.114.114<span class="comment">#53(114.114.114.114)</span></span><br><span class="line">;; WHEN: 二 1月 12 16:32:57 CST 2021</span><br><span class="line">;; MSG SIZE  rcvd: 152</span><br></pre></td></tr></table></figure>

<p>使用 -x 参数利用 IP 反查域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># dig -x 114.114.114.114</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P1-1-Debian &lt;&lt;&gt;&gt; -x 114.114.114.114</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 9713</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">; COOKIE: 4b69e3119c5c4d16 (echoed)</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;114.114.114.114.in-addr.arpa.    IN    PTR</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">114.114.114.114.in-addr.arpa. 538 IN    PTR    public1.114dns.com. <span class="comment"># 域名</span></span><br><span class="line"></span><br><span class="line">;; Query time: 91 msec</span><br><span class="line">;; SERVER: 10.28.131.221<span class="comment">#53(10.28.131.221)</span></span><br><span class="line">;; WHEN: 二 1月 12 16:34:31 CST 2021</span><br><span class="line">;; MSG SIZE  rcvd: 101</span><br></pre></td></tr></table></figure>

<p>查询 DNS 服务器 bind 版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># dig txt chaos VERSION.BIND @ns3.dnsv4.com</span></span><br><span class="line">;; Warning: query response not <span class="built_in">set</span></span><br><span class="line">;; Warning: Message parser reports malformed message packet.</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P1-1-Debian &lt;&lt;&gt;&gt; txt chaos VERSION.BIND @ns3.dnsv4.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 16325</span><br><span class="line">;; flags: rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;VERSION.BIND.            CH    TXT</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">VERSION.BIND.        0    CH    TXT    <span class="string">&quot;5.1.1912.06&quot;</span> <span class="comment"># 软件包版本信息</span></span><br><span class="line"></span><br><span class="line">;; Query time: 51 msec</span><br><span class="line">;; SERVER: 129.211.176.242<span class="comment">#53(129.211.176.242)</span></span><br><span class="line">;; WHEN: 二 1月 12 16:36:17 CST 2021</span><br><span class="line">;; MSG SIZE  rcvd: 54</span><br></pre></td></tr></table></figure>

<h3 id="3-Maltego-收集子域名信息"><a href="#3-Maltego-收集子域名信息" class="headerlink" title="3. Maltego 收集子域名信息"></a>3. Maltego 收集子域名信息</h3><h4 id="3-1-子域名"><a href="#3-1-子域名" class="headerlink" title="3.1 子域名"></a>3.1 子域名</h4><p>顶级域名是域名的最后一个部分，即是域名最后一点之后的字母，例如在 <a href="http://example.com/">http://example.com</a> 这个域名中，顶级域是 .com（或.COM），大小写视为相同。</p>
<p>常见的顶级域主要分 2 类：</p>
<ol>
<li>通用顶级类别域名共 6 个， 包括用于科研机构的 .ac；用于工商金融企业的 .com；用于教育机构的 .edu；用于政府部门的 .gov；用于互联网络信息中心和运行中心的.net；用于非盈利组织的 .org。</li>
<li>国家及地区顶级域，如 .cn 代表中国，.uk 代表英国等，地理顶级域名一般由各个国家或地区负责管理。</li>
</ol>
<p>子域名（Subdomain Name），凡顶级域名前加前缀的都是该顶级域名的子域名，而子域名根据技术的多少分为二级子域名，三级子域名以及多级子域名。</p>
<h4 id="3-2-挖掘子域名的重要性"><a href="#3-2-挖掘子域名的重要性" class="headerlink" title="3.2 挖掘子域名的重要性"></a>3.2 挖掘子域名的重要性</h4><p>子域名是某个主域的二级域名或者多级域名，在防御措施严密情况下无法直接拿下主域，那么就可以采用<strong>迂回战术</strong>拿下子域名，然后无限靠近主域。</p>
<p>例如：<a href="http://www.xxxxx.com/">www.xxxxx.com</a> 主域不存在漏洞，并且防护措施严密。而二级域名 edu.xxxxx.com 存在漏洞，并且防护措施松散。</p>
<h4 id="3-3-使用-Maltego"><a href="#3-3-使用-Maltego" class="headerlink" title="3.3 使用 Maltego"></a>3.3 使用 Maltego</h4><ol>
<li>先去官网注册账号</li>
<li>然后在 Kali 中启动软件</li>
<li>左侧搜索栏输入“domain”</li>
<li>将查询出来的“domain”拖动到右侧空白处</li>
<li>双击文字更改域名</li>
<li>右键图标，点击“All Transforms”</li>
<li>选择一项进行解析</li>
</ol>
<img src="/posts/7dcd5f5f/image-20210112164303127.png" class>

<h3 id="4-Shodan-收集信息"><a href="#4-Shodan-收集信息" class="headerlink" title="4. Shodan 收集信息"></a>4. Shodan 收集信息</h3><blockquote>
<p>Shodan 官网 <a href="https://www.shodan.io/">https://www.shodan.io</a></p>
</blockquote>
<p>虽然目前人们都认为谷歌是最强劲的搜索引擎，但 Shodan 才是互联网上最可怕的搜索引擎。与谷歌不同的是，Shodan 不是在网上搜索网址，而是直接进入互联网背后的通道。Shodan 可以说是一款“黑暗”谷歌，一刻不停的在寻找着所有和互联网关联的服务器、摄像头、打印机、路由器等等。还可以直接显示出目标的具体地理位置信息。</p>
]]></content>
      <categories>
        <category>网络安全学习笔记</category>
        <category>Kali Linux 渗透测试</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Web 攻击</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>02_主动信息收集</title>
    <url>/posts/5eab130c.html</url>
    <content><![CDATA[<h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h3><h4 id="1-1-主动信息收集的特点"><a href="#1-1-主动信息收集的特点" class="headerlink" title="1.1 主动信息收集的特点"></a>1.1 主动信息收集的特点</h4><ul>
<li>直接与目标系统交互通信</li>
<li>无法避免留下访问的痕迹</li>
<li>使用受控的第三方电脑进行探测，使用代理或已经被控制的机器，做好被封杀的准备</li>
<li>扫描发送不同的探测，根据返回结果判断目标状态</li>
</ul>
<h4 id="1-2-发现目标主机的过程"><a href="#1-2-发现目标主机的过程" class="headerlink" title="1.2 发现目标主机的过程"></a>1.2 发现目标主机的过程</h4><ol>
<li>识别存活主机，发现潜在的被攻击目标</li>
<li>输出一个 IP 地址列表比如 IP 地址段 IP 地址范围</li>
<li>使用二、三、四层进行探测发现</li>
</ol>
<h4 id="1-3-TCP-IP-五层协议"><a href="#1-3-TCP-IP-五层协议" class="headerlink" title="1.3 TCP/IP 五层协议"></a>1.3 TCP/IP 五层协议</h4><table>
<thead>
<tr>
<th>名称</th>
<th>网络设备</th>
<th>协议</th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>应用层设备</td>
<td>HTTP Telnet FTP TFTP DNS SMTP</td>
</tr>
<tr>
<td>传输层</td>
<td>四层路由器、四层交换机</td>
<td>TCP UDP</td>
</tr>
<tr>
<td>网络层</td>
<td>路由器、三层交换机</td>
<td>IP ICMP RIP IDMP</td>
</tr>
<tr>
<td>数据链路层</td>
<td>网桥、交换机、网卡</td>
<td>ARP RARP IEEE802.3 PPP CSMA/CD</td>
</tr>
<tr>
<td>物理层</td>
<td>中继器、集线器、双绞线</td>
<td>FE自协商 Manchester MLT-3 4A PAMS</td>
</tr>
</tbody></table>
<a id="more"></a>

<h3 id="2-基于-ping-命令的探测"><a href="#2-基于-ping-命令的探测" class="headerlink" title="2. 基于 ping 命令的探测"></a>2. 基于 ping 命令的探测</h3><h4 id="2-1-ping"><a href="#2-1-ping" class="headerlink" title="2.1 ping"></a>2.1 ping</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># ping www.baidu.com -c 1</span></span><br><span class="line">PING www.a.shifen.com (110.242.68.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from 110.242.68.4 (110.242.68.4): icmp_seq=1 ttl=47 time=30.6 ms</span><br><span class="line"></span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 30.557/30.557/30.557/0.000 ms</span><br></pre></td></tr></table></figure>

<h4 id="2-2-traceroute"><a href="#2-2-traceroute" class="headerlink" title="2.2 traceroute"></a>2.2 traceroute</h4><p>探测从当前主机到目标主机之间经过了哪些网络设备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># traceroute xuegod.cn</span></span><br><span class="line">traceroute to xuegod.cn (101.200.128.35), 30 hops max, 60 byte packets</span><br><span class="line"> 1  _gateway (10.21.180.1)  51.182 ms  51.039 ms  51.414 ms</span><br><span class="line"> 2  10.21.36.250 (10.21.36.250)  51.320 ms  51.219 ms  51.144 ms</span><br><span class="line"> 3  222.190.3.17 (222.190.3.17)  53.084 ms  52.989 ms  52.888 ms</span><br><span class="line"> 4  * * *</span><br><span class="line"> 5  222.190.59.65 (222.190.59.65)  52.650 ms  52.572 ms 222.190.59.61 (222.190.59.61)  52.508 ms</span><br><span class="line"> 6  202.97.97.253 (202.97.97.253)  70.559 ms 202.97.33.33 (202.97.33.33)  36.240 ms  36.070 ms</span><br><span class="line"> 7  36.110.246.134 (36.110.246.134)  39.548 ms 36.110.246.150 (36.110.246.150)  39.299 ms 36.110.246.138 (36.110.246.138)  41.839 ms</span><br><span class="line"> 8  36.110.246.65 (36.110.246.65)  39.122 ms 106.120.186.130 (106.120.186.130)  41.786 ms 106.38.196.238 (106.38.196.238)  41.669 ms</span><br><span class="line"> 9  106.38.196.210 (106.38.196.210)  41.644 ms 45.112.216.129 (45.112.216.129)  41.512 ms 106.38.196.226 (106.38.196.226)  41.485 ms</span><br><span class="line">10  45.112.216.125 (45.112.216.125)  41.363 ms 140.205.27.229 (140.205.27.229)  41.317 ms 116.251.117.25 (116.251.117.25)  41.271 ms</span><br></pre></td></tr></table></figure>

<h4 id="2-3-arping"><a href="#2-3-arping" class="headerlink" title="2.3 arping"></a>2.3 arping</h4><p>Address Resolution Protocol 地址解析协议，计算机通过 ARP 协议将 IP 地址转换成 MAC 地址。</p>
<p>在以太网中，数据传输的目标地址是 MAC 地址，一个主机要和另一个主机进行直接通信，<strong>必须要知道目标主机的 MAC 地址</strong>。</p>
<p>计算机使用者通常只知道目标机器 IP 信息，“地址解析” 就是主机在发送帧前将目标 IP 地址转换成目标 MAC 地址的过程。</p>
<p>简单地说，ARP 协议主要负责将局域网中的 32 位 IP 地址转换为对应的 48 位物理地址，即网卡的 MAC 地址，保障通信顺利。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># arping 10.21.180.1 -c 1</span></span><br><span class="line">ARPING 10.21.180.1</span><br><span class="line">60 bytes from f4:e5:f2:25:4d:71 (10.21.180.1): index=0 time=7.753 msec</span><br><span class="line"></span><br><span class="line">--- 10.21.180.1 statistics ---</span><br><span class="line">1 packets transmitted, 1 packets received,   0% unanswered (0 extra)</span><br><span class="line">rtt min/avg/max/std-dev = 7.753/7.753/7.753/0.000 ms</span><br></pre></td></tr></table></figure>

<h4 id="2-4-Netdiscover"><a href="#2-4-Netdiscover" class="headerlink" title="2.4 Netdiscover"></a>2.4 Netdiscover</h4><p>Netdiscover 是一个主动/被动的 ARP 侦查工具。使用Netdiscover 工具可以在网络上扫描 IP 地址，检查在线主机或搜索为它们发送的 ARP 请求。</p>
<p><strong>主动模式</strong></p>
<p>主动的探测发现网络内主机，但是这种方式往往会引起网络管理员的注意</p>
<p>参数：<code>-i device: your network device</code><br><code>-r range: scan a given range instead of auto scan. 192.168.6.0/24,/16,/8</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># netdiscover -i eth0 -r 10.21.183.0/24</span></span><br><span class="line"></span><br><span class="line">Currently scanning: Finished!   |   Screen View: Unique Hosts</span><br><span class="line"></span><br><span class="line">1 Captured ARP Req/Rep packets, from 1 hosts.   Total size: 60</span><br><span class="line"></span><br><span class="line">_____________________________________________________________________________</span><br><span class="line">  IP            At MAC Address     Count     Len  MAC Vendor / Hostname      </span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">10.21.180.1     f4:e5:f2:25:4d:71      1      60  Unknown vendor   </span><br></pre></td></tr></table></figure>

<p><strong>被动模式</strong></p>
<p>被动模式的方法更加隐蔽，但是速度会比较慢，网卡被设置为混杂模式来侦听网络内的 arp 数据包进<br>行被动式探测，这种方式就需要网络内设备发送 arp 包才能被探测到。</p>
<p>参数：<code>-p passive mode: do not send anything, only sniff</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># netdiscover -p</span></span><br><span class="line"></span><br><span class="line">Currently scanning: (passive)   |   Screen View: Unique Hosts</span><br><span class="line"> </span><br><span class="line"> 3 Captured ARP Req/Rep packets, from 2 hosts.   Total size: 180</span><br><span class="line"> </span><br><span class="line"> _____________________________________________________________________________</span><br><span class="line">   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      </span><br><span class="line"> -----------------------------------------------------------------------------</span><br><span class="line"> 10.21.183.74    04:33:c2:00:25:a3      2     120  Unknown vendor                                                              </span><br><span class="line"> 10.21.180.1     f4:e5:f2:25:4d:71      1      60  Unknown vendor   </span><br></pre></td></tr></table></figure>

<h4 id="2-5-hping3"><a href="#2-5-hping3" class="headerlink" title="2.5 hping3"></a>2.5 hping3</h4><p>hping3 是一个命令行下使用的 TCP/IP 数据包组装/分析工具，通常 Web 服务会用来做压力测试使用，也可以进行 DOS 攻击的实验。同样 hping 只能每次扫描一个目标。</p>
<p>试试我的博客地址<code>horsenliu.gitee.io</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@horsen53:~<span class="comment"># hping3 -c 1000 -d 120 -S -w 64 -p 80 --flood --rand-source horsenliu.gitee.io</span></span><br><span class="line">HPING horsenliu.gitee.io (eth0 212.64.62.183): S <span class="built_in">set</span>, 40 headers + 120 data bytes</span><br><span class="line">hping <span class="keyword">in</span> flood mode, no replies will be shown</span><br><span class="line">^C</span><br><span class="line">--- horsenliu.gitee.io hping statistic ---</span><br><span class="line">2447289 packets transmitted, 0 packets received, 100% packet loss</span><br><span class="line">round-trip min/avg/max = 0.0/0.0/0.0 ms</span><br></pre></td></tr></table></figure>

<p>-c 1000  发送的数据包的数量<br>-d 120  发送到目标机器的每个数据包的大小。单位是字节<br>-S  只发送 SYN 数据包<br>-w 64 TCP 窗口大小<br>-p 80  目的地端口（80 是 Web 端口）<br>–flood 尽可能快地发送数据包，不需要考虑显示入站回复，洪水攻击模式<br>–rand-source 使用随机性的源头 IP 地址。这里的伪造的 IP 地址，只是在局域中伪造。通过路由器后，还会还原成真实的 IP 地址。</p>
<p>好了，现在我的博客已经打不开了。</p>
<h3 id="3-基于-Nmap-的扫描方式"><a href="#3-基于-Nmap-的扫描方式" class="headerlink" title="3. 基于 Nmap 的扫描方式"></a>3. 基于 Nmap 的扫描方式</h3><h3 id="4-使用-scapy-定制数据包进行高级扫描"><a href="#4-使用-scapy-定制数据包进行高级扫描" class="headerlink" title="4. 使用 scapy 定制数据包进行高级扫描"></a>4. 使用 scapy 定制数据包进行高级扫描</h3><h3 id="5-僵尸扫描"><a href="#5-僵尸扫描" class="headerlink" title="5. 僵尸扫描"></a>5. 僵尸扫描</h3>]]></content>
      <categories>
        <category>网络安全学习笔记</category>
        <category>Kali Linux 渗透测试</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Web 攻击</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 攻击补充</title>
    <url>/posts/7cd84864.html</url>
    <content><![CDATA[<p>了解了 OWASP Top 10 之后，再补充一些常见的 Web 攻击。</p>
<blockquote>
<p>参考文章：</p>
<p><a href="https://zoumiaojiang.com/article/common-web-security/">常见 Web 安全攻防总结</a></p>
<p><a href="https://wetest.qq.com/lab/view/136.html">Web安全知多少</a></p>
<p><a href="https://blog.csdn.net/m0_38103658/article/details/100162185">文件上传漏洞攻击与防范方法</a></p>
<p><a href="https://blog.csdn.net/wwl012345/article/details/99712598">渗透测试技术—-常见web漏洞–文件包含攻击原理及防御</a></p>
<p><a href="https://www.ouyangxiaoze.com/2019/12/531.html">任意文件读取漏洞</a></p>
</blockquote>
<h3 id="1-OS-注入"><a href="#1-OS-注入" class="headerlink" title="1. OS 注入"></a>1. OS 注入</h3><p>除了之前提到的 SQL 注入之外，还有一种 OS 命令注入，和 SQL 注入差不多，只不过 SQL 注入是针对数据库的，而 OS 命令注入是针对操作系统的。</p>
<p>OS 命令注入攻击指通过 Web 应用，执行非法的操作系统命令达到攻击的目的。只要在能调用 Shell 函数的地方就有存在被攻击的风险。倘若调用 Shell 时存在疏漏，就可以执行插入的非法命令。</p>
<p>命令注入攻击可以向 Shel l发送命令，让 Windows 或 Linux 操作系统的命令行启动程序。也就是说，通过命令注入攻击可执行操作系统上安装着的各种程序。</p>
<a id="more"></a>

<p>假如现在需要实现一个需求：用户提交一些内容到服务器，然后在服务器执行一些系统命令去产出一个结果返回给用户，接口的部分实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 Node.js 为例，假如在接口中需要从 github 下载用户指定的 repo</span></span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;mz/child_process&#x27;</span>).exec;</span><br><span class="line"><span class="keyword">let</span> params = &#123;<span class="comment">/* 用户输入的参数 */</span>&#125;;</span><br><span class="line"></span><br><span class="line">exec(<span class="string">`git clone <span class="subst">$&#123;params.repo&#125;</span> /some/path`</span>);</span><br></pre></td></tr></table></figure>

<p>如果 <code>params.repo</code> 传入的是 <code>https://github.com/zoumiaojiang/zoumiaojiang.github.io.git</code> 当然没问题了。</p>
<p>可是如果 <code>params.repo</code> 传入的是 <code>https://github.com/xx/xx.git &amp;&amp; rm -rf /* &amp;&amp;</code> 恰好你的服务是用 root 权限起的就惨了。</p>
<h3 id="2-文件上传漏洞"><a href="#2-文件上传漏洞" class="headerlink" title="2. 文件上传漏洞"></a>2. 文件上传漏洞</h3><h4 id="2-1-描述"><a href="#2-1-描述" class="headerlink" title="2.1 描述"></a>2.1 描述</h4><p>上传漏洞与 SQL 注入或 XSS 相比风险更大。</p>
<p>如果 Web 应用程序存在上传漏洞，攻击者上传的文件是 Web 脚本语言，服务器的 Web 容器解释并执行了用户上传的脚本，导致代码执行。如果上传的文件是 Flash 的策略文件 crossdomain.xml，黑客用以控制 Flash 在该域下的行为。如果上传的文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。如果上传的文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。甚至攻击者可以直接上传一个 webshell 到服务器上，完全控制系统或致使系统瘫痪。</p>
<p>大部分的网站和应用系统都有上传功能，而程序员在开发任意文件上传功能时，并未考虑文件格式后缀的合法性校验或者是否只在前端通过 js 进行后缀检验。这时攻击者可以上传一个与网站脚本语言相对应的恶意代码动态脚本，例如（jsp、asp、php、aspx文件后缀）到服务器上，从而访问这些恶意脚本中包含的恶意代码，进行动态解析最终达到执行恶意代码的效果，进一步影响服务器安全。</p>
<h4 id="2-2-防护措施"><a href="#2-2-防护措施" class="headerlink" title="2.2 防护措施"></a>2.2 防护措施</h4><ol>
<li>文件上传的目录设置为不可执行。只要 Web 容器无法解析该目录下面的文件，即使攻击者上传了脚本文件，服务器本身也不会受到影响。</li>
<li>使用随机数改写文件名和文件路径。文件上传如果要执行代码，则需要用户能够访问到这个文件。在某些环境中，用户能上传，但不能访问。如果应用了随机数改写了文件名和路径，将极大地增加攻击的成本。</li>
<li>单独设置文件服务器的域名。</li>
<li>判断文件类型。</li>
<li>使用安全设备防御。</li>
</ol>
<h3 id="3-文件包含漏洞"><a href="#3-文件包含漏洞" class="headerlink" title="3. 文件包含漏洞"></a>3. 文件包含漏洞</h3><h4 id="3-1-描述"><a href="#3-1-描述" class="headerlink" title="3.1 描述"></a>3.1 描述</h4><p><strong>什么是文件包含</strong></p>
<p>开发者将相同的函数写进单独的文件中，需要使用某个函数时直接调用此文件，无需再次编写。这种文件调用的过程称为文件包含。</p>
<p><strong>文件包含漏洞原理</strong></p>
<p>由于开发人员编写源码时可将重复使用的代码写入到单个文件中，并在需要使用的时间将它们包含在特殊的代码中，这样包含的文件中的代码就会执行。如果没有针对代码中存在文件包含的函数入口做过滤，那么就可能会导致客户端可以提交恶意的语句，并且这些语句会交由服务器端进行执行。这样就可能会泄露敏感信息或者执行恶意代码。</p>
<ul>
<li><p>PHP 文件包含相关函数如下</p>
<ul>
<li>include() 函数<br>找不到被包含的文件，只会报错，但会继续执行脚本</li>
<li>include_once() 函数<br>与 include() 函数类似，区别在于重复调用同一文件时，程序只调用一次</li>
<li>require() 函数<br>找不到被包含的文件，会报错，并且停止执行脚本</li>
<li>require_once() 函数<br>与 require() 函数类似，区别在于重复调用同一文件时，程序只调用一次</li>
<li>fopen() 函数<br>打开文件或者 URL，如果打开失败，本函数将返回 false</li>
<li>readfile() 函数<br>该函数读入一个文件并写入到输出缓冲，若成功，则返回从文件中读入的字节数；若失败，则返回 false</li>
</ul>
</li>
<li><p>JSP 文件包含相关函数如下</p>
<ul>
<li>java.io.File() 函数<br>打开一个文件的函数</li>
<li>java.io.FileReader() 函数<br>读取一个文件的函数</li>
</ul>
</li>
<li><p>ASP 文件包含函数如下</p>
<ul>
<li>include file<br>包含一个文件(包含文件的相对路径)</li>
<li>include virtual<br>包含一个文件(包含文件的虚拟路径)</li>
</ul>
</li>
</ul>
<h4 id="3-2-防护措施"><a href="#3-2-防护措施" class="headerlink" title="3.2 防护措施"></a>3.2 防护措施</h4><p>URL 栏中有以下内容则可能存在文件包含</p>
<ul>
<li>?page=</li>
<li>?file=</li>
<li>?home=</li>
</ul>
<ol>
<li>严格限制包含中的参数，取消那些不可控的参数。</li>
<li>开启 open_basedir() 函数，将其设置为指定目录，则只有该目录的文件允许被访问。</li>
<li>如果不需要文件包含，则关闭 allow_url_include() 函数，防止远程文件包含，这是最安全的办法。</li>
<li>如果需要使用文件包含，则通过使用白名单的方法对要包含的文件进行限制，这样可以做到既使用了文件包含，又可以防止文件包含漏洞。</li>
</ol>
<h3 id="4-文件读取漏洞"><a href="#4-文件读取漏洞" class="headerlink" title="4. 文件读取漏洞"></a>4. 文件读取漏洞</h3><h4 id="4-1-描述"><a href="#4-1-描述" class="headerlink" title="4.1 描述"></a>4.1 描述</h4><p>很多网站由于业务需求，往往需要提供文件（附件）下载的功能块，但是如果对下载的文件没有做限制，直接通过绝对路径对其文件进行下载，那么，恶意用户就可以利用这种方式下载服务器的敏感文件，对服务器进行进一步的威胁和攻击。</p>
<p>常见的存在任意文件读取漏洞的URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;readfile.php?file&#x3D;&quot; </span><br><span class="line">&quot;download.php?file&#x3D;&quot; </span><br><span class="line">&quot;read.php?filename&#x3D;&quot; </span><br><span class="line">&quot;down.php?file&#x3D;&quot;</span><br></pre></td></tr></table></figure>

<p>利用方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index.php?f&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br><span class="line">index.php?f&#x3D;..&#x2F;index.php</span><br><span class="line">index.php?f&#x3D;ﬁle:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<h4 id="4-2-防范措施"><a href="#4-2-防范措施" class="headerlink" title="4.2 防范措施"></a>4.2 防范措施</h4><p>该漏洞不像其他漏洞那样有通用的利用方法和相关工具，本漏洞的利用过程与具体的网站架构关系很大，需要了解常见的网站的架构，如网站的配置文件位置等信息。</p>
]]></content>
      <categories>
        <category>网络安全学习笔记</category>
        <category>Web 攻击理论知识</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Web 攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP Top 10 2017</title>
    <url>/posts/74029447.html</url>
    <content><![CDATA[<blockquote>
<p>本文参考了以下文章</p>
<p><a href="http://www.owasp.org.cn/">OWASP 中国</a> 中的 <a href="http://www.owasp.org.cn/owasp-project/2017-owasp-top-10">OWASP Top 10 2017 官方文档</a></p>
<p><a href="https://blog.csdn.net/mw_myever">mw_myever</a> 的 <a href="https://blog.csdn.net/mw_myever/article/details/108983067">OWASP top 10漏洞详解</a></p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>OWASP（开放式Web应用程序安全项目）的工具、文档、论坛和全球各地分会都是开放的，对所有致力于改进应用程序安全的人士开放，其最具权威的就是“10 项最严重的 Web 应用程序安全风险列表” ，总结了 Web 应用程序最可能、最常见、最危险的十大漏洞，是开发、测试、服务、咨询人员应知应会的知识。</p>
<p><strong>2017 相对 2013 的变化</strong></p>
<img src="/posts/74029447/image-20210106133801616.png" class>

<p>简言之，「不安全的直接对象应用」和「功能及访问控制缺失」合并成了<strong>「失效的访问控制」</strong>，删除了「跨站请求伪造（CSRF）」和「未验证的重定向和转发」，新增了<strong>「XML 外部实体（XXE）」</strong>、<strong>「不安全的反序列化」</strong>和<strong>「不足的日志记录和监控」</strong>。</p>
<a id="more"></a>

<h3 id="A4-XML-外部实体（XXE）"><a href="#A4-XML-外部实体（XXE）" class="headerlink" title="A4: XML 外部实体（XXE）"></a>A4: XML 外部实体（XXE）</h3><blockquote>
<p>许多较早的或配置错误的 XML 处理器评估了 XML 文件中的外部实体引用。攻击者可以利用外部实体窃取使用 URI 文件处理器的内部文件和共享文件、监听内部扫描端口、执行远程代码和实施拒绝服务攻击。</p>
</blockquote>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>如果攻击者可以上传 XML 文档或者在 XML 文档中添加恶意内容，通过易受攻击的代码、依赖项或集成，他们就能够攻击含有缺陷的 XML 处理器。</p>
<p>XXE 缺陷可用于提取数据、执行远程服务器请求、扫描内部系统、执行拒绝服务攻击和其他攻击。</p>
<p>举几个我看不懂的例子：</p>
<ol>
<li><p>从服务端提取数据</p>
<p><code>&lt;ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;</code></p>
</li>
<li><p>探测服务器的专用网络</p>
<p><code>&lt;!ENTITY xxeSYSTEM &quot;https://192.168.1.1/private&quot; &gt;]&gt;</code></p>
</li>
<li><p>通过恶意文件执行拒绝服务攻击</p>
<p><code>&lt;!ENTITY xxeSYSTEM &quot;file:///dev/random&quot; &gt;]&gt;</code></p>
</li>
</ol>
<h4 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h4><ol>
<li>尽可能使用简单的数据格式（如 JSON），避免对敏感数据进行序列化。</li>
<li>及时修复或更新应用程序或底层操作系统使用的所有 XML 处理器和库。</li>
<li>使用开发语言提供的禁用外部实体的方法。</li>
</ol>
<h3 id="A8-不安全的反序列化"><a href="#A8-不安全的反序列化" class="headerlink" title="A8: 不安全的反序列化"></a>A8: 不安全的反序列化</h3><blockquote>
<p>不安全的反序列化会导致远程代码执行。即使反序列化缺陷不会导致远程代码执行，攻击者也可以利用它们来执行攻击，包括：重播攻击、注入攻击和特权升级攻击。</p>
</blockquote>
<h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>序列化（Serialization）是将对象的状态信息转换为可以存储或传输（一般是以二进制的形式保存）的形式的过程。</p>
<p>在 Java 中，<code>ObjectOutputStream</code>类的 writeObject() 方法和<code>ObjectInputStream</code>类的 readObject() 方法分别可以实现序列化和反序列化。</p>
<p>所以，如果攻击者恶意构造了数据，应用在不知情的情况下对其进行了反序列化，就很可能产生远程代码执行；或者应用中有的类会在反序列化过程中或结束后改变行为，攻击者就可以改变应用逻辑实现远程代码执行攻击。前者称为对象攻击，后者称为数据结构攻击。</p>
<h4 id="防护措施-1"><a href="#防护措施-1" class="headerlink" title="防护措施"></a>防护措施</h4><ol>
<li>不接受来自不受信源的序列化对象，或使用只允许原始数据类型的序列化媒体。</li>
<li>反序列化之前，先进行严格的数据类型校验。</li>
<li>对反序列化过程进行详尽的日志记录，监控反序列化过程，在发现疑似反序列化攻击时进行警报。</li>
</ol>
<h3 id="A10-不足的日志记录和监控"><a href="#A10-不足的日志记录和监控" class="headerlink" title="A10: 不足的日志记录和监控"></a>A10: 不足的日志记录和监控</h3><blockquote>
<p>不足的日志记录和监控，以及事件响应缺失或无效的集成，使攻击者能够进一步攻击系统、保持持续性或转向更多系统，以及篡改、提取或销毁数据。大多数缺陷研究显示，缺陷被检测出的时间超过200天，且通常通过外部检测方检测，而不是通过内部流程或监控检测。</p>
</blockquote>
<h4 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h4><p>见名知意。</p>
<p>这里有几个攻击案例：</p>
<ol>
<li>一个由小团队运营的开源项目论坛软件被攻击者利用其内在漏洞攻陷了。攻击者设法删除了包含下一个版本的内部源代码仓库以及所有论坛内容。虽然代码可以恢复，但由于缺乏监控、日志记录和告警导致了更糟糕的结果。由于此问题，该论坛软件项目不再活跃。</li>
<li>攻击者使用通用密码进行用户扫描并能获取所有使用此密码的账户。对于其他账户而言，将仅有一次失败的登录尝试记录。一段时间以后，攻击者可以用另一个密码再次进行此活动。</li>
<li>美国的一家大型零售商据内部使用恶意软件分析沙箱做分析。沙箱软件检测到了一些可能不需要的软件，但没有人响应此次检测。在一个境外银行不正当的信用卡交易被检测到之前，该沙箱软件一直在产生告警信息。</li>
</ol>
<h4 id="防护措施-2"><a href="#防护措施-2" class="headerlink" title="防护措施"></a>防护措施</h4><ol>
<li>确保所有登录、访问控制失败、输入验证失败能够被记录到日志中去，并保留足够的用户上下文信息，以识别可疑或恶意帐户，并为后期取证预留足够时间。</li>
<li>确保日志以一种能被集中日志管理解决方案使用的形式生成</li>
<li>确保高额交易有完整性控制的审计信息，以防止篡改或删除，例如审计信息保存在只能进行记录增加的数据库表中。</li>
<li>建立有效的监控和告警机制，使可疑活动在可接受的时间内被发现和应对。</li>
</ol>
]]></content>
      <categories>
        <category>网络安全学习笔记</category>
        <category>Web 攻击理论知识</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Web 攻击</tag>
        <tag>OWASP Top 10</tag>
      </tags>
  </entry>
  <entry>
    <title>03_五大数据类型</title>
    <url>/posts/8fb13bff.html</url>
    <content><![CDATA[<p>Redis 是一个开源（BSD 许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如字符串（strings），散列（hashes），列表（lists），集合（sets），有序集合（sorted sets）与范围查询，bitmaps 和地理空间（geospatial）索引半径查询。 Redis 内置了复制（replication）LUA 脚本（Lua scripting），LRU 驱动事件（LRU eviction），事务（transactions）和不同级别的磁盘持久化（persistence），并通过 Redis 哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。</p>
<ol>
<li><p><strong>String (字符串)</strong></p>
<p>String 是 Redis 最基本的类型，可以理解成 Memcached 一模一样的类型，一个 key 对应一个 value。</p>
<p>String 类型是二进制安全的，意思是 Redis 的 String 可以包含任何数据，比如 jpg 图片或者序列化的对象。</p>
<p>String 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value 最多可以是 512M。</p>
</li>
<li><p><strong>List（列表）</strong></p>
<p>Redis 列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>
<p>它的底层实际是个链表。</p>
</li>
<li><p><strong>Set（集合）</strong></p>
<p>Redis 的 Set 是 String 类型的无序集合，它是通过 HashTable 实现的。</p>
</li>
<li><p><strong>Zset（sorted set：有序集合）</strong></p>
<p>Redis zset 和 set 一样，也是 String 类型元素的集合，且不允许重复的成员。不同的是每个元素都会关联一个 double 类型的分数（Score）。Redis 正是通过分数来为集合中的成员进行从小到大的排序，zset 的成员是唯一的，但是分数却可以重复。</p>
</li>
</ol>
<a id="more"></a>

<h3 id="1-Redis-键（key）"><a href="#1-Redis-键（key）" class="headerlink" title="1. Redis 键（key）"></a>1. Redis 键（key）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># KEYS *: 查看所有的key</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># SET key value: 设置一个键值对</span></span><br><span class="line">127.0.0.1:6379&gt; SET name horsen</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="comment"># EXISTS key: 判断某个key是否存在</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># MOVE key index: 移动某个key到库1</span></span><br><span class="line">127.0.0.1:6379&gt; MOVE name 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 切换过去看看</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; GET name</span><br><span class="line"><span class="string">&quot;horsen&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SET name horsen</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># EXPIRE key seconds: 给key设置生存时间,到期自动删除</span></span><br><span class="line">127.0.0.1:6379&gt; EXPIRE name 5</span><br><span class="line">(<span class="built_in">integer</span>) </span><br><span class="line"><span class="comment"># TTL key: 查看还有多长时间过期(-1表示永不过期,-2表示已过期)</span></span><br><span class="line">127.0.0.1:6379&gt; TTL name</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; TTL name</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; TTL name</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; TTL name</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; TTL name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; TTL name</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># TYPE key: 查看key的类型</span></span><br><span class="line">127.0.0.1:6379&gt; SET name horsen</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET name</span><br><span class="line"><span class="string">&quot;horsen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; TYPE name</span><br><span class="line">string</span><br></pre></td></tr></table></figure>

<h3 id="2-String-字符串"><a href="#2-String-字符串" class="headerlink" title="2. String 字符串"></a>2. String 字符串</h3><p><strong>特点：单 key 单 value</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==============================</span></span><br><span class="line"><span class="comment"># SET、GET、DEL、APPEND、STRLEN</span></span><br><span class="line"><span class="comment"># ==============================</span></span><br><span class="line">127.0.0.1:6379&gt; SET key1 value1 <span class="comment"># 设置值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1 <span class="comment"># 获得字符串长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 ,horsen <span class="comment"># 追加字符串，如果对不存在的key进行append相当于set</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; GET key1 <span class="comment"># 获得值</span></span><br><span class="line"><span class="string">&quot;value1,horsen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; DEL key1 <span class="comment"># 删除键</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line"><span class="comment"># INCR、DECR 数字增加1、减少1</span></span><br><span class="line"><span class="comment"># INCRBY、DECRBY 按照指定值增加、减少</span></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line">127.0.0.1:6379&gt; SET views 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR views</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; INCR views</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; GET views</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; DECR views</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; GET views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBY views 10</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; DECRBY views 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line"><span class="comment"># GETRANGE 获取指定区间范围内的值</span></span><br><span class="line"><span class="comment"># SETRANGE 设置指定区间范围内的值</span></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line">127.0.0.1:6379&gt; SET key1 abcdef123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 4</span><br><span class="line"><span class="string">&quot;abcde&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 -1 <span class="comment"># 获得全部的值</span></span><br><span class="line"><span class="string">&quot;abcdef123456&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SET key2 abcdefg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 2 xxx</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; GET key2</span><br><span class="line"><span class="string">&quot;abxxxfg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line"><span class="comment"># SETEX (set with expire) 设置过期时间</span></span><br><span class="line"><span class="comment"># SETNX (set if not exist) 设置时判断是否存在, 在分布式锁中常见</span></span><br><span class="line"><span class="comment"># =================================</span></span><br><span class="line">127.0.0.1:6379&gt; SETEX key3 60 value</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; TTL key3</span><br><span class="line">(<span class="built_in">integer</span>) 55</span><br><span class="line">127.0.0.1:6379&gt; TTL key3</span><br><span class="line">(<span class="built_in">integer</span>) 37</span><br><span class="line">127.0.0.1:6379&gt; TTL key3</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; GET key3</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; SETNX key4 value <span class="comment"># 如果不存在就设置, 成功返回1</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SETNX key4 value2 <span class="comment"># 如果存在就不设置, 失败返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; GET key4</span><br><span class="line"><span class="string">&quot;value&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># MSET 同时设置一个或多个key-value对</span></span><br><span class="line"><span class="comment"># MGET 返回所有(一个或多个)给定key的值</span></span><br><span class="line"><span class="comment"># 如果给定的key里面有某个key不存在, 那这个key返回特殊值nil</span></span><br><span class="line"><span class="comment"># MSETNX 当所有key都成功设置, 返回1</span></span><br><span class="line"><span class="comment"># 如果所有给定key都设置失败(至少有一个key已经存在), 返回0</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; MSET k10 v10 k11 v11 k12 v12</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;k11&quot;</span></span><br><span class="line">2) <span class="string">&quot;k12&quot;</span></span><br><span class="line">3) <span class="string">&quot;k10&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; MGET k10 k11 k12 k13</span><br><span class="line">1) <span class="string">&quot;v10&quot;</span></span><br><span class="line">2) <span class="string">&quot;v11&quot;</span></span><br><span class="line">3) <span class="string">&quot;v12&quot;</span></span><br><span class="line">4) (nil)</span><br><span class="line"><span class="comment"># 传统对象缓存</span></span><br><span class="line">127.0.0.1:6379&gt; SET user:1 &#123;name:horsen,age:18&#125;</span><br><span class="line"><span class="comment"># 使用MSET user:&#123;id&#125;:&#123;filed&#125;</span></span><br><span class="line">127.0.0.1:6379&gt; MSET user:1:name horsen user:1:age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MGET user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># GETSET 先get再set</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; GETSET db mongodb <span class="comment"># 没有旧值, 返回nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GET db</span><br><span class="line"><span class="string">&quot;mongodb&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETSET db redis <span class="comment"># 返回旧值</span></span><br><span class="line"><span class="string">&quot;mongodb&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-List-列表"><a href="#3-List-列表" class="headerlink" title="3. List 列表"></a>3. List 列表</h3><p><strong>特点：单 key 多 value</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># LPUSH 将一个或多个值插入到列表头部(左)</span></span><br><span class="line"><span class="comment"># RPUSH 将一个或多个值插入到列表尾部(右)</span></span><br><span class="line"><span class="comment"># LRANGE 返回列表中指定区间内的元素, 由start和end指定, 0表示列表的第一个元素, 可以使用负数下标, 以-1表示列表的最后一个元素, -2 表示列表的倒数第二个元素, 以此类推</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list <span class="string">&quot;end&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">3) <span class="string">&quot;end&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># LPOP 移除并返回列表的第一个元素, 当key不存在时, 返回nil</span></span><br><span class="line"><span class="comment"># RPOP 移除并返回列表的最后一个元素</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP list</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP list</span><br><span class="line"><span class="string">&quot;end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># LINDEX 按照索引下标获得元素(-1代表最后一个, 0代表第一个)</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 0</span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list -1</span><br><span class="line"><span class="string">&quot;end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># LLEN 返回列表的长度</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LLEN list</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># LREM key count element 移除count个列表中与element相等的元素</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;two&quot;</span></span><br><span class="line">5) <span class="string">&quot;two&quot;</span></span><br><span class="line">6) <span class="string">&quot;three&quot;</span></span><br><span class="line">7) <span class="string">&quot;one&quot;</span></span><br><span class="line">8) <span class="string">&quot;end&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LREM list 2 <span class="string">&quot;two&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;three&quot;</span></span><br><span class="line">5) <span class="string">&quot;one&quot;</span></span><br><span class="line">6) <span class="string">&quot;end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># LTRIM 对一个列表进行修剪(trim), 让列表只保留指定区间内的元素, 不在指定区间之内的元素都将被删除</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LTRIM list 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># RPOPLPUSH 移除列表的最后一个元素, 并将该元素添加到另一个列表并返回(可以实现将队尾元素提到队头)</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH list list</span><br><span class="line"><span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello3&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># LSET key index value 将列表下标index的元素设置为value</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list <span class="string">&quot;value0&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LSET list 0 <span class="string">&quot;value11&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class="line">1) <span class="string">&quot;value11&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># linsert key BEFORE/AFTER pivot value </span></span><br><span class="line"><span class="comment"># 在列表的pivot元素前或后插入value元素</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT list before <span class="string">&quot;horsen&quot;</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; LINSERT list BEFORE <span class="string">&quot;horsen&quot;</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; LINSERT list BEFORE <span class="string">&quot;horsen&quot;</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; LINSERT list BEFORE <span class="string">&quot;hello&quot;</span> <span class="string">&quot;horsen&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>它是一个字符串链表，从左从右都可以插入</li>
<li>如果键不存在，则创建新的链表</li>
<li>如果键已存在，则新增内容</li>
<li>如果值全移除，对应的键也就消失了</li>
<li>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了</li>
</ul>
<p>List 的一个应用是实现最新消息排行等功能，另一个应用就是消息队列，可以利用 List 的 PUSH 操作，将任务存在 List 中，然后工作线程再用 POP 操作将任务取出进行执行。Redis 还提供了操作 List 中某一段的 api，可以直接查询，删除 List 中某一段的元素。</p>
<p>Redis 的 List 是每个子元素都是 String 类型的双向链表，可以通过 push 和 pop 操作从列表的头部或者尾部添加或者删除元素，这样 List <strong>既可以作为栈，也可以作为队列</strong>。</p>
<h3 id="3-Set-集合"><a href="#3-Set-集合" class="headerlink" title="3. Set 集合"></a>3. Set 集合</h3><p><strong>特点：单 key 多 value</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># SADD 将一个或多个成员元素加入到集合中, 不能重复</span></span><br><span class="line"><span class="comment"># SMEMBERS 返回集合中的所有的成员</span></span><br><span class="line"><span class="comment"># SISMEMBER 判断元素是否是集合的成员</span></span><br><span class="line"><span class="comment"># SCARD 获取集合里面的元素个数</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; SADD <span class="built_in">set</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD <span class="built_in">set</span> <span class="string">&quot;horsen&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD <span class="built_in">set</span> <span class="string">&quot;horsen&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER <span class="built_in">set</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER <span class="built_in">set</span> <span class="string">&quot;hello1&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SCARD <span class="built_in">set</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># SREM 移除集合中的一个或多个成员元素</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; SREM <span class="built_in">set</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;horsen&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># SRANDMEMBER 于返回集合中的一个随机元素</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;happy&quot;</span></span><br><span class="line">2) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">3) <span class="string">&quot;liu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;liu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;horsen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;liu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;happy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># SPOP 随机移除集合中的指定key的一个或多个元素</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;liu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;happy&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP <span class="built_in">set</span></span><br><span class="line"><span class="string">&quot;horsen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">(empty array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># SMOVE source destination member</span></span><br><span class="line"><span class="comment"># 将指定成员member元素从source集合移动到destination集合</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;peng&quot;</span></span><br><span class="line">2) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">3) <span class="string">&quot;liu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMOVE <span class="built_in">set</span> set2 peng</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set2</span><br><span class="line">1) <span class="string">&quot;peng&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># SDIFF 差集</span></span><br><span class="line"><span class="comment"># SINTER 交集</span></span><br><span class="line"><span class="comment"># SUNION 并集</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set1</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set2</span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF set1 set2</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER set1 set2</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION set1 set2</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;f&quot;</span></span><br><span class="line">5) <span class="string">&quot;e&quot;</span></span><br></pre></td></tr></table></figure>

<p>常见的应用场景例如：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p>
<h3 id="4-Hash-哈希"><a href="#4-Hash-哈希" class="headerlink" title="4. Hash 哈希"></a>4. Hash 哈希</h3><p><strong>特点：KV 模式不变，但 V 是一个键值对</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># HSET、HGET 为哈希表中的字段赋值、取值。</span></span><br><span class="line"><span class="comment"># HMSET、HMGET 同时将多个field-value对设置到哈希表中, 会覆盖哈希表中已存在的字段</span></span><br><span class="line"><span class="comment"># HGETALL 返回哈希表中所有的字段和值</span></span><br><span class="line"><span class="comment"># HDEL 删除哈希表key中的一个或多个指定字段</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; HSET <span class="built_in">hash</span> field1 <span class="string">&quot;horsen&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGET <span class="built_in">hash</span> field1</span><br><span class="line"><span class="string">&quot;horsen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HMSET <span class="built_in">hash</span> field1 <span class="string">&quot;Horsen&quot;</span> field2 <span class="string">&quot;Liu&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGET <span class="built_in">hash</span> field1</span><br><span class="line"><span class="string">&quot;Horsen&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGET <span class="built_in">hash</span> field2</span><br><span class="line"><span class="string">&quot;Liu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;field1&quot;</span></span><br><span class="line">2) <span class="string">&quot;Horsen&quot;</span></span><br><span class="line">3) <span class="string">&quot;field2&quot;</span></span><br><span class="line">4) <span class="string">&quot;Liu&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HDEL <span class="built_in">hash</span> field1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HGETALL <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;field2&quot;</span></span><br><span class="line">2) <span class="string">&quot;Liu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># HLEN 获取哈希表中字段的数量</span></span><br><span class="line"><span class="comment"># HEXISTS 查看哈希表的指定字段是否存在</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; HSET <span class="built_in">hash</span> field1 horsenliu</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HLEN <span class="built_in">hash</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS <span class="built_in">hash</span> field1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS <span class="built_in">hash</span> field2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># HKEYS 获取哈希表中的所有域(field)</span></span><br><span class="line"><span class="comment"># HVALS 获取哈希表所有域(field)的值</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; HSET <span class="built_in">hash</span> name1 <span class="string">&quot;horsenliu&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET <span class="built_in">hash</span> name2 <span class="string">&quot;peng&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HKEYS <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;name1&quot;</span></span><br><span class="line">2) <span class="string">&quot;name2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HVALS <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;horsenliu&quot;</span></span><br><span class="line">2) <span class="string">&quot;peng&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># HINCRBY 为哈希表中的字段值加上指定增量值</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; HSET <span class="built_in">hash</span> field 4</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY <span class="built_in">hash</span> field 3</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY <span class="built_in">hash</span> field -5</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># HSETNX 为哈希表中不存在的的字段赋值</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; HSETNX <span class="built_in">hash</span> field1 <span class="string">&quot;hello&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 成功返回1</span></span><br><span class="line">127.0.0.1:6379&gt; HSETNX <span class="built_in">hash</span> field1 <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 字段已存在返回0</span></span><br><span class="line">127.0.0.1:6379&gt; HGET <span class="built_in">hash</span> field1</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p>Hash 是一个 String 类型的 field 和 value 的映射表，Hash 特别适合用于存储对象，存储部分变更的数据，如用户信息等。</p>
<h3 id="5-Zset-有序集合"><a href="#5-Zset-有序集合" class="headerlink" title="5. Zset 有序集合"></a>5. Zset 有序集合</h3><p><strong>特点：在 Set 基础上加了一个 Score 值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># ZADD 将一个或多个成员元素及其分数值加入到有序集当中</span></span><br><span class="line"><span class="comment"># ZRANGE 返回有序集中指定区间内的成员(递增)</span></span><br><span class="line"><span class="comment"># ZREVRANGE 递减排序</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD zset 1 <span class="string">&quot;one&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD zset 2 <span class="string">&quot;two&quot;</span> 3 <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE zset 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># ZRANGEBYSCORE 返回有序集合中指定分数区间的成员列表</span></span><br><span class="line"><span class="comment"># 有序集合成员按分数值递增(从小到大)次序排列</span></span><br><span class="line"><span class="comment"># ZREVRANGEBYSCOR 递减排序</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 3300 horsen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 4500 peng</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 5000 zhang</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 2700 li</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># -inf表示负无穷 inf表示正无穷</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf</span><br><span class="line">1) <span class="string">&quot;li&quot;</span></span><br><span class="line">2) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">3) <span class="string">&quot;peng&quot;</span></span><br><span class="line">4) <span class="string">&quot;zhang&quot;</span></span><br><span class="line"><span class="comment"># WITHSCORES 同时返回分数</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf WITHSCORES</span><br><span class="line">1) <span class="string">&quot;li&quot;</span></span><br><span class="line">2) <span class="string">&quot;2700&quot;</span></span><br><span class="line">3) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">4) <span class="string">&quot;3300&quot;</span></span><br><span class="line">5) <span class="string">&quot;peng&quot;</span></span><br><span class="line">6) <span class="string">&quot;4500&quot;</span></span><br><span class="line">7) <span class="string">&quot;zhang&quot;</span></span><br><span class="line">8) <span class="string">&quot;5000&quot;</span></span><br><span class="line"><span class="comment"># 递减排序</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCOR salary -inf +inf WITHSCORES</span><br><span class="line">1) <span class="string">&quot;zhang&quot;</span></span><br><span class="line">2) <span class="string">&quot;5000&quot;</span></span><br><span class="line">3) <span class="string">&quot;peng&quot;</span></span><br><span class="line">4) <span class="string">&quot;4500&quot;</span></span><br><span class="line">5) <span class="string">&quot;horsen&quot;</span></span><br><span class="line">6) <span class="string">&quot;3300&quot;</span></span><br><span class="line">7) <span class="string">&quot;li&quot;</span></span><br><span class="line">8) <span class="string">&quot;2700&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># ZCARD 计算集合中元素的数量</span></span><br><span class="line"><span class="comment"># ZCOUNT 计算有序集合中指定分数区间的成员数量</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; ZCARD salary</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT salary 4000 5000</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># zrank 返回有序集中指定成员的排名(按分数值递增顺序排列)</span></span><br><span class="line"><span class="comment"># zrevrank 递减顺序</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANK salary horsen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANK salary peng</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANK salary zhang</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK salary horsen</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK salary peng</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK salary zhang</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<p>和 Set 相比，Zset 增加了一个权重参数 score，使得集合中的元素能够按score 进行有序排列，比如一个存储全班同学成绩的 Zset ，其集合 value可以是同学的学号，而 score 就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。可以用 Zset 来做带权重的队列，比如普通消息的 score 为 1，重要消息的 score 为 2，然后工作线程可以选择按 score 的倒序来获取工作任务。让重要的任务优先执行。</p>
]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>07_Spring Boot 整合 Redis</title>
    <url>/posts/2ad476a8.html</url>
    <content><![CDATA[<p>在 Spring Boot 中一般使用 Redis Template 提供的方法来操作 Redis。</p>
<ol>
<li>JedisPoolConfig 配置连接池</li>
<li>RedisConnectionFactory 配置连接信息，这里的 RedisConnectionFactory 是一个接<br>口，我们需要使用它的实现类，在 Spring Data Redis 方案中提供了以下四种工厂模型：<ul>
<li>JredisConnectionFactory</li>
<li>JedisConnectionFactory</li>
<li>LettuceConnectionFactory</li>
<li>SrpConnectionFactory</li>
</ul>
</li>
<li>RedisTemplate 基本操作</li>
</ol>
<p>在 Spring Boot 2.X 之后，<strong>原来使用的 Jedis 被换成了 Lettuce</strong>，两者的区别是：</p>
<ul>
<li>Jedis 采用直连,，多个线程操作是不安全的，如果想要避免这个问题，需要使用 jedis pool 连接池。这更像 BIO 模式。</li>
<li>Lettuce 采用 Netty，实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据。这更像NIO 模式。</li>
</ul>
<a id="more"></a>

<h3 id="1-整合步骤"><a href="#1-整合步骤" class="headerlink" title="1. 整合步骤"></a>1. 整合步骤</h3><ol>
<li><p>新建一个 Spring Boot 项目</p>
</li>
<li><p>选择以下依赖</p>
<img src="/posts/2ad476a8/image-20201204090654290.png" class>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置文件</p>
<p><em>Spring Boot 所有的配置类都有一个自动配置类，每个自动配置类都会绑定一个properties配置文件</em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">shutdown-timeout:</span> <span class="string">0ms</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;horsenliu&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2-封装工具类"><a href="#2-封装工具类" class="headerlink" title="2. 封装工具类"></a>2. 封装工具类</h3><p>Spring Boot 自动在容器中生成了一个 RedisTemplate 和一个 StringRedisTemplate。但是，这个 RedisTemplate 的泛型是 &lt;Object, Object&gt;，而我们需要一个泛型为 &lt;String, Object&gt; 形式的 RedisTemplate，这样就需要类型转换。并且，这个 RedisTemplate 没有设置数据存在 Redis 时，key 及 value 的序列化方式。</p>
<p>因此我们可以直接自己写个配置类，配置 RedisTemplate。这里参考了这个博客：</p>
<blockquote>
<p>Redis使用FastJson序列化/FastJson2JsonRedisSerializer</p>
<p><a href="https://blog.csdn.net/moshowgame/article/details/83246363">https://blog.csdn.net/moshowgame/article/details/83246363</a></p>
</blockquote>
<ol>
<li><p>这里使用 FastJson，首先写一个序列化器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.type.TypeFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJson2JsonRedisSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 如果遇到反序列化&quot;autoType is not support&quot;错误, 添加并修改一下包名到bean文件路径</span></span><br><span class="line">        <span class="comment">// ParserConfig.getGlobalInstance().addAccept(&quot;com.xxxxx.xxx&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastJson2JsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span> || bytes.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str = <span class="keyword">new</span> String(bytes, DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectMapper</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(objectMapper, <span class="string">&quot;&#x27;objectMapper&#x27; must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JavaType <span class="title">getJavaType</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TypeFactory.defaultInstance().constructType(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后写 RedisTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 序列化配置</span></span><br><span class="line">        <span class="comment">// 方式一: 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值</span></span><br><span class="line">        <span class="comment">// Jackson2JsonRedisSerializer serializer = new Jackson2JsonRedisSerializer(Object.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二: 使用Fastjson2JsonRedisSerializer来序列化和反序列化redis的value值</span></span><br><span class="line">        FastJson2JsonRedisSerializer fastJson2JsonRedisSerializer = <span class="keyword">new</span> FastJson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        fastJson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// 使用Fastjson2JsonRedisSerializer来序列化和反序列化redis的value值</span></span><br><span class="line">        template.setValueSerializer(fastJson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(fastJson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在博客最后提到了一个问题，目前我还没有遇到，但是贴在这里避免以后会用到。</p>
<img src="/posts/2ad476a8/image-20201206100603186.png" class>
</li>
<li><p>序列化之后，使用中文 value 时就不会出现乱码了，我们可以试试看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;horsenliu&quot;</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;zh_name&quot;</span>,<span class="string">&quot;刘霍森&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;zh_name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了防止歧义，我们可以在测试类中加入<code>@Qualifier</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;redisTemplate&quot;)</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>

<p>或者直接确定泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接用 RedisTemplate 操作 Redis 需要很多代码，直接封装好一个<br>RedisUtils，这样写代码更方便点。这个 RedisUtils 交给 Spring 容器实例化，使用时直接注解注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空当前数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">flushDb</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">            connection.flushDb();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空所有数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">flushAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">            connection.flushAll();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time,</span><br><span class="line">                        TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0</span></span><br><span class="line"><span class="comment">     *              时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count,</span><br><span class="line">                    value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>那么再来测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    redisUtil.flushDb();</span><br><span class="line">    redisUtil.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;horsenliu11&quot;</span>);</span><br><span class="line">    redisUtil.set(<span class="string">&quot;zh_name&quot;</span>, <span class="string">&quot;刘霍森11&quot;</span>);</span><br><span class="line">    System.out.println(redisUtil.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(redisUtil.get(<span class="string">&quot;zh_name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Redis 学习笔记</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>配置地狱</title>
    <url>/posts/38256918.html</url>
    <content><![CDATA[<h3 id="1-创建一个存放书籍数据的数据库表"><a href="#1-创建一个存放书籍数据的数据库表" class="headerlink" title="1. 创建一个存放书籍数据的数据库表"></a>1. 创建一个存放书籍数据的数据库表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`ssmbuild`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`ssmbuild`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`books`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`books`</span> (</span><br><span class="line">  <span class="string">`bookID`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">  <span class="string">`bookName`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">  <span class="string">`bookCounts`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">  <span class="string">`detail`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`bookID`</span> (<span class="string">`bookID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> <span class="string">`books`</span>(<span class="string">`bookID`</span>,<span class="string">`bookName`</span>,<span class="string">`bookCounts`</span>,<span class="string">`detail`</span>)<span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-基本环境搭建（通用）"><a href="#2-基本环境搭建（通用）" class="headerlink" title="2. 基本环境搭建（通用）"></a>2. 基本环境搭建（通用）</h3><ol>
<li><p>新建一个普通 Maven 项目，添加 web 支持</p>
</li>
<li><p>编写<code>pom.xml</code></p>
<ul>
<li><p>导入相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JUnit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet和JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决资源导出问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解决资源导出问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在项目结构 –&gt; 构建中加入 lib 目录及所有 jar 包</p>
</li>
<li><p>建立基本结构和配置框架<strong>（java 文件夹建包，resources 文件夹建配置文件）</strong></p>
<ul>
<li><p>实体类<code>com.horsen.model</code></p>
</li>
<li><p>Dao接口<code>com.horsen.mapper</code></p>
</li>
<li><p>服务层<code>com.horsen.service</code></p>
</li>
<li><p>控制层<code>com.horsen.controller</code></p>
</li>
<li><p>过滤器<code>com.horsen.filter</code></p>
</li>
<li><p>工具类<code>com.horsen.utils</code></p>
</li>
<li><p>Mybatis 核心配置文件<code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring 核心配置文件<code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="3-Mybatis-层编写"><a href="#3-Mybatis-层编写" class="headerlink" title="3. Mybatis 层编写"></a>3. Mybatis 层编写</h3><ol>
<li><p>数据库配置文件 <code>database.properties</code></p>
<p>注意：如果是 MySQL 8.0+，需要增加<code>&amp;serverTimezone=Asia/Shanghai</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>IDEA 连接 MySQL，选择相关数据库</p>
</li>
<li><p>Mybatis 核心配置文件<code>mybatis-config.xml</code>，关联所有实体类和 Mapper 接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.horsen.model&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.horsen.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Mapper 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="meta">@Param(&quot;bookID&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="meta">@Param(&quot;bookID&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部的书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBooks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Mapper.xml 实现接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.horsen.mapper.BookMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 增加一本书 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books(bookName, bookCounts, detail)</span><br><span class="line">        values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 删除一本书 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;_int&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from ssmbuild.books</span><br><span class="line">        where bookID = #&#123;bookID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 更新一本书 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName   = #&#123;bookName&#125;,</span><br><span class="line">            bookCounts = #&#123;bookCounts&#125;,</span><br><span class="line">            detail     = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询一本书 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from ssmbuild.books</span><br><span class="line">        where bookID = #&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询全部的书 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBooks&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from ssmbuild.books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Service 层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一本书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部的书</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBooks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Service 层实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Service层调用Dao层</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBooks();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-Spring-层编写（通用）"><a href="#4-Spring-层编写（通用）" class="headerlink" title="4. Spring 层编写（通用）"></a>4. Spring 层编写（通用）</h3><ol>
<li><p>编写 Spring 整合 Mybatis（Mapper 层）的配置文件<code>spring-mapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 关联数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池</span></span><br><span class="line"><span class="comment">        dbcp: 半自动化操作, 不能自动连接</span></span><br><span class="line"><span class="comment">        c3p0: 自动化操作(自动化的加载配置文件, 并且可以设置到对象中)</span></span><br><span class="line"><span class="comment">        druid/hikari: 后面再说</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定Mybatis的配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Mapper接口扫描包, 动态实现Mapper接口, 将其注入到Spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描Mapper接口的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.horsen.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Spring 整合 Service 层的配置文件<code>spring-service.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Service的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.horsen.service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将所有业务都注入到Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.horsen.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-Spring-MVC-层编写（通用）"><a href="#5-Spring-MVC-层编写（通用）" class="headerlink" title="5. Spring MVC 层编写（通用）"></a>5. Spring MVC 层编写（通用）</h3><ol>
<li><p>编写 <code>web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Session过期时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 Spring 整合 MVC 配置文件<code>spring-mvc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态资源过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Controller的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.horsen.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>顺便把 jsp 这个目录新建了</p>
</li>
<li><p>在<code>applicationContext.xml</code>里将三个配置文件导入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h3><blockquote>
<p>刚才的一顿操作都做了什么？</p>
</blockquote>
<ul>
<li>准备数据库</li>
<li>新建项目，添加 web 支持</li>
<li>编写<code>pom.xml</code><ul>
<li>导入依赖</li>
<li>解决资源导出问题</li>
</ul>
</li>
<li>新建各种包</li>
<li>Mybatis 层<ul>
<li>数据库<code>database.properties</code></li>
<li>核心配置文件<code>mybatis-config.xml</code><ul>
<li>关联所有实体类和 Mapper 接口</li>
</ul>
</li>
<li>编写实体类</li>
<li>编写 Mapper 接口</li>
<li>编写 Mapper.xml</li>
<li>编写 Service 接口</li>
<li>编写 Service 实现类（调用 Mapper）</li>
</ul>
</li>
<li>Spring 层<ul>
<li>整合 Mybatis<code>spring-mapper.xml</code><ul>
<li>关联数据库配置文件</li>
<li>连接池</li>
<li>SqlSessionFactory</li>
<li>扫描 Mapper 包</li>
</ul>
</li>
<li>整合 Service<code>spring-service.xml</code><ul>
<li>扫描 Service 包</li>
<li>注入业务</li>
<li>配置事务管理器</li>
</ul>
</li>
</ul>
</li>
<li>Spring MVC 层<ul>
<li>编写<code>web.xml</code><ul>
<li>DispacherServlet</li>
<li>解决乱码问题</li>
<li>Session 过期时间</li>
</ul>
</li>
<li>整合 MVC<code>spring-mvc.xml</code><ul>
<li>注解驱动</li>
<li>静态资源过滤</li>
<li>视图解析器</li>
<li>扫描 Cotroller 包</li>
</ul>
</li>
<li>配置文件导入<code>applicationContext.xml</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>SSM 框架整合</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>13_单体应用开发</title>
    <url>/posts/f13416e2.html</url>
    <content><![CDATA[<p>从现在开始，开发一个小 Demo，在实战中进一步掌握 Spring Boot 和 Thymeleaf</p>
<h3 id="开发顺序"><a href="#开发顺序" class="headerlink" title="开发顺序"></a>开发顺序</h3><ol start="0">
<li>准备数据库</li>
<li>配置项目环境及首页</li>
<li>页面国际化</li>
<li>登录 + 拦截器</li>
<li>员工列表实现</li>
<li>添加员工实现</li>
<li>员工信息修改</li>
<li>删除员工实现</li>
<li>404及注销</li>
</ol>
<a id="more"></a>

<h3 id="0-准备数据库"><a href="#0-准备数据库" class="headerlink" title="0. 准备数据库"></a>0. 准备数据库</h3><p>在整合 Mybatis 的时候数据库就已经弄好了，但是在开发和测试的时候，为了方便可以自己模拟数据库中的数据。这是一个技巧，需要掌握。</p>
<ol>
<li><p>部门表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Department&gt; departments = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个部门表</span></span><br><span class="line">        departments=<span class="keyword">new</span> HashMap&lt;Integer,Department&gt;();</span><br><span class="line">        departments.put(<span class="number">101</span>,<span class="keyword">new</span> Department(<span class="number">101</span>,<span class="string">&quot;技术部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">102</span>,<span class="keyword">new</span> Department(<span class="number">102</span>,<span class="string">&quot;销售部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">103</span>,<span class="keyword">new</span> Department(<span class="number">103</span>,<span class="string">&quot;售后部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">104</span>,<span class="keyword">new</span> Department(<span class="number">104</span>,<span class="string">&quot;后勤部&quot;</span>));</span><br><span class="line">        departments.put(<span class="number">105</span>,<span class="keyword">new</span> Department(<span class="number">105</span>,<span class="string">&quot;运营部&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得所有部门信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.values();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id获得部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartmentById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>员工表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 模拟数据库中的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 员工所属的部门</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        employees = <span class="keyword">new</span> HashMap&lt;Integer, Employee&gt;();</span><br><span class="line">        employees.put(<span class="number">1001</span>, <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;张 三&quot;</span>, <span class="string">&quot;24736743@qq.com&quot;</span>, <span class="number">1</span>, <span class="number">101</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        employees.put(<span class="number">1002</span>, <span class="keyword">new</span> Employee(<span class="number">1002</span>, <span class="string">&quot;李 四&quot;</span>, <span class="string">&quot;24736743@qq.com&quot;</span>, <span class="number">1</span>, <span class="number">102</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        employees.put(<span class="number">1003</span>, <span class="keyword">new</span> Employee(<span class="number">1003</span>, <span class="string">&quot;王 五&quot;</span>, <span class="string">&quot;24736743@qq.com&quot;</span>, <span class="number">0</span>, <span class="number">103</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        employees.put(<span class="number">1004</span>, <span class="keyword">new</span> Employee(<span class="number">1004</span>, <span class="string">&quot;赵 六&quot;</span>, <span class="string">&quot;24736743@qq.com&quot;</span>, <span class="number">1</span>, <span class="number">104</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">        employees.put(<span class="number">1005</span>, <span class="keyword">new</span> Employee(<span class="number">1005</span>, <span class="string">&quot;孙 七&quot;</span>, <span class="string">&quot;24736743@qq.com&quot;</span>, <span class="number">0</span>, <span class="number">105</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主键自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer initId = <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmployeeById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加一个员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (employee.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employees.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改一个员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        deleteEmployee(employee.getId());</span><br><span class="line">        addEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="1-配置项目环境及首页"><a href="#1-配置项目环境及首页" class="headerlink" title="1. 配置项目环境及首页"></a>1. 配置项目环境及首页</h3><h4 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="1.1 环境搭建"></a>1.1 环境搭建</h4><ol>
<li><p>在新建项目的时候，选择 web、JDBC、Mysql 模块，检查 pom 是否有这三个依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>再添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决资源导出问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 application.yml 连接数据库</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SpringBoot默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment"># Druid数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment"># 如果允许时报错 java.lang.ClassNotFoundException:org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment"># 则导入log4j依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定mybatis的核心配置文件与Mapper映射文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 对应实体类的路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.horsen.model</span></span><br><span class="line">  <span class="comment"># 下划线转驼峰</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="1-2-写业务代码"><a href="#1-2-写业务代码" class="headerlink" title="1.2 写业务代码"></a>1.2 写业务代码</h4><ol>
<li><p>编写实体类</p>
</li>
<li><p>编写 Mapper 接口</p>
</li>
<li><p>编写 Mapper 接口实现 XML</p>
</li>
<li><p>编写 Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">DepartmentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DepartmentMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepartmentServiceImpl</span><span class="params">(DepartmentMapper mapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">queryDepartmentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.queryDepartmentList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">queryDepartmentById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.queryDepartmentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EmployeeMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmployeeServiceImpl</span><span class="params">(EmployeeMapper mapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">queryEmployeeList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.queryEmployeeList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">queryEmployeeById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.queryEmployeeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.addEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateEmployee</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.updateEmployee(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteEmployee</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.deleteEmployee(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="1-3-处理静态资源"><a href="#1-3-处理静态资源" class="headerlink" title="1.3 处理静态资源"></a>1.3 处理静态资源</h4><ol>
<li><p>导入静态资源，css、js 等放在 static 文件夹下；html 放在 templates 文件夹下</p>
</li>
<li><p>设定首页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Thymeleaf 解决资源导入问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br><span class="line">......</span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- icon --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/public/favicon.ico&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- img --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;mb-4&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/img/bootstrap-solid.svg&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;72&quot;</span> <span class="attr">height</span>=<span class="string">&quot;72&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<p><strong>最终目录结构如下：</strong></p>
<img src="/posts/f13416e2/image-20200821232239073.png" class>

<h3 id="2-页面国际化"><a href="#2-页面国际化" class="headerlink" title="2. 页面国际化"></a>2. 页面国际化</h3><h4 id="2-1-编写配置文件"><a href="#2-1-编写配置文件" class="headerlink" title="2.1 编写配置文件"></a>2.1 编写配置文件</h4><ol>
<li><p>准备工作</p>
<p>保证文件编码都是 UTF-8</p>
</li>
<li><p>配置文件编写</p>
<p>在 resources 目录下新建 i18n 目录，建立 login.properties，login_zh_CN.properties，文件夹会变化。右键新建，可以添加更多语言</p>
<img src="/posts/f13416e2/image-20200822112908048.png" class>
</li>
<li><p>点击左下角 Resources Bundle 选项卡，可以通过可视化界面编写配置</p>
<img src="/posts/f13416e2/image-20200822113049987.png" class>
</li>
<li><p>在配置文件中设置这个目录</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">messages:</span></span><br><span class="line">        <span class="attr">basename:</span> <span class="string">i18n.login</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-2-配置页面"><a href="#2-2-配置页面" class="headerlink" title="2.2 配置页面"></a>2.2 配置页面</h4><img src="/posts/f13416e2/image-20200822114431383.png" class>

<h4 id="2-3-配置国际化解析"><a href="#2-3-配置国际化解析" class="headerlink" title="2.3 配置国际化解析"></a>2.3 配置国际化解析</h4><ol>
<li><p>给按钮添加请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里传入参数不用&quot;?&quot;, 用&quot;(key=value)&quot;--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写一个类处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得请求的key</span></span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果没有获取到, 就是用系统默认的</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="comment">// 如果请求链接不为空</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(language)) &#123;</span><br><span class="line">            <span class="comment">// 分割请求的value</span></span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);;</span><br><span class="line">            <span class="comment">//new Local(语言, 国家);</span></span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将这个类配置到 MyMvcConfig 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-登录-拦截器"><a href="#3-登录-拦截器" class="headerlink" title="3. 登录 + 拦截器"></a>3. 登录 + 拦截器</h3><h4 id="3-1-登录"><a href="#3-1-登录" class="headerlink" title="3.1 登录"></a>3.1 登录</h4><ol>
<li><p>先禁用模板缓存</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>给表单设定一个请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model, HttpSession session,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用户名不为空且密码是123456</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            <span class="comment">// 登录成功, 将用户信息存在session中</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,username);</span><br><span class="line">            <span class="comment">// 重定向到一个新的请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录失败, 显示错误信息</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>处理重定向请求的视图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录失败提示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 判断是否显示，使用if, $&#123;&#125;可以使用工具类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-2-拦截器"><a href="#3-2-拦截器" class="headerlink" title="3.2 拦截器"></a>3.2 拦截器</h4><ol>
<li><p>自定义拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取loginUser信息进行判断</span></span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="comment">// 未登录, 返回登录页面</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="comment">// 不放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将拦截器注册到 MvcConfig 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 注册拦截器, 及拦截的请求和要剔除的请求</span></span><br><span class="line"><span class="comment">  * 还需要过滤静态资源文件</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor())</span><br><span class="line">        .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/img/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/webjars/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主页显示登录用户的信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand col-sm-3 col-md-2 mr-0&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginUser&#125;&quot;</span>&gt;</span>Company name<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-员工列表实现"><a href="#4-员工列表实现" class="headerlink" title="4. 员工列表实现"></a>4. 员工列表实现</h3><h4 id="4-1-Thymeleaf-公共页面元素提取"><a href="#4-1-Thymeleaf-公共页面元素提取" class="headerlink" title="4.1 Thymeleaf 公共页面元素提取"></a>4.1 Thymeleaf 公共页面元素提取</h4><p><strong>方法：</strong></p>
<ol>
<li>提取的公共片段用<code>th:fragment</code>命名</li>
<li>在页面中用<code>th:insert</code>插入模版名，除了使用<code>insert</code>插入，还可以使用<code>replace</code>替换，或者<code>include</code>包含。<code>replace</code>可以解决 div 多余的问题。</li>
</ol>
<hr>
<p><strong>步骤：</strong></p>
<ol>
<li><p>在 templates 下新建 commons 目录存放公共资源，新建 bar.html，将顶部导航栏和侧边栏放进去</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头部导航栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">th:fragment</span>=<span class="string">&quot;navbar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand col-sm-3 col-md-2 mr-0&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>Company name<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-dark w-100&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;navbar-nav px-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item text-nowrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://getbootstrap.com/docs/4.0/examples/dashboard/#&quot;</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">th:fragment</span>=<span class="string">&quot;sidebar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-sticky&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav flex-column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-home&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                    首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feather feather-users&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;9&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;7&quot;</span> <span class="attr">r</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M23 21v-2a4 4 0 0 0-3-3.87&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M16 3.13a4 4 0 0 1 0 7.75&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                    员工管理</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在页面中添加定义好的代码片段，注意路径问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 顶部导航栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/bar::navbar&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/bar::sidebar&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-2-侧边栏按钮高亮"><a href="#4-2-侧边栏按钮高亮" class="headerlink" title="4.2 侧边栏按钮高亮"></a>4.2 侧边栏按钮高亮</h4><ol>
<li><p>添加代码片段时，附带参数<code>(activeUrl=&#39;main.html&#39;)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/bar::sidebar(activeUrl=&#x27;main.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;commons/bar::sidebar(activeUrl=&#x27;list.html&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在模板中通过<code>th:class</code>处理参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUrl==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUrl==&#x27;list.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    员工管理</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-3-页面跳转"><a href="#4-3-页面跳转" class="headerlink" title="4.3 页面跳转"></a>4.3 页面跳转</h4><ol>
<li><p>设置请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link active&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUrl==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:class</span>=<span class="string">&quot;$&#123;activeUrl==&#x27;list.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emps&#125;&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    员工管理</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Controller 处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EmployeeService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmployeeController</span><span class="params">(EmployeeService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/emps&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Employee&gt; employees = service.queryEmployeeList();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;emps&quot;</span>,employees);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;emps/list.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-4-信息展示"><a href="#4-4-信息展示" class="headerlink" title="4.4 信息展示"></a>4.4 信息展示</h4><ol>
<li><p>修改表格，用<code>th:each</code>和<code>th:text</code>实现遍历</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-sm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Department<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--/*@thymesVar id=&quot;emp&quot; type=&quot;com.horsen.model.Employee&quot;*/--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.gender==0?&#x27;女&#x27;:&#x27;男&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.eDepartment.departmentName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 时间格式化工具 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="5-添加员工实现"><a href="#5-添加员工实现" class="headerlink" title="5. 添加员工实现"></a>5. 添加员工实现</h3><h4 id="5-1-通过请求跳转页面"><a href="#5-1-通过请求跳转页面" class="headerlink" title="5.1 通过请求跳转页面"></a>5.1 通过请求跳转页面</h4><ol>
<li><p>增加一个【添加员工】按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    Section title<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-success&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>处理请求，跳转到添加页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emps/add&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="5-2-设计添加页面"><a href="#5-2-设计添加页面" class="headerlink" title="5.2 设计添加页面"></a>5.2 设计添加页面</h4><ol>
<li><p>表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Horsen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;horsenliu@qq.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;1999-04-01&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>部门信息下拉框的数据，应该为数据库中的数据，所以请求的时候要把部门信息传给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPage</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    List&lt;Department&gt; departments = departmentService.queryDepartmentList();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;departments&quot;</span>, departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emps/add&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改下拉框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/*@thymesVar id=&quot;dept&quot; type=&quot;com.horsen.model.Department&quot;*/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;departments&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.departmentName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="5-3-处理添加请求"><a href="#5-3-处理添加请求" class="headerlink" title="5.3 处理添加请求"></a>5.3 处理添加请求</h4><ol>
<li><p>表单设置请求，设置 name 属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/emp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeService.addEmployee(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="5-4-日期格式转换器"><a href="#5-4-日期格式转换器" class="headerlink" title="5.4 日期格式转换器"></a>5.4 日期格式转换器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        List&lt;SimpleDateFormat&gt; formatList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        formatList.add(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">        formatList.add(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class="line">        formatList.add(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy.MM.dd&quot;</span>));</span><br><span class="line">        formatList.add(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy_MM_dd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = formatList.get(<span class="number">0</span>).parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                date = formatList.get(<span class="number">1</span>).parse(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date = formatList.get(<span class="number">2</span>).parse(s);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e2) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        date = formatList.get(<span class="number">3</span>).parse(s);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ParseException e3) &#123;</span><br><span class="line">                        e3.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-员工信息修改"><a href="#6-员工信息修改" class="headerlink" title="6. 员工信息修改"></a>6. 员工信息修改</h3><h4 id="6-1-通过请求跳转页面"><a href="#6-1-通过请求跳转页面" class="headerlink" title="6.1 通过请求跳转页面"></a>6.1 通过请求跳转页面</h4><ol>
<li><p>给按钮添加请求，参数是员工 id</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-primary&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/emp/&#123;id&#125;(id=$&#123;emp.id&#125;)&#125;&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>处理请求（通过参数 id 查询到对应员工，返回给前端，做信息回显）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/emp/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdatePage</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span> </span>&#123;</span><br><span class="line">    Employee employee = employeeService.queryEmployeeById(id);</span><br><span class="line">    List&lt;Department&gt; departments = departmentService.queryDepartmentList();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;emp&quot;</span>, employee);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;departments&quot;</span>, departments);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;emps/update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="6-2-员工信息回显"><a href="#6-2-员工信息回显" class="headerlink" title="6.2 员工信息回显"></a>6.2 员工信息回显</h4><p><strong>重点注意单选按钮和下拉框的回显</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/emp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Last Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.lastName&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.gender==1&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check form-check-inline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:checked</span>=<span class="string">&quot;$&#123;emp.gender==0&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;department&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">&quot;$&#123;dept.id==emp.EDepartment.id&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">th:each</span>=<span class="string">&quot;dept:$&#123;departments&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">th:text</span>=<span class="string">&quot;$&#123;dept.departmentName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">th:value</span>=<span class="string">&quot;$&#123;dept.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">th:value</span>=<span class="string">&quot;$&#123;#dates.format(emp.birth,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Confirm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-3-修改后信息的提交"><a href="#6-3-修改后信息的提交" class="headerlink" title="6.3 修改后信息的提交"></a>6.3 修改后信息的提交</h4><ol>
<li><p>前端需要增加一个隐藏域，存放 id</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改表单的请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/updateEmp&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/updateEmp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmp</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">    employeeService.updateEmployee(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="7-删除员工实现"><a href="#7-删除员工实现" class="headerlink" title="7. 删除员工实现"></a>7. 删除员工实现</h3><ol>
<li><p>前端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color: white&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm btn-danger&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/delEmp/&#123;id&#125;(id=$&#123;emp.id&#125;)&#125;&quot;</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/delEmp/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    employeeService.deleteEmployee(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="8-404及注销"><a href="#8-404及注销" class="headerlink" title="8. 404及注销"></a>8. 404及注销</h3><h4 id="8-1-404"><a href="#8-1-404" class="headerlink" title="8.1 404"></a>8.1 404</h4><p>只需要在 templates 目录下添加一个 error 文件夹，文件夹中存放相应的错误页面，比如404.html 或者 4xx.html，SpringBoot 会自动使用</p>
<h4 id="8-2-注销"><a href="#8-2-注销" class="headerlink" title="8.2 注销"></a>8.2 注销</h4><ol>
<li><p>前端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/logout&#125;&quot;</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/logout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Spring Boot 先告一段落，先去学 Spring Cloud 了。</p>
<p><strong>关于如何写一个网站：</strong></p>
<ol>
<li><p>前端（页面长什么样子，用什么模板或框架，数据如何处理）</p>
</li>
<li><p>设计数据库（难点）</p>
</li>
<li><p>前端自动运行，独立化工程</p>
</li>
<li><p>数据接口如何对接</p>
</li>
<li><p>前后端级联调试</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 学习笔记</category>
        <category>Spring Boot 基础</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>CRUD</tag>
        <tag>Spring Boot</tag>
        <tag>Mybatis</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>OWASP Top 10 2013</title>
    <url>/posts/736f505e.html</url>
    <content><![CDATA[<blockquote>
<p>本文是参考了以下文章</p>
<p><a href="http://www.owasp.org.cn/">OWASP 中国</a> 中的 <a href="http://www.owasp.org.cn/owasp-project/2013top10">OWASP Top 10 2013 官方文档</a></p>
<p><a href="https://blog.csdn.net/whoim_i">whoim_i</a> 的《<a href="https://blog.csdn.net/whoim_i/article/details/103173882">OWASP top10 详解</a>》</p>
<p><a href="https://www.zhihu.com/people/fk0dog">fk0dog</a> 的《<a href="https://zhuanlan.zhihu.com/p/29018939">初识OWASP TOP 10（2013）</a>》</p>
<p>并结合个人理解的总结与整理</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>OWASP（开放式Web应用程序安全项目）的工具、文档、论坛和全球各地分会都是开放的，对所有致力于改进应用程序安全的人士开放，其最具权威的就是“10 项最严重的 Web 应用程序安全风险列表” ，总结了 Web 应用程序最可能、最常见、最危险的十大漏洞，是开发、测试、服务、咨询人员应知应会的知识。</p>
<p><strong>2013 相对 2010 的变化</strong></p>
<img src="/posts/736f505e/image-20210106172455951.png" class>

<a id="more"></a>

<h3 id="A1-注入"><a href="#A1-注入" class="headerlink" title="A1: 注入"></a>A1: 注入</h3><blockquote>
<p>将不受信任的数据作为命令或查询的一部分发送到解析器时，会产生诸如 SQL 注入、NoSQL 注入、OS 注入和 LDAP 注入的注入缺陷。攻击者的恶意数据可以诱使解析器在没有适当授权的情况下执行非预期命令或访问数据。</p>
</blockquote>
<h4 id="1-1-描述"><a href="#1-1-描述" class="headerlink" title="1.1 描述"></a>1.1 描述</h4><p>作为 Java 程序员，对这个应该很熟悉了。例如一开始学习 JDBC 时老师说尽量使用<code>PreparedStatement</code>而不是<code>Statement</code>，使用 Mybatis 时尽量使用<code>#&#123;字段名&#125;</code>而不是<code>$&#123;字段名&#125;</code>，模糊查询时尽量在参数传递时加入<code>%</code>而不是在 SQL 语句中添加<code>%</code>等等。</p>
<p>常见的 SQL 注入例如，访问一个某一个 id 为 1 的实体，浏览器地址可以为<code>http://www.xxx.com/model?id=1</code>，如果有注入漏洞，就可以在后面加<code>OR 1=1</code>，这样一来 SQL 语句就变成了<code>SELECT * FROM table_name WHERE id=1 OR 1=1</code>，后果就很恐怖。</p>
<p>按照注入点类型分类，可以分为以下：</p>
<ol>
<li><p>数字型注入点</p>
<p>类似上面举的例子，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如查看用户个人信息，查看文章等大都会使用这种形式的结构传递 id 等信息，交给后端，查询出数据库中对应的信息，返回给前台。</p>
</li>
<li><p>字符型注入点</p>
<p>类似<code>http://www.xxx.com/model?name=admin</code>这种形式，其注入点 name 类型为字符类型，这一类的 SQL 语句大概为<code>SELECT * from table_name WHERE name=&#39;admin&#39;</code>，这里相比于数字型注入类型的 SQL 语句多了引号，可以是单引号或者是双引号。可以在后面加<code>&#39; OR &#39;1&#39;=&#39;1</code>，这样一来 SQL 语句就变成了<code>SELECT * FROM table_name WHERE name=&#39;admin&#39; OR &#39;1&#39;=&#39;1&#39;</code>。</p>
</li>
<li><p>搜索型注入点</p>
<p>类似<code>http://www.xxx.com/model?title=hello</code>这种形式，其注入点 name 类型为字符类型，这一类的 SQL 语句大概为<code>SELECT * from table_name WHERE title LIKE &#39;%hello%&#39;</code>。可以在后面加<code>%&#39; OR &#39;%1%&#39;=&#39;%1</code>，这样一来 SQL 语句就变成了<code>SELECT * FROM table_name WHERE title LIKE &#39;%hello%&#39; OR &#39;%1%&#39;=&#39;%1%&#39;</code>。</p>
</li>
</ol>
<h4 id="1-2-防护措施"><a href="#1-2-防护措施" class="headerlink" title="1.2 防护措施"></a>1.2 防护措施</h4><ol>
<li><strong>使用预编译语句，绑定变量。</strong>比如使用<code>PreparedStatement</code>而不是<code>Statement</code></li>
<li><strong>使用存储过程。</strong>和使用预编译语句类似，其区别就是存储过程需要先将 SQL 语句定义在数据库中。但需要注意的是，存储过程也可能存在注入问题，因此应该尽量避免在存储过程内使用动态的 SQL 语句。</li>
<li><strong>检查数据类型。</strong>比如用户在输入邮箱时，必须严格按照邮箱的格式；输入时间、日期时必须严格按照时间、日期的格式等等。但数据类型检查并非万能的，如果需求就是需要用户提交字符串，比如一段短文，则需要依赖其他的方法防范 SQL 注入。</li>
<li><strong>使用安全函数。</strong>一般来说，各种 Web 语言都实现了一些编码函数，可以帮助对抗 SQL 注入。</li>
</ol>
<h3 id="A2-失效的身份认证和会话管理"><a href="#A2-失效的身份认证和会话管理" class="headerlink" title="A2: 失效的身份认证和会话管理"></a>A2: 失效的身份认证和会话管理</h3><blockquote>
<p>通常，通过错误使用应用程序的身份认证和会话管理功能，攻击者能够破译密码、密钥或会话令牌，或者利用其它开发缺陷来暂时性或永久性冒充其他用户的身份。</p>
</blockquote>
<h4 id="2-1-描述"><a href="#2-1-描述" class="headerlink" title="2.1 描述"></a>2.1 描述</h4><p>在 Java 开发过程中，常见的情况大概就是：</p>
<ol>
<li>以明文方式存储用户的密码。这一点需要自我反思…在课程设计中从来就没有尝试过把用户密码先 MD5 加密过后再存储到数据库中，倒是在生成登录 token 的时候老老实实地 HMAC256 加密了。究其原因不过两点：1. 为了测试方便懒得加密；2. 小破项目连上线的水平都达不到，唯一的「用户」就是自己…</li>
<li>Session ID 暴露在 URL 中。</li>
<li>Session 没有做超时处理。</li>
<li>Cookie 没有加密。</li>
<li>密码强度不够。</li>
</ol>
<h4 id="2-2-防范措施"><a href="#2-2-防范措施" class="headerlink" title="2.2 防范措施"></a>2.2 防范措施</h4><ol>
<li>尽可能多几步验证身份（例如 Apple 的「两步验证」和「双重验证」）</li>
<li>执行弱密码检查。</li>
<li>设置账户封禁，避免遭受进一步的攻击。</li>
<li>存储<strong>单向加密</strong>后的用户密码。</li>
<li>设置 Session 过期时间。</li>
<li>加密 Cookie。</li>
</ol>
<h3 id="A3-跨站脚本（XSS）"><a href="#A3-跨站脚本（XSS）" class="headerlink" title="A3: 跨站脚本（XSS）"></a>A3: 跨站脚本（XSS）</h3><blockquote>
<p>当应用程序收到含有不可信的数据，在没有进行适当的验证和转义的情况下，就将它发送给一个网页浏览器，这就会产生跨站脚本攻击（简称XSS）。XSS允许攻击者在受害者的浏览器上执行脚本，从而劫持用户会话、危害网站、或者将用户转向至恶意网站。</p>
</blockquote>
<h4 id="3-1-描述"><a href="#3-1-描述" class="headerlink" title="3.1 描述"></a>3.1 描述</h4><p>恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页面时，嵌入 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p>
<p>XSS 攻击针对的是用户层面的攻击。</p>
<p>有三种已知的跨站漏洞类型：</p>
<ol>
<li><p>存储型</p>
<p>持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种 XSS 比较危险，容易造成蠕虫，盗窃 Cookie。</p>
<img src="/posts/736f505e/20190115094820160.png" class>

<p><strong>举个例子</strong></p>
<p>B 拥有一个 Web 站点，该站点允许用户发布信息/浏览已发布的信息。</p>
<p>C 检测到 B 的站点存在存储型的 XSS 漏洞。</p>
<p>C 在 B 的网站上发布一个带有恶意脚本的热点信息，该热点信息存储在了 B 的服务器的数据库中，然后吸引其它用户来阅读该热点信息。</p>
<p> B 或者是任何的其他人如 A 浏览该信息之后，C 的恶意脚本就会执行。</p>
<p>C 的恶意脚本执行后，就可以对浏览器该页面的用户发动一起 XSS 攻击。</p>
</li>
<li><p>反射型</p>
<p>非持久化，需要欺骗用户自己去点击链接才能触发 XSS 代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p>
<p>反射型 XSS 大多数是用来盗取用户的 Cookie 信息。</p>
<img src="/posts/736f505e/20190115094753418.png" class>

<p><strong>举个例子</strong></p>
<p>A 经常浏览某个网站，此网站为 B 所拥有。B 的站点需要 A 使用用户名/密码进行登录，并存储了 A 敏感信息，比如银行帐户信息。</p>
<p>C 发现 B 的站点存在反射型的 XSS 漏洞。</p>
<p>C 利用 B 网站的反射型 XSS 漏洞编写了一个 exp，做成链接的形式，并利用各种手段诱使 A 点击。</p>
<p>A 在登录到 B 的站点后，浏览了 C 提供的恶意链接。</p>
<p>嵌入到恶意链接中的恶意脚本在 A 的浏览器中执行。此脚本盗窃敏感信息（Cookie、帐号信息等信息）。然后在 A 完全不知情的情况下将这些信息发送给 C。</p>
<p>C 利用获取到的 Cookie 就可以以 A 的身份登录 B 的站点，如果脚本的功更强大的话，C 还可以对 A 的浏览器做控制并进一步利用漏洞控制。</p>
</li>
<li><p>基于 DOM 的 XSS</p>
<p>不经过后端，DOM-XSS 漏洞是基于文档对象模型（Document Objeet Model, DOM）的一种漏洞，DOM-XSS 是通过 url 传入参数去控制触发的，其实也属于反射型 XSS。</p>
</li>
</ol>
<h4 id="3-2-防范措施"><a href="#3-2-防范措施" class="headerlink" title="3.2 防范措施"></a>3.2 防范措施</h4><ol>
<li>对用户的输入和 URL 参数进行过滤，对输出进行 html 编码</li>
<li>服务端设置会话 Cookie 的 HTTP Only 属性</li>
</ol>
<h3 id="A4-不安全的直接对象引用"><a href="#A4-不安全的直接对象引用" class="headerlink" title="A4: 不安全的直接对象引用"></a>A4: 不安全的直接对象引用</h3><blockquote>
<p>当开发人员暴露一个对内部实现对象的引用时，例如，一个文件、目录或者数据库密匙，就会产生一个不安全的直接对象引用。在没有访问控制检测或其他保护时，攻击者会操控这些引用去访问未授权数据。</p>
</blockquote>
<h4 id="4-1-描述"><a href="#4-1-描述" class="headerlink" title="4.1 描述"></a>4.1 描述</h4><p>服务器上的具体文件名、路径或数据库关键字等内部资源被暴露在 URL 或网页中，攻击者可以尝试直接访问其他资源。攻击者绕过网站的身份验证机制，并通过修改指向对象链接中的参数值来直接访问目标对象资源，这类资源可以是属于其他用户的数据库条目以及服务器系统中的隐私文件等等。</p>
<p>比如，A 登录账号后，在执行邮箱修改操作时，攻击者抓包，将 A 用户标识 ID 改为 B 用户标识 ID，再发包。这样 B 用户的邮箱就莫名其妙被篡改了。</p>
<p>还是以我开发的「房屋租赁管理系统」举例，每个用户在发布房源后都需要管理员对该房源信息进行审核，审核通过才能显示在所有房源列表中。表面上审核未通过或未经审核的房源不会出现在列表中，但该房源的详细信息页面却可以通过修改 URL 中的参数访问。 </p>
<h4 id="4-2-防范措施"><a href="#4-2-防范措施" class="headerlink" title="4.2 防范措施"></a>4.2 防范措施</h4><ol>
<li>使用基于用户或会话的间接对象访问，这样可防止攻击者直接攻击未授权资源</li>
<li>检查访问，对任何来自不受信源所使用的所有对象进行访问控制检查</li>
<li>避免在 URL 或网页中直接引用内部文件名或数据库关键字</li>
<li>验证用户输入和 url 请求，拒绝包含./ …/的请求</li>
</ol>
<h3 id="A5-安全配置错误"><a href="#A5-安全配置错误" class="headerlink" title="A5: 安全配置错误"></a>A5: 安全配置错误</h3><blockquote>
<p>安全配置错误是最常见的安全问题，这通常是由于不安全的默认配置、不完整的临时配置、开源云存储、错误的 HTTP 标头配置以及包含敏感信息的详细错误信息所造成的。因此，我们不仅需要对所有的操作系统、框架、库和应用程序进行安全配置，而且必须及时修补和升级它们。</p>
</blockquote>
<h4 id="5-1-描述"><a href="#5-1-描述" class="headerlink" title="5.1 描述"></a>5.1 描述</h4><p>服务器的配置，或安装的软件配置，或安装的程序配置等等，并没有配置正确或者用的都是默认的配置。比如 MySQL 或者 Redis 在安装后没有修改默认的密码或者没有设置密码，或者开启了不必要的端口、服务、权限。</p>
<h4 id="5-2-防范措施"><a href="#5-2-防范措施" class="headerlink" title="5.2 防范措施"></a>5.2 防范措施</h4><ol>
<li>配置所有的安全机制</li>
<li>最小原则，关掉或限制不使用的服务</li>
<li>更改默认账户信息</li>
<li>使用日志和警报</li>
<li>回显信息不显示任何与实际错误相关的信息</li>
<li>检查和修复安全配置项</li>
</ol>
<h3 id="A6-敏感数据泄露"><a href="#A6-敏感数据泄露" class="headerlink" title="A6: 敏感数据泄露"></a>A6: 敏感数据泄露</h3><blockquote>
<p>许多 Web 应用程序和 API 都无法正确保护敏感数据，例如：财务数据、医疗数据和 PII 数据。攻击者可以通过窃取或修改未加密的数据来实施信用卡诈骗、身份盗窃或其他犯罪行为。未加密的敏感数据容易受到破坏，因此，我们需要对敏感数据加密，这些数据包括：传输过程中的数据、存储的数据以及浏览器的交互数据。</p>
</blockquote>
<h4 id="6-1-描述"><a href="#6-1-描述" class="headerlink" title="6.1 描述"></a>6.1 描述</h4><p>其实就是网站没有使用任何加密措施。</p>
<p>一个网站没有使用 SSL 认证所有页面，就是没有使用 Https。攻击者只需要监控网络流量（如一个开放的无线网络，打开 ARP 监控软件），并窃取用户的会话 Cookie。然后攻击者重放这个 Cookie 和劫持用户会话，就可以访问用户的私人数据。</p>
<p>举一个自身开发过程中的例子。在开发「房屋租赁管理系统」的时候，所有的房源图片和用户头像都放在阿里云 OSS 中了，为了定位具体的 bucket 就需要 endpoint、keyid、keysecret、bucketname 等参数，这些参数都是在 yml 中配置的。当我把项目 Push 到 Github 和 Gitee 仓库中之后，这些敏感数据也推上去了，我自己倒是不在意（谁会盯上我呢），但阿里云隔三岔五就会给我发短信和邮件告诉我  AccessKey 发生了泄露，并把泄露地址也告诉我了。</p>
<h4 id="6-2-防范措施"><a href="#6-2-防范措施" class="headerlink" title="6.2 防范措施"></a>6.2 防范措施</h4><ol>
<li>对系统处理、存储或传输的数据进行分类，根据分类进行访问控制。</li>
<li>对用户敏感信息的传输和存储进行加密。</li>
<li>对于没必要存放的、重要的敏感数据，应当尽快清除</li>
<li>确保传输过程中的数据被加密。</li>
</ol>
<h3 id="A7-功能级访问控制缺失"><a href="#A7-功能级访问控制缺失" class="headerlink" title="A7: 功能级访问控制缺失"></a>A7: 功能级访问控制缺失</h3><blockquote>
<p>大多数 Web 应用程序在功能在 UI 显示之前，会验证功能级别的访问权限。但是，应用程序需要在每个功能被访问时在服务器端执行相同的访问控制检查。如果请求没有被验证，攻击者能够伪造请求以在未经适当授权时访问功能。</p>
</blockquote>
<h4 id="7-1-描述"><a href="#7-1-描述" class="headerlink" title="7.1 描述"></a>7.1 描述</h4><p>类似于未授权访问，但是主要不是针对用户，而是管理层。以用户权限可使用管理层权限。就是没有做 RBAC。</p>
<p>很多系统的权限控制是通过页面灰化或隐藏 URL 实现的，没有在服务器端进行身份确认和权限验证，导致攻击者通过修改页面样式或获取隐藏URL，进而获取特权页面来对系统进行攻击，或者在匿名状态下对他人的页面进行攻击，从而获取用户数据或提升权限。</p>
<p>如果是发生在后台，攻击者能够访问到正常用户才能访问到的页面，将对所有用户的安全问题造成威胁。</p>
<h4 id="7-2-防范措施"><a href="#7-2-防范措施" class="headerlink" title="7.2 防范措施"></a>7.2 防范措施</h4><ol>
<li>设计严格的权限控制系统，对于每个请求和 URL 都要进行校验和权限确认，防止非法请求被执行。</li>
<li>RBAC，对于每个功能的访问，都要有明确的角色授权，采用过滤器的方式校验每个请求的合法性。</li>
<li>实现 Web 访问的 IP 白名单列表，禁止不可信的 IP 访问 Web 系统。</li>
</ol>
<h3 id="A8-跨站请求伪造（CSRF）"><a href="#A8-跨站请求伪造（CSRF）" class="headerlink" title="A8: 跨站请求伪造（CSRF）"></a>A8: 跨站请求伪造（CSRF）</h3><blockquote>
<p>一个跨站请求伪造攻击迫使登录用户的浏览器将伪造的 HTTP 请求，包括受害者的会话 Cookie 和所有其他自动填充的身份认证信息，发送到一个存在漏洞的 Web 应用程序。这种攻击允许攻击迫使受害者的浏览器生成让存在漏洞的应用程序认为是受害者的合法请求的请求。</p>
</blockquote>
<h4 id="8-1-描述"><a href="#8-1-描述" class="headerlink" title="8.1 描述"></a>8.1 描述</h4><p>听起来像跨站脚本（XSS），但与 XSS 非常不同。XSS 利用站点内的信任用户，而 CSRF 则通过<strong>伪装来自受信任用户的请求</strong>来利用受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。</p>
<p>说白了就是，XSS 是事先将一切都准备好，等着用户把自己的数据乖乖地交上来，而 CSRF 则是利用受信用户的 Cookie，做自己想做的事情。</p>
<p>比如要攻击一个存在问题的博客，先去目标博客留言，留下一个网址，吸引主人点击过来，然后构造个 HTML 表单提交些数据过去，比如增加一个这个博客的管理员账户。当他打开这个页面的瞬间，代码就会自动提交数据到那个博客的数据库。</p>
<img src="/posts/736f505e/image-20210107132501198.png" class>

<h4 id="8-2-防范措施"><a href="#8-2-防范措施" class="headerlink" title="8.2 防范措施"></a>8.2 防范措施</h4><ol>
<li>验证请求来源地址是否是合法用户地址（即最开始登录的来源地址）。但这只能进行简单的防御，因为这个地址可以人为的篡改。</li>
<li>重要功能点使用动态验证码进行 CSRF 防护</li>
<li>通过 token 方式进行 CSRF 防护，在服务器端对比 POST 提交参数的token 与 Session 中绑定的 token 是否一致。</li>
</ol>
<h3 id="A9-使用含有已知漏洞的组件"><a href="#A9-使用含有已知漏洞的组件" class="headerlink" title="A9: 使用含有已知漏洞的组件"></a>A9: 使用含有已知漏洞的组件</h3><blockquote>
<p>组件（例如：库、框架和其他软件模块）拥有和应用程序相同的权限。如果应用程序中含有已知漏洞的组件被攻击者利用，可能会造成严重的数据丢失或服务器接管。同时，使用含有已知漏洞的组件的应用程序和API可能会破坏应用程序防御、造成各种攻击并产生严重影响。</p>
</blockquote>
<h4 id="9-1-描述"><a href="#9-1-描述" class="headerlink" title="9.1 描述"></a>9.1 描述</h4><p>数据库、框架，和其他软件模块几乎都拥有完全权限的运行。如果利用有漏洞的组件，这种攻击可以导致数据丢失或服务器被入侵。</p>
<p>大多数的开发团队并不会把及时更新组件和库当成他们的工作重心，更不关心组件和库的版本，然而应用程序使用带有已知漏洞的组件会破坏应用程序防御系统，可能导致严重的数据丢失或服务器接管。</p>
<h4 id="9-2-防范措施"><a href="#9-2-防范措施" class="headerlink" title="9.2 防范措施"></a>9.2 防范措施</h4><ol>
<li>移除不使用的依赖、不需要的功能、组件、文件和文档。</li>
<li>仅从官方渠道安全的获取组件，并使用签名机制来降低组件被篡改或加入恶意漏洞的风险。</li>
<li>监控那些不再维护或者不发布安全补丁的库和组件。如果不能打补丁，可以考虑部署虚拟补丁来监控、检测或保护。</li>
</ol>
<h3 id="A10-未验证的重定向和转发"><a href="#A10-未验证的重定向和转发" class="headerlink" title="A10: 未验证的重定向和转发"></a>A10: 未验证的重定向和转发</h3><h4 id="10-1-描述"><a href="#10-1-描述" class="headerlink" title="10.1 描述"></a>10.1 描述</h4><p><strong>关于重定向和转发的区别</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>重定向</th>
<th>转发</th>
</tr>
</thead>
<tbody><tr>
<td>状态码</td>
<td>3XX</td>
<td></td>
</tr>
<tr>
<td>地址栏</td>
<td>变化</td>
<td>不变化</td>
</tr>
<tr>
<td>不恰当的比喻</td>
<td>A 不知道 B 的号码，打给了 C，C 向 A 提供了 B 的号码，A 重新给 B 打了个电话。</td>
<td>A 不知道 B 的号码，打给了 C，B 就在 C 旁边，C 把电话给了 B ，A 不需要重新给 B 打电话。</td>
</tr>
</tbody></table>
<p>常见的钓鱼网站就是利用这个漏洞，如果网站没有对带有用户输入参数的目的 URL 做验证，攻击者就可以引导用户访问他们所要用户访问的站点。</p>
<p>比如，攻击者把<a href="http://www.baidu.com/sss.php?target=http://diaoyu.com%E5%8F%91%E7%BB%99%E7%94%A8%E6%88%B7%EF%BC%8C%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B%E8%BD%AF%E4%BB%B6%E8%AE%A4%E4%B8%BA%E8%BF%99%E6%98%AF%E6%9D%A5%E8%87%AA%E7%99%BE%E5%BA%A6%E7%9A%84%E9%93%BE%E6%8E%A5%EF%BC%8C%E6%98%AF%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%8C%E4%BD%86%E7%94%A8%E6%88%B7%E7%82%B9%E5%87%BB%E4%B9%8B%E5%90%8E%E5%B0%B1%E4%BC%9A%E8%B7%B3%E8%BD%AC%E5%88%B0%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%87%A0%E4%B9%8E%E4%B8%80%E6%AF%9B%E4%B8%80%E6%A0%B7%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%EF%BC%8C%E5%BD%93%E4%BB%96%E4%BB%AC%E8%BE%93%E5%85%A5%E4%BA%86%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E4%B9%8B%E5%90%8E%EF%BC%8C%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF%E5%B0%B1%E6%B3%84%E9%9C%B2%E7%BB%99%E6%94%BB%E5%87%BB%E8%80%85%E4%BA%86%E3%80%82">http://www.baidu.com/sss.php?target=http://diaoyu.com发给用户，安全检测软件认为这是来自百度的链接，是安全的，但用户点击之后就会跳转到前端页面几乎一毛一样钓鱼网站，当他们输入了用户名密码之后，隐私信息就泄露给攻击者了。</a></p>
<p>第一次遇到这个套路是大学一年级的时候，在邮箱里看到一个群发文件，里面赫然写着南京工程学院，并配上了一个校徽，下面是一个二维码。扫了码之后就跳转到钓鱼网站了，我还特意检查了以下浏览器地址，前面仍然是<a href="https://mail.qq.com/%EF%BC%8C%E8%BF%98%E5%A5%BD%E5%AE%83%E4%B8%91%E9%99%8B%E4%B8%8D%E5%A0%AA%EF%BC%8C%E6%AD%AA%E4%B8%83%E6%89%AD%E5%85%AB%E7%9A%84">https://mail.qq.com/，还好它丑陋不堪，歪七扭八的</a> CSS 暴露了自己。</p>
<h4 id="10-2-防范措施"><a href="#10-2-防范措施" class="headerlink" title="10.2 防范措施"></a>10.2 防范措施</h4><ol>
<li>如果使用了重定向和转发，则不要在计算目标时涉及到用户参数。</li>
<li>抓包工具抓包，抓到 302 的 URL，修改看看能否正常跳转。</li>
<li>点击操作网站，观察在重定向之前用户输入的参数有没有出现在某一个 URL 或者很多 URL 中。</li>
</ol>
]]></content>
      <categories>
        <category>网络安全学习笔记</category>
        <category>Web 攻击理论知识</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>Web 攻击</tag>
        <tag>OWASP Top 10</tag>
      </tags>
  </entry>
</search>
